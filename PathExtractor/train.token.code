private Environment . Frame createGlobals ( EventHandler eventHandler , Options options , ConfigFile configFile ) { Environment env = createEnvironment ( eventHandler , Environment . SKYLARK , ImmutableMap . < String , Extension > of ( ) ) ; for ( Class < ? > module : modules ) { logger . log ( Level . INFO , STR_ + module . getName ( ) ) ; Runtime . registerModuleGlobals ( env , module ) ; if ( OptionsAwareModule . class . isAssignableFrom ( module ) ) { ( ( OptionsAwareModule ) getModuleGlobal ( env , module ) ) . setOptions ( options ) ; } if ( LabelsAwareModule . class . isAssignableFrom ( module ) ) { ( ( LabelsAwareModule ) getModuleGlobal ( env , module ) ) . setConfigFile ( configFile ) ; } } env . mutability ( ) . close ( ) ; return env . getGlobals ( ) ; }
private boolean boundsSafe ( int x , int y ) { if ( ( y < NUM_ ) || ( y >= height ) || ( x < NUM_ ) || ( x >= width ) ) { return BOOL_ ; } return BOOL_ ; }
private ResourceResponse patchResourceById ( Context context , Request request , String resourceId , String revision , List < PatchOperation > patchOperations ) throws ResourceException { idRequired ( request . getResourcePath ( ) ) ; noSubObjects ( request . getResourcePath ( ) ) ; ResourceResponse resource = readResource ( context , repoId ( resourceId ) ) ; return patchResource ( context , request , resource , revision , patchOperations ) ; }
private void zoomOut ( ) { chartView . zoomOut ( ) ; zoomControls . setIsZoomInEnabled ( chartView . canZoomIn ( ) ) ; zoomControls . setIsZoomOutEnabled ( chartView . canZoomOut ( ) ) ; }
public CombinedRangeXYPlot ( ValueAxis rangeAxis ) { super ( null , null , rangeAxis , null ) ; this . subplots = new java . util . ArrayList < XYPlot > ( ) ; }
public static void addGhoulArmorTextures ( Item helmet , Item chestplate , Item leggings , Item boots , String res1 , String res2 ) { addGhoulArmorTextures ( helmet , chestplate , leggings , boots , new ResourceLocation ( res1 ) , new ResourceLocation ( res2 ) ) ; }
public NoSuchNameException ( ) { super ( ) ; }
public int optInt ( String key ) { return this . optInt ( key , NUM_ ) ; }
public static void openBugButtonsWindowItem ( Connector connector ) { RaptorWindowItem [ ] items = Raptor . getInstance ( ) . getWindow ( ) . getWindowItems ( BugButtonsWindowItem . class ) ; boolean openNewWindow = BOOL_ ; for ( RaptorWindowItem item : items ) { BugButtonsWindowItem bugButtonsItem = ( BugButtonsWindowItem ) item ; if ( bugButtonsItem . getConnector ( ) == connector ) { Raptor . getInstance ( ) . getWindow ( ) . forceFocus ( item ) ; openNewWindow = BOOL_ ; break ; } } if ( openNewWindow ) { Raptor . getInstance ( ) . getWindow ( ) . addRaptorWindowItem ( new BugButtonsWindowItem ( connector ) ) ; } }
private void writeJavaParameterSpec ( JavaParameterSpec spec , Document document , Element parentElement ) { Element parameter = document . createElement ( STR_ ) ; parentElement . appendChild ( parameter ) ; parameter . setAttribute ( STR_ , spec . getPackageName ( ) ) ; parameter . setAttribute ( STR_ , spec . getClassName ( ) ) ; parameter . setAttribute ( STR_ , spec . getHalfSignature ( ) ) ; parameter . setAttribute ( STR_ , Integer . toString ( spec . getParamIdx ( ) ) ) ; }
@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( NUM_ ) ; newVector . addElement ( new Option ( STR_ + STR_ + STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ; newVector . addElement ( new Option ( STR_ + STR_ , STR_ , NUM_ , STR_ ) ) ; return newVector . elements ( ) ; }
public static boolean isTokenExpired ( String tokenExpiry ) throws CoreTokenException { try { Date expiryDate = DateUtils . stringToDate ( tokenExpiry ) ; long now = currentTimeMillis ( ) ; if ( expiryDate . getTime ( ) <= now ) { return BOOL_ ; } else { return BOOL_ ; } } catch ( ParseException ex ) { String [ ] data = new String [ ] { tokenExpiry } ; throw new CoreTokenException ( NUM_ , data , NUM_ ) ; } }
private void await ( ) { try { boolean nodeRemoved = this . removeConvertedNodes ( root ) ; if ( ! nodeRemoved && root . hasChildren ( ) ) { logger . debug ( STR_ , blockingQueue . size ( ) ) ; this . blockingQueue . take ( ) ; this . blockingQueue . offer ( NUM_ ) ; logger . debug ( STR_ , blockingQueue . size ( ) ) ; } } catch ( InterruptedException e ) { logger . warn ( STR_ ) ; Thread . currentThread ( ) . interrupt ( ) ; } }
public FileFilterUtils ( ) { }
public void addPoint ( PointLayer point ) { Image pointIcon = point . getIcon ( ) ; if ( pointIcon == null ) { point . setIcon ( icon ) ; } if ( ! point . isProjected ( ) ) { Coord c = getProjection ( ) . fromWGS84 ( point ) ; point . setLatitude ( c . getLatitude ( ) ) ; point . setLongitude ( c . getLongitude ( ) ) ; point . setProjected ( BOOL_ ) ; } points . addElement ( point ) ; }
public T caseGreaterOp_ ( GreaterOp_ object ) { return null ; }
public void testStreamVsBytes ( ) throws Exception { FontFactory factory = FontFactory . getInstance ( ) ; byte [ ] data = readToByteArray ( TestFont . TestFontNames . ROBOTO . getFile ( ) ) ; Font byteFont = factory . loadFonts ( data ) [ NUM_ ] ; InputStream is = new FileInputStream ( TestFont . TestFontNames . ROBOTO . getFile ( ) ) ; Font streamFont ; try { streamFont = factory . loadFonts ( is ) [ NUM_ ] ; } finally { is . close ( ) ; } { boolean thrown = BOOL_ ; Glyph byteGlyph = getLastGlyph ( byteFont ) ; try { int byteXMin = byteGlyph . xMin ( ) ; } catch ( IndexOutOfBoundsException e ) { thrown = BOOL_ ; } assertTrue ( STR_ , thrown ) ; } { boolean thrown = BOOL_ ; Glyph streamGlyph = getLastGlyph ( streamFont ) ; try { int streamXMin = streamGlyph . xMin ( ) ; } catch ( IndexOutOfBoundsException e ) { thrown = BOOL_ ; } assertTrue ( STR_ , thrown ) ; } }
public boolean isValidUse ( AnnotatedPrimitiveType type , Tree tree ) { return BOOL_ ; }
@ HLEUnimplemented @ HLEFunction ( nid = NUM_ , version = NUM_ ) public int sceUsbCamPollReadVideoFrameEnd ( ) { if ( jpegBuffer == null || jpegBuffer . isNull ( ) ) { return SceKernelErrors . ERROR_USBCAM_NO_READ_ON_VIDEO_FRAME ; } if ( currentVideoFrameCount <= lastVideoFrameCount ) { if ( log . isDebugEnabled ( ) ) { log . debug ( String . format ( STR_ , currentVideoFrameCount , lastVideoFrameCount ) ) ; } return SceKernelErrors . ERROR_USBCAM_NO_VIDEO_FRAME_AVAILABLE ; } return writeCurrentVideoImage ( jpegBuffer , jpegBufferSize ) ; }
public final static long murmurHash3 ( long x ) { x ^= x > > > NUM_ ; x *= NUM_ ; x ^= x > > > NUM_ ; x *= NUM_ ; x ^= x > > > NUM_ ; return x ; }
@ Override public String toString ( ) { return STR_ + STR_ + sharedSizeBytes + STR_ + STR_ + constSizeBytes + STR_ + STR_ + localSizeBytes + STR_ + STR_ + maxThreadsPerBlock + STR_ + STR_ + numRegs + STR_ + STR_ + ptxVersion + STR_ + STR_ + binaryVersion + STR_ ; }
public boolean isCrippled ( ) { if ( destroyed || jammed || missing || useless || fired ) { return BOOL_ ; } if ( ( type instanceof AmmoWeapon ) || ( type instanceof AmmoBayWeapon ) ) { if ( ( getLinked ( ) == null ) || ( entity . getTotalAmmoOfType ( getLinked ( ) . getType ( ) ) < NUM_ ) ) { return BOOL_ ; } } if ( isDWPMounted && ( getLinkedBy ( ) != null ) ) { return BOOL_ ; } return BOOL_ ; }
public static SimpleScheduleBuilder repeatSecondlyForTotalCount ( int count ) { if ( count < NUM_ ) throw new IllegalArgumentException ( STR_ + count ) ; return simpleSchedule ( ) . withIntervalInSeconds ( NUM_ ) . withRepeatCount ( count - NUM_ ) ; }
protected boolean translateCommand ( StringBuilder buf , String pattern , int index , boolean oldInside ) { char firstChar = pattern . charAt ( index ) ; boolean newInside = oldInside ; if ( firstChar == STR_ || firstChar == STR_ ) { if ( index + NUM_ < pattern . length ( ) ) { newInside = translateCommand ( buf , pattern , index + NUM_ , oldInside ) ; } else { buf . append ( quote ( STR_ + firstChar , oldInside ) ) ; } } else { String command = translate . getProperty ( String . valueOf ( firstChar ) ) ; if ( command == null ) { buf . append ( quote ( STR_ + firstChar , oldInside ) ) ; } else { if ( oldInside ) { buf . append ( STR_ ) ; } buf . append ( command ) ; newInside = BOOL_ ; } } return newInside ; }
public void begin ( String namespace , String name , Attributes attributes ) throws Exception { assert digester . peek ( ) instanceof ManagedBeanBean : STR_ ; if ( digester . getLogger ( ) . isDebugEnabled ( ) ) { digester . getLogger ( ) . debug ( STR_ + digester . getMatch ( ) + STR_ + CLASS_NAME ) ; } Class clazz = digester . getClassLoader ( ) . loadClass ( CLASS_NAME ) ; ManagedPropertyBean mpb = ( ManagedPropertyBean ) clazz . newInstance ( ) ; digester . push ( mpb ) ; }
private static void removeLoopSafepoint ( StructuredGraph graph ) { LoopBeginNode loopBegin = findFirstLoop ( graph ) ; loopBegin . disableSafepoint ( ) ; }
private static long spin ( long ms ) { long start = threadMXBean . getCurrentThreadCpuTime ( ) ; do { long durationMS = ( threadMXBean . getCurrentThreadCpuTime ( ) - start ) / NUM_ ; if ( durationMS >= ms ) { return durationMS ; } } while ( BOOL_ ) ; }
private void zzScanError ( int errorCode ) { String message ; try { message = ZZ_ERROR_MSG [ errorCode ] ; } catch ( ArrayIndexOutOfBoundsException e ) { message = ZZ_ERROR_MSG [ ZZ_UNKNOWN_ERROR ] ; } throw new Error ( message ) ; }
public synchronized void run ( ) { running = BOOL_ ; while ( running ) { try { Socket s = ss . accept ( ) ; acceptedConnections ++ ; if ( acceptedConnections >= acceptLimit ) { running = BOOL_ ; } new Thread ( new Worker ( s ) , STR_ ) . start ( ) ; } catch ( SocketException e ) { log ( e . getMessage ( ) ) ; running = BOOL_ ; } catch ( IOException e ) { log ( e . getMessage ( ) ) ; } } log ( STR_ + this ) ; }
public Enumeration < K > keys ( ) { return new KeyIterator ( ) ; }
protected ActionMap createActionMap ( ) { ActionMap map = super . createActionMap ( ) ; map . put ( STR_ , new EditorActions . SaveAction ( BOOL_ ) ) ; map . put ( STR_ , new EditorActions . SaveAction ( BOOL_ ) ) ; map . put ( STR_ , new EditorActions . NewAction ( ) ) ; map . put ( STR_ , new EditorActions . OpenAction ( ) ) ; map . put ( STR_ , new EditorActions . HistoryAction ( BOOL_ ) ) ; map . put ( STR_ , new EditorActions . HistoryAction ( BOOL_ ) ) ; map . put ( STR_ , mxGraphActions . getSelectVerticesAction ( ) ) ; map . put ( STR_ , mxGraphActions . getSelectEdgesAction ( ) ) ; return map ; }
@ Override public String toString ( ) { Iterator iter = keyMap . entrySet ( ) . iterator ( ) ; StringBuffer buff = new StringBuffer ( STR_ ) ; while ( iter . hasNext ( ) ) { Map . Entry entry = ( Map . Entry ) iter . next ( ) ; buff . append ( STR_ ) . append ( entry . getKey ( ) ) . append ( STR_ ) . append ( entry . getValue ( ) ) ; } return buff . toString ( ) ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
private boolean isEmpty ( String value ) { return value . length ( ) == NUM_ ; }
private boolean matchStrings ( String pattern , String str , Map < String , String > uriTemplateVariables ) { AntPathStringMatcher matcher = new AntPathStringMatcher ( pattern , str , uriTemplateVariables ) ; return matcher . matchStrings ( ) ; }
@ Transactional public < VO > VO update ( Class < VO > voType , Object inputParam , User currentUser ) throws Exception { T po = findByIdParam ( inputParam ) ; BeanUtils . copyPropertiesIgnoreNull ( inputParam , po ) ; return updateByPO ( voType , po , currentUser ) ; }
public FromMatchesFilter ( String address ) { if ( address == null ) { throw new IllegalArgumentException ( STR_ ) ; } this . address = address . toLowerCase ( ) ; matchBareJID = STR_ . equals ( StringUtils . parseResource ( address ) ) ; }
public BindOperation processSASLBind ( ByteString rawBindDN , String saslMechanism , ByteString saslCredentials , List < Control > controls ) { BindOperationBasis bindOperation = new BindOperationBasis ( this , nextOperationID ( ) , nextMessageID ( ) , controls , PROTOCOL_VERSION , rawBindDN , saslMechanism , saslCredentials ) ; bindOperation . setInternalOperation ( BOOL_ ) ; bindOperation . run ( ) ; return bindOperation ; }
static void checkParameterIsNotNull ( final String parameterName , final Object parameterValue ) { if ( parameterValue == null ) { throw new IllegalArgumentException ( parameterName + STR_ ) ; } }
public void keyReleased ( KeyEvent e ) { if ( e . getKeyCode ( ) == KeyEvent . VK_ESCAPE ) setText ( m_initialText ) ; }
protected String currentDatabaseCharset ( ) { String charsetName = systemVariables . getVariable ( STR_ ) ; if ( charsetName == null || STR_ . equalsIgnoreCase ( charsetName ) ) { charsetName = systemVariables . getVariable ( SERVER_CHARSET_NAME ) ; } return charsetName ; }
public void terminate ( int delay ) throws RemoteException { System . exit ( NUM_ ) ; }
private static void closeQuietly ( Closeable closeable ) { try { if ( closeable != null ) { closeable . close ( ) ; } } catch ( IOException e ) { Slog . w ( LOG_TAG , e ) ; } }
public void addTokenToFilterChain ( FilterChain filterChain , String key , String value ) { ReplaceTokens replaceToken = new ReplaceTokens ( ) ; ReplaceTokens . Token token = new ReplaceTokens . Token ( ) ; token . setKey ( key ) ; token . setValue ( value ) ; replaceToken . addConfiguredToken ( token ) ; filterChain . addReplaceTokens ( replaceToken ) ; }
public boolean isRelative ( ) { if ( relative == null ) { return BOOL_ ; } else { return relative ; } }
protected HashAttributeSet ( Attribute attribute , Class < ? > interfaceName ) { if ( interfaceName == null ) { throw new NullPointerException ( STR_ ) ; } myInterface = interfaceName ; add ( attribute ) ; }
public static boolean isPolygon ( OMPoly omPoly ) { double [ ] points = omPoly . getLatLonArray ( ) ; int i = points . length ; boolean isPolygon = BOOL_ ; if ( points != null && i > NUM_ ) { isPolygon = points [ NUM_ ] == points [ i - NUM_ ] && points [ NUM_ ] == points [ i - NUM_ ] ; isPolygon = isPolygon && omPoly . isPolygon ( ) ; } return isPolygon ; }
public WrappedByteBuffer slice ( ) { return WrappedByteBuffer . wrap ( _buf . slice ( ) ) ; }
public BinaryTable ( ColumnTable < ? > tabIn ) { @ SuppressWarnings ( STR_ ) ColumnTable < SaveState > tab = ( ColumnTable < SaveState > ) tabIn ; SaveState extra = tab . getExtraState ( ) ; this . columnList = new ArrayList < ColumnDesc > ( ) ; for ( ColumnDesc col : extra . columns ) { ColumnDesc copy = ( ColumnDesc ) col . clone ( ) ; copy . column = null ; this . columnList . add ( copy ) ; } try { this . table = tab . copy ( ) ; } catch ( Exception e ) { throw new IllegalStateException ( STR_ , e ) ; } this . heap = extra . heap . copy ( ) ; this . nRow = tab . getNRows ( ) ; saveExtraState ( ) ; }
public ResultVO errorResp ( Logger logger , Throwable e , ErrorType errorType , String msg ) { LogUtils . traceError ( logger , e , errorType . description ( ) ) ; return new ResultVO ( errorType . name ( ) , OperationStatus . FAILURE , msg ) ; }
public static void sort ( byte [ ] array ) { sort ( NUM_ , array . length , array ) ; }
public static String mapFullWidthLetterToHalfWidth ( String text ) { }
public static float [ ] [ ] calc ( float [ ] xpoints , float [ ] ypoints , boolean geometryClosed ) { return calc ( xpoints , ypoints , geometryClosed , NUM_ ) ; }
public String toString ( ) { return STR_ + digest . toString ( ) ; }
public void removeInfoDisplayListener ( InfoDisplayListener aInfoDisplayListener ) { IDListeners . remove ( aInfoDisplayListener ) ; }
private static void slice ( ) throws Exception { doSlice ( Character . MAX_VALUE ) ; report ( STR_ ) ; doSlice ( Character . MAX_CODE_POINT ) ; report ( STR_ ) ; }
public SelectiveAccessHandler ( String XMLFile ) { loadConfig ( XMLFile ) ; }
public JsonArray add ( Object value ) { list . add ( value ) ; return this ; }
public static BiosCommandResult createPendingResult ( ) { BiosCommandResult result = new BiosCommandResult ( ) ; result . pending ( ) ; return result ; }
public PlanRouter ( final TripRouter routingHandler , final ActivityFacilities facilities ) { this . routingHandler = routingHandler ; this . facilities = facilities ; }
protected String cleanUpName ( String name ) { return name . replace ( STR_ , STR_ ) . trim ( ) ; }
private void clientServerTombstoneGCTest ( String uniqueName , boolean replicatedRegion ) { Host host = Host . getHost ( NUM_ ) ; VM vm0 = host . getVM ( NUM_ ) ; VM vm1 = host . getVM ( NUM_ ) ; VM vm2 = host . getVM ( NUM_ ) ; VM vm3 = host . getVM ( NUM_ ) ; final String name = uniqueName + STR_ ; createServerRegion ( vm0 , name , replicatedRegion ) ; int port = createServerRegion ( vm1 , name , replicatedRegion ) ; createClientRegion ( vm2 , name , port , BOOL_ , ClientRegionShortcut . CACHING_PROXY ) ; createClientRegion ( vm3 , name , port , BOOL_ , ClientRegionShortcut . CACHING_PROXY ) ; createEntries ( vm2 ) ; destroyEntries ( vm3 ) ; unregisterInterest ( vm3 ) ; forceGC ( vm0 ) ; if ( ! replicatedRegion ) { forceGC ( vm1 ) ; } checkClientReceivedGC ( vm2 ) ; checkClientDoesNotReceiveGC ( vm3 ) ; }
protected void startVoiceCall ( ) { if ( ! EMClient . getInstance ( ) . isConnected ( ) ) { Toast . makeText ( getActivity ( ) , R . string . not_connect_to_server , Toast . LENGTH_SHORT ) . show ( ) ; } else { startActivity ( new Intent ( getActivity ( ) , VoiceCallActivity . class ) . putExtra ( STR_ , toChatUsername ) . putExtra ( STR_ , BOOL_ ) ) ; inputMenu . hideExtendMenuContainer ( ) ; } }
public static Ed25519GroupElement doubleScalarMultiplyGroupElements ( final Ed25519GroupElement g1 , final Ed25519FieldElement f1 , final Ed25519GroupElement g2 , final Ed25519FieldElement f2 ) { final Ed25519GroupElement h1 = scalarMultiplyGroupElement ( g1 , f1 ) ; final Ed25519GroupElement h2 = scalarMultiplyGroupElement ( g2 , f2 ) ; return addGroupElements ( h1 , h2 . negate ( ) ) ; }
@ Override protected String updateJavadoc ( String content ) throws Exception { String result ; int i ; result = content ; for ( i = NUM_ ; i < m_Javadocs . size ( ) ; i ++ ) { result = m_Javadocs . get ( i ) . updateJavadoc ( result ) ; } return result ; }
private void assertSameURI ( final TermNode context , final TermNode innerContext ) { if ( ! context . getValue ( ) . equals ( innerContext . getValue ( ) ) ) { throw new InvalidGraphContextException ( STR_ + context + STR_ + innerContext . getValue ( ) ) ; } }
public void push ( final double value ) { long bits = Double . doubleToLongBits ( value ) ; if ( bits == NUM_ || bits == NUM_ ) { mv . visitInsn ( Opcodes . DCONST_0 + ( int ) value ) ; } else { mv . visitLdcInsn ( value ) ; } }
public boolean isSourceEmpty ( ) { return getResult . isSourceEmpty ( ) ; }
public AppLauncher secondsBetweenLaunchOnLockedRetries ( int secondsBetweenLaunchOnLockedRetries ) { this . secondsBetweenLaunchOnLockedRetries = secondsBetweenLaunchOnLockedRetries ; return this ; }
public static MainResult run ( AbstractCli cli , String ... args ) { final ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; final MemoryPrintStream err = new MemoryPrintStream ( ) ; GlobalFlags . resetAccessedStatus ( ) ; CommandLine . setCommandArgs ( Utils . append ( new String [ ] { cli . moduleName ( ) } , args ) ) ; final int rc = cli . mainInit ( args , out , err . printStream ( ) ) ; CommandLine . clearCommandArgs ( ) ; return new MainResult ( rc , out . toString ( ) , err . toString ( ) ) ; }
@ Override public JSONObject toJSONObject ( ) throws JSONException { JSONObject jo = new JSONObject ( ) ; toJSONObject ( jo ) ; jo . put ( STR_ , pConditionName ) ; if ( eCondition != null ) { JSONObject subjo = new JSONObject ( ) ; subjo . put ( STR_ , eCondition . getClass ( ) . getName ( ) ) ; subjo . put ( STR_ , eCondition . getState ( ) ) ; jo . put ( STR_ , subjo ) ; } return jo ; }
public double yield ( final double cleanPrice , final DayCounter dc , final Compounding comp , final Frequency freq , Date settlementDate , final double accuracy , final int maxEvaluations ) { if ( settlementDate . isNull ( ) ) { settlementDate = settlementDate ( ) ; } final Brent solver = new Brent ( ) ; solver . setMaxEvaluations ( maxEvaluations ) ; final double dirtyPrice = cleanPrice + accruedAmount ( settlementDate ) ; final YieldFinder objective = new YieldFinder ( notional ( settlementDate ) , this . cashflows_ , dirtyPrice , dc , comp , freq , settlementDate ) ; return solver . solve ( objective , accuracy , NUM_ , NUM_ , NUM_ ) ; }
protected Token createInternalUseOnlyToken ( ) { return new DefaultToken ( ) ; }
public static void unregister ( ProcessEngine processEngine ) { processEngines . remove ( processEngine . getName ( ) ) ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public FactoryConfigurationError ( Exception e , String msg ) { super ( msg ) ; this . exception = e ; }
public static double square ( double num ) { return num * num ; }
public void deleteEpisode ( TvShowEpisode episode ) { if ( episodes . contains ( episode ) ) { int oldValue = episodes . size ( ) ; episode . deleteFilesSafely ( ) ; episodes . remove ( episode ) ; episode . removePropertyChangeListener ( propertyChangeListener ) ; removeFromSeason ( episode ) ; TvShowList . getInstance ( ) . removeEpisodeFromDb ( episode ) ; saveToDb ( ) ; firePropertyChange ( REMOVED_EPISODE , null , episode ) ; firePropertyChange ( EPISODE_COUNT , oldValue , episodes . size ( ) ) ; } }
public void paintArrowButtonBackground ( SynthContext context , Graphics g , int x , int y , int w , int h ) { if ( context . getComponent ( ) . getComponentOrientation ( ) . isLeftToRight ( ) ) { paintBackground ( context , g , x , y , w , h , null ) ; } else { AffineTransform transform = new AffineTransform ( ) ; transform . translate ( x , y ) ; transform . scale ( - NUM_ , NUM_ ) ; transform . translate ( - w , NUM_ ) ; paintBackground ( context , g , NUM_ , NUM_ , w , h , transform ) ; } }
public com . sun . identity . liberty . ws . meta . jaxb . OrganizationNameType createOrganizationNameType ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . meta . jaxb . impl . OrganizationNameTypeImpl ( ) ; }
public static void updateIcon ( ) { Main . triggerMenuInvalidationStatic ( ) ; }
public void printStackTrace ( PrintStream out ) { synchronized ( out ) { PrintWriter pw = new PrintWriter ( out , BOOL_ ) ; printStackTrace ( pw ) ; pw . flush ( ) ; } }
private int F ( int x ) { int a , b , c , d ; d = x & NUM_ ; x >>= NUM_ ; c = x & NUM_ ; x >>= NUM_ ; b = x & NUM_ ; x >>= NUM_ ; a = x & NUM_ ; int y = sBoxes [ NUM_ ] [ a ] + sBoxes [ NUM_ ] [ b ] ; y ^= sBoxes [ NUM_ ] [ c ] ; y += sBoxes [ NUM_ ] [ d ] ; return y ; }
public UpdateInventoryOutput replyOk ( ) { UpdateInventoryOutput ok = new UpdateInventoryOutput ( ) ; ok . setCode ( STR_ ) ; return ok ; }
@ DSComment ( STR_ ) @ DSSafe ( DSCat . SAFE_LIST ) @ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) protected boolean lineStart ( TextView widget , Spannable buffer ) { return BOOL_ ; }
public DoubleVector ( int len ) { this . len = len ; vect = new double [ len ] ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public void add ( final TxState txState ) { if ( txState == null ) throw new IllegalArgumentException ( ) ; if ( txState . tx == NUM_ ) throw new IllegalArgumentException ( ) ; if ( txState . getReadsOnCommitTime ( ) < NUM_ ) throw new IllegalArgumentException ( ) ; final TupleSerializer tupleSer = ( TupleSerializer ) getIndexMetadata ( ) . getTupleSerializer ( ) ; final byte [ ] key = tupleSer . serializeKey ( txState ) ; if ( super . contains ( key ) ) { throw new IllegalArgumentException ( STR_ + key + STR_ + txState ) ; } final byte [ ] val = tupleSer . serializeVal ( txState ) ; super . insert ( key , val ) ; }
public static Text valueOf ( int i ) { TextBuilder tb = new TextBuilder ( ) ; return tb . append ( i ) . toText ( ) ; }
public ExtractLocalDescriptor ( String project , String description , String comment , Map arguments , int flags ) { super ( IJavaRefactorings . EXTRACT_LOCAL_VARIABLE , project , description , comment , arguments , flags ) ; }
private PostgreSQLNodeFunctions ( ) { }
@ Deprecated static public XpaTrafficController instance ( ) { log . error ( STR_ ) ; return null ; }
public void initialize ( Body b1 , Body b2 , Vec2 ga1 , Vec2 ga2 , Vec2 anchor1 , Vec2 anchor2 , float r ) { bodyA = b1 ; bodyB = b2 ; groundAnchorA = ga1 ; groundAnchorB = ga2 ; localAnchorA = bodyA . getLocalPoint ( anchor1 ) ; localAnchorB = bodyB . getLocalPoint ( anchor2 ) ; Vec2 d1 = anchor1 . sub ( ga1 ) ; lengthA = d1 . length ( ) ; Vec2 d2 = anchor2 . sub ( ga2 ) ; lengthB = d2 . length ( ) ; ratio = r ; assert ( ratio > Settings . EPSILON ) ; }
public ImageSource tilingEnabled ( ) { return tiling ( BOOL_ ) ; }
public static LookupLocator [ ] buildLookupLocators ( String lookupLocatorURLs ) { String locatorURL = null ; ArrayList < LookupLocator > locatorList = new ArrayList < LookupLocator > ( ) ; if ( lookupLocatorURLs != null && lookupLocatorURLs . length ( ) > NUM_ ) { StringTokenizer st = new StringTokenizer ( lookupLocatorURLs , STR_ ) ; while ( st . hasMoreTokens ( ) ) { try { locatorURL = st . nextToken ( ) . trim ( ) ; if ( locatorURL . isEmpty ( ) || locatorURL . equals ( STR_ ) ) continue ; if ( ! locatorURL . startsWith ( STR_ ) ) locatorURL = STR_ + locatorURL ; LookupLocator lookupLocator = new LookupLocator ( locatorURL ) ; locatorList . add ( lookupLocator ) ; } catch ( MalformedURLException ex ) { if ( _logger . isLoggable ( Level . WARNING ) ) { _logger . log ( Level . WARNING , STR_ + locatorURL + STR_ + ex . toString ( ) , ex ) ; } } } } return locatorList . toArray ( new LookupLocator [ locatorList . size ( ) ] ) ; }
public static < T > T [ ] copyFrom ( T [ ] array , int newLength ) { T [ ] copy = createWithSameComponentType ( newLength , array ) ; System . arraycopy ( array , NUM_ , copy , NUM_ , Math . min ( array . length , newLength ) ) ; return copy ; }
public RemoteServletResponse ( ) { }
@ Override public Iterator < E > iterator ( ) { return new TObjectHashIterator < E > ( this ) ; }
protected void illegalMessageReceived ( OFMessage m ) { String msg = getSwitchStateMessage ( m , STR_ ) ; throw new SwitchStateException ( msg ) ; }
public BufferedHeader ( final CharArrayBuffer buffer ) throws ParseException { super ( ) ; if ( buffer == null ) { throw new IllegalArgumentException ( STR_ ) ; } int colon = buffer . indexOf ( STR_ ) ; if ( colon == - NUM_ ) { throw new ParseException ( STR_ + buffer . toString ( ) ) ; } String s = buffer . substringTrimmed ( NUM_ , colon ) ; if ( s . length ( ) == NUM_ ) { throw new ParseException ( STR_ + buffer . toString ( ) ) ; } this . buffer = buffer ; this . name = s ; this . valuePos = colon + NUM_ ; }
public static _Fields findByName ( String name ) { return byName . get ( name ) ; }
private String buildKey ( String accountName , String remotePath ) { return accountName + remotePath ; }
public static void main ( String [ ] args ) throws TestFailed , ClassNotFoundException { testFailLoadAndGc ( ) ; }
public boolean remove ( Object o ) { return map . remove ( o ) == PRESENT ; }
public int optInt ( String key , int defaultValue ) { try { return getInt ( key ) ; } catch ( Exception e ) { return defaultValue ; } }
public static void staticSetRandomEngine ( RandomEngine randomGenerator ) { synchronized ( shared ) { shared . setRandomGenerator ( randomGenerator ) ; } }
private Shard updateShardCatalog ( String eventShard , String shardService ) throws ReplicatorException { if ( logger . isDebugEnabled ( ) ) logger . debug ( STR_ + eventShard + STR_ + shardService ) ; ShardManager manager = new ShardManager ( service , url , user , password , schemaName , tableType , context ) ; List < Map < String , String > > params = new ArrayList < Map < String , String > > ( ) ; Map < String , String > newShard = new HashMap < String , String > ( ) ; newShard . put ( ShardTable . SHARD_ID_COL , eventShard ) ; newShard . put ( ShardTable . SHARD_MASTER_COL , shardService ) ; params . add ( newShard ) ; try { manager . insert ( params ) ; shards . put ( eventShard , new Shard ( newShard ) ) ; } catch ( SQLException e ) { throw new ReplicatorException ( e ) ; } return shards . get ( eventShard ) ; }
public int byteSize ( ) { return this . data . length ; }
public CharStreamConsumer ( InputStream stream , String charset ) throws UnsupportedEncodingException { this ( new InputStreamReader ( new BufferedInputStream ( stream ) , charset ) ) ; }
private void processCmapTable ( Font font ) { CmapTable cmap = font . getCmapTable ( ) ; if ( cmap != null ) { if ( forceAscii ) { cmapFmt = cmap . getCmapFormat ( Table . platformMacintosh , Table . encodingRoman ) ; platformID = PLATFORM_MACINTOSH ; encodingID = ENCODING_ROMAN ; } else { cmapFmt = cmap . getCmapFormat ( Table . platformMicrosoft , Table . encodingUGL ) ; if ( cmapFmt == null ) { cmapFmt = cmap . getCmapFormat ( Table . platformMicrosoft , Table . encodingUndefined ) ; platformID = PLATFORM_MICROSOFT ; encodingID = ENCODING_UNDEFINED ; } else { platformID = PLATFORM_MICROSOFT ; encodingID = ENCODING_UGL ; } } } if ( cmapFmt == null ) { throw new RuntimeException ( STR_ ) ; } }
public static boolean isValidGenre ( String genreId ) { try { short genreVal = Short . parseShort ( genreId ) ; if ( ( genreVal - NUM_ ) <= GenreTypes . getMaxStandardGenreId ( ) ) { return BOOL_ ; } } catch ( NumberFormatException nfe ) { } Integer id3GenreId = GenreTypes . getInstanceOf ( ) . getIdForValue ( genreId ) ; if ( id3GenreId != null ) { if ( id3GenreId <= GenreTypes . getMaxStandardGenreId ( ) ) { return BOOL_ ; } } return BOOL_ ; }
public Script in ( scala . collection . Seq < Object > inputs ) { List < Object > list = JavaConversions . seqAsJavaList ( inputs ) ; for ( Object obj : list ) { if ( obj instanceof Tuple3 ) { @ SuppressWarnings ( STR_ ) Tuple3 < String , Object , MatrixMetadata > t3 = ( Tuple3 < String , Object , MatrixMetadata > ) obj ; in ( t3 . _1 ( ) , t3 . _2 ( ) , t3 . _3 ( ) ) ; } else if ( obj instanceof Tuple2 ) { @ SuppressWarnings ( STR_ ) Tuple2 < String , Object > t2 = ( Tuple2 < String , Object > ) obj ; in ( t2 . _1 ( ) , t2 . _2 ( ) ) ; } else { throw new MLContextException ( STR_ ) ; } } return this ; }
public static void prepareDB ( ) throws Exception { System . setProperty ( SystemProperties . DATABASE_PROPERTIES , STR_ ) ; prepareDB ( BOOL_ ) ; }
public static ObjectInputStream newObjectInputStream ( InputStream inputStream ) throws IOException { return new ObjectInputStream ( inputStream ) ; }
public void removeConditioningVariable ( String variable ) { Node node = dataSet . getVariable ( variable ) ; if ( node == target ) throw new IllegalArgumentException ( STR_ ) ; if ( ! ( continuousIntervals . containsKey ( node ) || discreteValues . containsKey ( node ) ) ) { throw new IllegalArgumentException ( STR_ + variable ) ; } continuousIntervals . remove ( node ) ; discreteValues . remove ( node ) ; }
private void resumeDocumentListenerNotification ( ) { if ( fDeferredDocumentEvent != null ) { DocumentEvent event = fDeferredDocumentEvent ; fDeferredDocumentEvent = null ; doFireDocumentChanged ( event ) ; } }
public void copyFrom ( Message o ) { this . flags = o . flags & ~ FLAGS_TO_CLEAR_ON_COPY_FROM ; this . what = o . what ; this . arg1 = o . arg1 ; this . arg2 = o . arg2 ; this . obj = o . obj ; this . replyTo = o . replyTo ; if ( o . data != null ) { this . data = ( Bundle ) o . data . clone ( ) ; } else { this . data = null ; } }
public void remove ( Object key ) { if ( arrayTable != null ) { arrayTable . remove ( key ) ; } }
public boolean isFillPoints ( ) { return mFillPoints ; }
public Schedule ( Element e ) { org . jdom2 . Attribute a ; if ( ( a = e . getAttribute ( Xml . ID ) ) != null ) { _id = a . getValue ( ) ; } else { log . warn ( STR_ ) ; } if ( ( a = e . getAttribute ( Xml . NAME ) ) != null ) { _name = a . getValue ( ) ; } if ( ( a = e . getAttribute ( Xml . COMMENT ) ) != null ) { _comment = a . getValue ( ) ; } if ( e . getChildren ( Xml . ITEM ) != null ) { @ SuppressWarnings ( STR_ ) List < Element > eScheduleItems = e . getChildren ( Xml . ITEM ) ; log . debug ( STR_ , getName ( ) , eScheduleItems . size ( ) ) ; for ( Element eScheduleItem : eScheduleItems ) { register ( new ScheduleItem ( eScheduleItem ) ) ; } } }
public JTicket ( BasicTicket t , int columns ) { basict = t ; desktophints = ( Map ) Toolkit . getDefaultToolkit ( ) . getDesktopProperty ( STR_ ) ; this . columns = columns ; this . linewidth = columns * NUM_ ; initComponents ( ) ; }
public void typeCheck ( ) { TypeDecl type = getExpr ( ) . type ( ) ; if ( ( ! type . isIntegralType ( ) || type . isLong ( ) ) && ! type . isEnumDecl ( ) && ! type . isString ( ) ) error ( STR_ + STR_ ) ; }
@ SuppressWarnings ( STR_ ) public static < K extends Comparable < ? super K > , V > ImmutableSortedMap < K , V > of ( K k1 , V v1 , K k2 , V v2 ) { return ofEntries ( entryOf ( k1 , v1 ) , entryOf ( k2 , v2 ) ) ; }
@ Override boolean isDecoderSelected ( ) { return ! mDecoderList . isSelectionEmpty ( ) ; }
public static FontProgram createType1Font ( byte [ ] afm , byte [ ] pfb , boolean cached ) throws java . io . IOException { return createType1Font ( null , null , afm , pfb , cached ) ; }
private void processNonOptionToken ( String value , boolean stopAtNonOption ) { if ( stopAtNonOption && ( currentOption == null || ! currentOption . hasArg ( ) ) ) { eatTheRest = BOOL_ ; tokens . add ( STR_ ) ; } tokens . add ( value ) ; currentOption = null ; }
public static String toDecimal ( Object value , String defaultValue ) { double res = toDoubleValue ( value , BOOL_ , Double . NaN ) ; if ( Double . isNaN ( res ) ) return defaultValue ; return toDecimal ( res ) ; }
public static QueryLanguage valueOf ( String qlName ) { for ( QueryLanguage ql : QUERY_LANGUAGES ) { if ( ql . getName ( ) . equalsIgnoreCase ( qlName ) ) { return ql ; } } return null ; }
@ Override public boolean equals ( Object o ) { if ( this == o ) { return BOOL_ ; } if ( o == null ) { return BOOL_ ; } if ( ! ( o instanceof Entry ) ) { return BOOL_ ; } Entry e = ( Entry ) o ; return dn . equals ( e . dn ) && objectClasses . keySet ( ) . equals ( e . objectClasses . keySet ( ) ) && equals ( userAttributes , e . userAttributes ) && equals ( operationalAttributes , e . operationalAttributes ) ; }
public SavingsAccount ( int id , double balance ) { super ( id , balance ) ; }
@ Override public int rule ( int goalNT ) { return delegate . rule ( goalNT ) ; }
public final void incrementBucketDocCount ( long bucketOrd , int inc ) { docCounts = bigArrays . grow ( docCounts , bucketOrd + NUM_ ) ; docCounts . increment ( bucketOrd , inc ) ; }
protected void closeApplicationContext ( ) { if ( applicationContext != null ) { if ( logger . isDebugEnabled ( ) ) { logger . debug ( STR_ + location + STR_ ) ; } try { applicationContext . setParent ( null ) ; applicationContext . close ( ) ; } finally { applicationContext = null ; } } }
public java . lang . StringBuffer deleteCharAt ( int index ) { internal . deleteCharAt ( index ) ; return this ; }
@ Override public String globalInfo ( ) { return STR_ + STR_ + getTechnicalInformation ( ) . toString ( ) ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) private void enqueueDiskWrite ( final MemoryCommitResult mcr , final Runnable postWriteRunnable ) { }
public void hideToolbar ( ) { if ( mFindToolbar == null ) return ; mFindToolbar . deactivate ( ) ; }
public void dispose ( StepMetaInterface smi , StepDataInterface sdi ) { meta = ( CarbonSliceMergerStepMeta ) smi ; data = ( CarbonSliceMergerStepData ) sdi ; super . dispose ( smi , sdi ) ; }
public void clear ( ) { oredCriteria . clear ( ) ; orderByClause = null ; distinct = BOOL_ ; }
public void removeEventListener ( ImageSharingListener listener ) throws RcsServiceNotAvailableException , RcsGenericException { if ( mApi == null ) { throw new RcsServiceNotAvailableException ( ) ; } try { WeakReference < IImageSharingListener > weakRef = mImageSharingListeners . remove ( listener ) ; if ( weakRef == null ) { return ; } IImageSharingListener rcsListener = weakRef . get ( ) ; if ( rcsListener != null ) { mApi . removeEventListener2 ( rcsListener ) ; } } catch ( Exception e ) { RcsIllegalArgumentException . assertException ( e ) ; throw new RcsGenericException ( e ) ; } }
public static DoubleMatrix2D div ( DoubleMatrix2D A , double s ) { return A . assign ( F . div ( s ) ) ; }
private static int leftmostOuterCurlyContainingSlash ( String filePattern , int offset ) throws IOException { int curlyOpen = NUM_ ; int leftmost = - NUM_ ; boolean seenSlash = BOOL_ ; for ( int i = offset ; i < filePattern . length ( ) ; i ++ ) { char c = filePattern . charAt ( i ) ; if ( c == STR_ ) { i ++ ; if ( i >= filePattern . length ( ) ) { throw new IOException ( STR_ + STR_ + filePattern + STR_ + i ) ; } } else if ( c == STR_ ) { if ( curlyOpen ++ == NUM_ ) { leftmost = i ; } } else if ( c == STR_ && curlyOpen > NUM_ ) { if ( -- curlyOpen == NUM_ && leftmost != - NUM_ && seenSlash ) { return leftmost ; } } else if ( c == STR_ && curlyOpen > NUM_ ) { seenSlash = BOOL_ ; } } return - NUM_ ; }
private PluginCommand createNewBukkitCommand ( cn . nukkit . command . PluginCommand < ? > nukkitCommand ) { Plugin bukkitPlugin = PokkitPlugin . toBukkit ( nukkitCommand . getPlugin ( ) ) ; try { Constructor < PluginCommand > constructor = PluginCommand . class . getDeclaredConstructor ( String . class , Plugin . class ) ; constructor . setAccessible ( BOOL_ ) ; PluginCommand bukkitCommand = constructor . newInstance ( nukkitCommand . getName ( ) , bukkitPlugin ) ; bukkitCommand . setAliases ( Arrays . asList ( nukkitCommand . getAliases ( ) ) ) ; bukkitCommand . setDescription ( nukkitCommand . getDescription ( ) ) ; bukkitCommand . setLabel ( nukkitCommand . getLabel ( ) ) ; bukkitCommand . setPermission ( nukkitCommand . getPermission ( ) ) ; bukkitCommand . setPermissionMessage ( nukkitCommand . getPermissionMessage ( ) ) ; bukkitCommand . setUsage ( nukkitCommand . getUsage ( ) ) ; return bukkitCommand ; } catch ( ReflectiveOperationException e ) { throw new RuntimeException ( e ) ; } }
public ImmutableList < DynamicMessage > read ( ) { ImmutableList . Builder < DynamicMessage > resultBuilder = ImmutableList . builder ( ) ; try { String line ; boolean wasLastLineEmpty = BOOL_ ; while ( BOOL_ ) { line = bufferedReader . readLine ( ) ; if ( Strings . isNullOrEmpty ( line ) ) { if ( wasLastLineEmpty ) { return resultBuilder . build ( ) ; } wasLastLineEmpty = BOOL_ ; continue ; } else { wasLastLineEmpty = BOOL_ ; } StringBuilder stringBuilder = new StringBuilder ( ) ; while ( ! Strings . isNullOrEmpty ( line ) ) { stringBuilder . append ( line ) ; line = bufferedReader . readLine ( ) ; } wasLastLineEmpty = BOOL_ ; DynamicMessage . Builder nextMessage = DynamicMessage . newBuilder ( descriptor ) ; jsonParser . merge ( stringBuilder . toString ( ) , nextMessage ) ; resultBuilder . add ( nextMessage . build ( ) ) ; } } catch ( Exception e ) { throw new IllegalArgumentException ( STR_ + source , e ) ; } }
public int readULongAsInt ( ) throws IOException { long ulong = this . readULong ( ) ; if ( ( ulong & NUM_ ) == NUM_ ) { throw new ArithmeticException ( STR_ ) ; } return ( ( int ) ulong ) & ~ NUM_ ; }
public void update ( Graphics a , JComponent b ) { for ( int i = NUM_ ; i < uis . size ( ) ; i ++ ) { ( ( ComponentUI ) ( uis . elementAt ( i ) ) ) . update ( a , b ) ; } }
protected DefaultPointsHandler ( ) { }
public static void createEmptyFile ( File file , long length ) throws IOException { if ( file == null || length <= NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } try ( FileOutputStream fOut = new FileOutputStream ( file ) ; FileChannel fChannel = fOut . getChannel ( ) ) { fChannel . write ( ByteBuffer . allocate ( NUM_ ) , length - NUM_ ) ; } }
public void createRemoteFolder ( ISVNRemoteFolder parent , String folderName , String message , IProgressMonitor monitor ) throws SVNException { parent . createRemoteFolder ( folderName , message , monitor ) ; }
static void checkNotSupported ( String [ ] supportedSuites ) { for ( String suites : supportedSuites ) { if ( KERBEROS_CIPHER_SUITES . contains ( suites ) ) { throw new RuntimeException ( STR_ + STR_ ) ; } } }
public VisibleWhitespaceToken ( ) { super ( ) ; dotRect = new Rectangle2D . Float ( NUM_ , NUM_ , NUM_ , NUM_ ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public boolean evaluate ( Context context , Writer out , String logTag , String instring ) throws ParseErrorException , MethodInvocationException , ResourceNotFoundException , IOException { return evaluate ( context , out , logTag , new BufferedReader ( new StringReader ( instring ) ) ) ; }
public String runTrain ( Warrant w ) { String msg = null ; if ( w . getRunMode ( ) != Warrant . MODE_NONE ) { msg = w . getRunModeMessage ( ) ; setStatusText ( msg , Color . red , BOOL_ ) ; return msg ; } msg = w . setRoute ( NUM_ , null ) ; setStatusText ( msg , WarrantTableModel . myGold , BOOL_ ) ; if ( msg != null ) { setStatusText ( msg , Color . red , BOOL_ ) ; return msg ; } msg = w . setRunMode ( Warrant . MODE_RUN , null , null , null , w . getRunBlind ( ) ) ; if ( msg != null ) { setStatusText ( msg , Color . red , BOOL_ ) ; return msg ; } msg = w . checkStartBlock ( Warrant . MODE_RUN ) ; setStatusText ( msg , WarrantTableModel . myGold , BOOL_ ) ; msg = w . checkRoute ( ) ; if ( msg != null ) { setStatusText ( msg , WarrantTableModel . myGreen , BOOL_ ) ; } return null ; }
private static PorterDuffColorFilter updateTintFilter ( ColorStateList tint , PorterDuff . Mode tintMode , int [ ] drawableState ) { if ( tint == null || tintMode == null ) { return null ; } final int color = tint . getColorForState ( drawableState , Color . TRANSPARENT ) ; PorterDuffColorFilter filter = COLOR_FILTER_CACHE . get ( color , tintMode ) ; if ( filter == null ) { filter = new PorterDuffColorFilter ( color , tintMode ) ; COLOR_FILTER_CACHE . put ( color , tintMode , filter ) ; } return filter ; }
public boolean close ( boolean done ) { close ( ) ; if ( thematicIndex != null ) { try { thematicIndex . close ( ) ; } catch ( FormatException fe ) { } } return BOOL_ ; }
@ DSComment ( STR_ ) @ DSBan ( DSCat . DEFAULT_MODIFIER ) @ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) void clearDisconnected ( ) { for ( int i = connections . size ( ) - NUM_ ; i >= NUM_ ; i -- ) { CdmaConnection cn = ( CdmaConnection ) connections . get ( i ) ; if ( cn . getState ( ) == State . DISCONNECTED ) { connections . remove ( i ) ; } } if ( connections . size ( ) == NUM_ ) { state = State . IDLE ; } }
public void writeAttribute ( String localName , String value ) throws XMLStreamException { if ( _currentEle . getState ( ) != ELEMENT_STARTTAG_OPEN ) { throw new XMLStreamException ( STR_ ) ; } _writer . write ( SPACE ) ; _writer . write ( localName ) ; _writer . write ( STR_ ) ; writeXMLContent ( value , BOOL_ , BOOL_ ) ; _writer . write ( DOUBLEQUOT ) ; }
public @ Nullable ImageCursor fetch ( ) { return fetch ( SortOrder . UNSPECIFIED ) ; }
public void addIssue ( int reason , EObject obj , int featureId , String detail ) { issues . add ( new TransformationIssue ( reason , obj , featureId , detail ) ) ; }
public void create ( View view ) { DomainConfig instance = new DomainConfig ( ) ; saveProperties ( instance ) ; Spinner spin = ( Spinner ) findViewById ( R . id . creationModeSpin ) ; instance . creationMode = ( String ) spin . getSelectedItem ( ) ; HttpAction action = new HttpCreateAction ( this , instance ) ; action . execute ( ) ; }
public TabbedPaneTabPainter ( Which state ) { super ( ) ; this . ctx = new PaintContext ( CacheMode . FIXED_SIZES ) ; switch ( state ) { case BACKGROUND_SELECTED_FOCUSED : case BACKGROUND_PRESSED_SELECTED_FOCUSED : focused = BOOL_ ; break ; default : focused = BOOL_ ; break ; } type = getButtonType ( state ) ; }
private int measureShort ( int measureSpec ) { int result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) ( NUM_ * mRadius + getPaddingTop ( ) + getPaddingBottom ( ) + NUM_ ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
public NodeLoader ( ) { this ( null ) ; }
protected void recomputeMeans ( ) { int length = features . get ( NUM_ ) . length ; Cluster cluster ; double [ ] mean ; for ( int i = NUM_ ; i < clusters . length ; i ++ ) { cluster = clusters [ i ] ; if ( cluster . getSize ( ) == NUM_ ) { System . err . println ( STR_ + i ) ; } else if ( cluster . getSize ( ) < NUM_ ) { System . err . println ( STR_ + i ) ; int index = ( int ) Math . floor ( Math . random ( ) * features . size ( ) ) ; clusters [ i ] . assignMember ( features . get ( index ) ) ; } cluster . move ( ) ; } }
public static int fieldIdLength ( short flags ) { return isCompactFooter ( flags ) ? NUM_ : FIELD_ID_LEN ; }
public final void blinkCaret ( ) { if ( caretBlinks ) { blink = ! blink ; painter . invalidateSelectedLines ( ) ; } else blink = BOOL_ ; }
public synchronized void deleteData ( ) { if ( server == null ) { try { IoUtil . delete ( this . logsDir ) ; } catch ( IOException e ) { LOGGER . error ( STR_ , this . logsDir , e ) ; } } }
public void unlockUserInput ( ) { commandManager . setEnableCritical ( BOOL_ ) ; locked = BOOL_ ; }
public void removeBackup ( String backupID ) throws ConfigException { if ( ! backups . containsKey ( backupID ) ) { throw new ConfigException ( ERR_BACKUPDIRECTORY_NO_SUCH_BACKUP . get ( backupID , path ) ) ; } for ( BackupInfo backup : backups . values ( ) ) { if ( backup . dependsOn ( backupID ) ) { throw new ConfigException ( ERR_BACKUPDIRECTORY_UNRESOLVED_DEPENDENCY . get ( backupID , path , backup . getBackupID ( ) ) ) ; } } backups . remove ( backupID ) ; }
public void registerSensor ( Sensor s , int i ) { if ( ( i < NUM_ ) || ( i >= mNumInputBits ) ) { log . error ( STR_ + Integer . toString ( i + NUM_ ) ) ; return ; } if ( sensorArray [ i ] == null ) { sensorArray [ i ] = s ; if ( lastUsedSensor < i ) { lastUsedSensor = i ; } sensorLastSetting [ i ] = Sensor . UNKNOWN ; sensorTempSetting [ i ] = Sensor . UNKNOWN ; sensorORedSetting [ i ] = BOOL_ ; } else { log . warn ( STR_ + Integer . toString ( i + NUM_ ) ) ; } }
public PixelInterleavedSampleModel ( int dataType , int w , int h , int pixelStride , int scanlineStride , int bandOffsets [ ] ) { super ( dataType , w , h , pixelStride , scanlineStride , bandOffsets ) ; int minBandOff = this . bandOffsets [ NUM_ ] ; int maxBandOff = this . bandOffsets [ NUM_ ] ; for ( int i = NUM_ ; i < this . bandOffsets . length ; i ++ ) { minBandOff = Math . min ( minBandOff , this . bandOffsets [ i ] ) ; maxBandOff = Math . max ( maxBandOff , this . bandOffsets [ i ] ) ; } maxBandOff -= minBandOff ; if ( maxBandOff > scanlineStride ) { throw new IllegalArgumentException ( STR_ + STR_ + STR_ ) ; } if ( pixelStride * w > scanlineStride ) { throw new IllegalArgumentException ( STR_ + STR_ + STR_ + STR_ ) ; } if ( pixelStride < maxBandOff ) { throw new IllegalArgumentException ( STR_ + STR_ + STR_ ) ; } }
public void output ( List list , OutputStream out ) throws IOException { Writer writer = makeWriter ( out ) ; output ( list , writer ) ; }
public void reset ( ) { super . reset ( ) ; H0 = NUM_ ; H1 = NUM_ ; H2 = NUM_ ; H3 = NUM_ ; H4 = NUM_ ; H5 = NUM_ ; H6 = NUM_ ; H7 = NUM_ ; xOff = NUM_ ; for ( int i = NUM_ ; i != X . length ; i ++ ) { X [ i ] = NUM_ ; } }
public com . sun . identity . liberty . ws . common . jaxb . secext . UsernameTokenElement createUsernameTokenElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . secext . impl . UsernameTokenElementImpl ( ) ; }
public EaseOut ( ) { }
public Builder addColumnTime ( String columnName , TimeZone timeZone ) { return addColumnTime ( columnName , DateTimeZone . forTimeZone ( timeZone ) ) ; }
public Rfci ( IndependenceTest independenceTest , List < Node > searchVars ) { if ( independenceTest == null || knowledge == null ) { throw new NullPointerException ( ) ; } this . independenceTest = independenceTest ; this . variables . addAll ( independenceTest . getVariables ( ) ) ; Set < Node > remVars = new HashSet < > ( ) ; for ( Node node1 : this . variables ) { boolean search = BOOL_ ; for ( Node node2 : searchVars ) { if ( node1 . getName ( ) . equals ( node2 . getName ( ) ) ) { search = BOOL_ ; } } if ( ! search ) { remVars . add ( node1 ) ; } } this . variables . removeAll ( remVars ) ; }
public static void UTF8toUTF16 ( byte [ ] utf8 , int offset , int len , CharArr out ) { out . reserve ( len ) ; int n = UTF8toUTF16 ( utf8 , offset , len , out . getArray ( ) , out . getEnd ( ) ) ; out . setEnd ( out . getEnd ( ) + n ) ; }
public comment addElement ( String hashcode , Element element ) { addElementToRegistry ( hashcode , element ) ; return ( this ) ; }
private static void storeTestMethodName ( String name ) { System . setProperty ( getKey ( ) , name ) ; }
@ Override protected List < String > createNewExportMaskWorkflowForInitiators ( List < URI > initiatorURIs , ExportGroup exportGroup , Workflow workflow , Map < URI , Integer > volumeMap , StorageSystem storage , String token , String previousStep ) throws Exception { List < String > newSteps = new ArrayList < > ( ) ; if ( ! initiatorURIs . isEmpty ( ) ) { Map < String , List < URI > > computeResourceToInitiators = mapInitiatorsToComputeResource ( exportGroup , initiatorURIs ) ; for ( Map . Entry < String , List < URI > > resourceEntry : computeResourceToInitiators . entrySet ( ) ) { String computeKey = resourceEntry . getKey ( ) ; List < URI > computeInitiatorURIs = resourceEntry . getValue ( ) ; _log . info ( String . format ( STR_ , computeKey ) ) ; GenExportMaskCreateWorkflowResult result = generateDeviceSpecificExportMaskCreateWorkFlow ( workflow , previousStep , storage , exportGroup , computeInitiatorURIs , volumeMap , token ) ; previousStep = result . getStepId ( ) ; } } newSteps . add ( previousStep ) ; return newSteps ; }
public void mergeElementsRelations ( final OsmElement mergeInto , final OsmElement mergeFrom ) { ArrayList < Relation > fromRelations = mergeFrom . getParentRelations ( ) != null ? new ArrayList < Relation > ( mergeFrom . getParentRelations ( ) ) : new ArrayList < Relation > ( ) ; ArrayList < Relation > toRelations = mergeInto . getParentRelations ( ) != null ? mergeInto . getParentRelations ( ) : new ArrayList < Relation > ( ) ; try { for ( Relation r : fromRelations ) { if ( ! toRelations . contains ( r ) ) { dirty = BOOL_ ; undo . save ( r ) ; RelationMember rm = r . getMember ( mergeFrom ) ; RelationMember newRm = new RelationMember ( rm . getRole ( ) , mergeInto ) ; r . replaceMember ( rm , newRm ) ; r . updateState ( OsmElement . STATE_MODIFIED ) ; apiStorage . insertElementSafe ( r ) ; mergeInto . addParentRelation ( r ) ; mergeInto . updateState ( OsmElement . STATE_MODIFIED ) ; apiStorage . insertElementSafe ( mergeInto ) ; } } recordImagery ( ) ; } catch ( StorageException sex ) { } }
public void addPropertyChangeListener ( PropertyChangeListener listener ) { super . addPropertyChangeListener ( listener ) ; }
public static < T > List < T > list ( final HGSearchResult < T > result ) { final List < T > outputList = new ArrayList < T > ( ) ; while ( result . hasNext ( ) ) { final T currentValue = result . next ( ) ; outputList . add ( currentValue ) ; } return outputList ; }
public void reinitializeBegin ( final FieldODEStateInterpolator < T > interpolator ) throws MathIllegalStateException { forward = interpolator . isForward ( ) ; final FieldODEStateAndDerivative < T > s0 = interpolator . getPreviousState ( ) ; t0 = s0 . getTime ( ) ; g0 = handler . g ( s0 ) ; while ( g0 . getReal ( ) == NUM_ ) { final T epsilon = max ( solver . getAbsoluteAccuracy ( ) , solver . getRelativeAccuracy ( ) . multiply ( t0 ) . abs ( ) ) ; T tStart = t0 . add ( epsilon . multiply ( forward ? NUM_ : - NUM_ ) ) ; if ( tStart . equals ( t0 ) ) { tStart = nextAfter ( t0 ) ; } t0 = tStart ; g0 = handler . g ( interpolator . getInterpolatedState ( tStart ) ) ; } g0Positive = g0 . getReal ( ) > NUM_ ; increasing = g0Positive ; }
void onShutdown ( ) { }
public JMXProviderException ( String message ) { super ( message ) ; }
private void attachTo ( JComponent comp ) { assert comp instanceof JTree || comp instanceof JList ; comp . addMouseListener ( this ) ; comp . addMouseMotionListener ( this ) ; refcount ++ ; }
public Request < List < RunnerStatus > > processes ( ProjectReference projectReference ) { final Invocation request = getWebTarget ( ) . path ( projectReference . workspaceId ( ) ) . path ( STR_ ) . queryParam ( STR_ , projectReference . name ( ) ) . request ( ) . accept ( APPLICATION_JSON ) . buildGet ( ) ; Type collectionType = new TypeToken < List < DefaultRunnerStatus > > ( ) { } . getType ( ) ; return new SimpleRequest < > ( request , new GenericType < List < RunnerStatus > > ( collectionType ) { } , getAuthenticationManager ( ) ) ; }
public static void filledPolygon ( double [ ] x , double [ ] y ) { int N = x . length ; GeneralPath path = new GeneralPath ( ) ; path . moveTo ( ( float ) scaleX ( x [ NUM_ ] ) , ( float ) scaleY ( y [ NUM_ ] ) ) ; for ( int i = NUM_ ; i < N ; i ++ ) path . lineTo ( ( float ) scaleX ( x [ i ] ) , ( float ) scaleY ( y [ i ] ) ) ; path . closePath ( ) ; offscreen . fill ( path ) ; draw ( ) ; }
public Property monthOfYear ( ) { return new Property ( this , getChronology ( ) . monthOfYear ( ) ) ; }
public AuthenticationToken removeAuthenticationToken ( String host , String realm ) { return this . authenticationTokens . remove ( host . concat ( realm ) ) ; }
@ Override public IMessageEditorTab createNewInstance ( IMessageEditorController controller , boolean editable ) { return new InputTab ( controller , editable ) ; }
public String deployLatestVersion ( ) { if ( log != null ) { log . info ( STR_ + deployment . getVersion ( ) + STR_ + deployment . getStage ( ) + STR_ + functionArn + STR_ ) ; } updateCode ( ) ; return publishVersion ( ) ; }
public boolean isQtyPercentage ( ) { Object oo = get_Value ( COLUMNNAME_IsQtyPercentage ) ; if ( oo != null ) { if ( oo instanceof Boolean ) return ( ( Boolean ) oo ) . booleanValue ( ) ; return STR_ . equals ( oo ) ; } return BOOL_ ; }
private void deleteRecursively ( File file ) throws ApplicationException { deleteRecursively ( file , null ) ; }
synchronized boolean expire ( long threshold ) { if ( state == IDLE && idleSince < threshold ) { d ( STR_ ) ; state = EXPIRED ; conn . closeConnection ( ) ; return BOOL_ ; } else { d ( STR_ ) ; return BOOL_ ; } }
public void test_DELETE_accessPath_delete_all ( ) throws Exception { doInsertbyURL ( STR_ , packagePath + STR_ ) ; final long mutationResult = doDeleteWithAccessPath ( null , null , null ) ; assertEquals ( NUM_ , mutationResult ) ; }
public TextLabelFactory ( FontRenderContext frc , char [ ] text , Bidi bidi , int flags ) { this . frc = frc ; this . text = text . clone ( ) ; this . bidi = bidi ; this . flags = flags ; this . lineBidi = bidi ; this . lineStart = NUM_ ; this . lineLimit = text . length ; }
private Automaton naiveLev1T ( String s ) { Automaton a = naiveLev1 ( s ) ; a = Operations . union ( a , transpositionsOf ( s ) ) ; a = MinimizationOperations . minimize ( a , DEFAULT_MAX_DETERMINIZED_STATES ) ; return a ; }
public ISpaceSynchronizeReplicaState recoverFromOtherSpace ( ) throws Exception { boolean transientOnly = ! _space . getEngine ( ) . isColdStart ( ) ; return _recoveryGroup . recover ( transientOnly , transientOnly ) ; }
public void checkExcluded ( GeneralName name ) throws PKIXNameConstraintValidatorException { switch ( name . getTagNo ( ) ) { case NUM_ : checkExcludedEmail ( excludedSubtreesEmail , extractNameAsString ( name ) ) ; break ; case NUM_ : checkExcludedDNS ( excludedSubtreesDNS , DERIA5String . getInstance ( name . getName ( ) ) . getString ( ) ) ; break ; case NUM_ : checkExcludedDN ( ASN1Sequence . getInstance ( name . getName ( ) . toASN1Primitive ( ) ) ) ; break ; case NUM_ : checkExcludedURI ( excludedSubtreesURI , DERIA5String . getInstance ( name . getName ( ) ) . getString ( ) ) ; break ; case NUM_ : byte [ ] ip = ASN1OctetString . getInstance ( name . getName ( ) ) . getOctets ( ) ; checkExcludedIP ( excludedSubtreesIP , ip ) ; } }
public VCardVersion version ( ) { return version ; }
public static ColumnReference column ( String columnName ) { return new ColumnReference ( columnName ) ; }
public FieldVisitor visitField ( int access , String name , String desc , String signature , Object value ) { if ( cv != null ) { return cv . visitField ( access , name , desc , signature , value ) ; } return null ; }
private static SecretKey constructAESKey ( int len , int rounds ) throws IllegalArgumentException { if ( ( len != NUM_ ) && ( len != NUM_ ) && ( len != NUM_ ) ) { throw new IllegalArgumentException ( STR_ + len ) ; } byte [ ] rawKeyValue = constructKeyValue ( len , rounds ) ; SecretKeySpec key = new SecretKeySpec ( rawKeyValue , STR_ ) ; return key ; }
public void connected ( ) { }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public static long copyLarge ( InputStream input , OutputStream output , final long inputOffset , final long length , byte [ ] buffer ) throws IOException { if ( inputOffset > NUM_ ) { skipFully ( input , inputOffset ) ; } if ( length == NUM_ ) { return NUM_ ; } final int bufferLength = buffer . length ; int bytesToRead = bufferLength ; if ( length > NUM_ && length < bufferLength ) { bytesToRead = ( int ) length ; } int read ; long totalRead = NUM_ ; while ( bytesToRead > NUM_ && EOF != ( read = input . read ( buffer , NUM_ , bytesToRead ) ) ) { output . write ( buffer , NUM_ , read ) ; totalRead += read ; if ( length > NUM_ ) { bytesToRead = ( int ) Math . min ( length - totalRead , bufferLength ) ; } } return totalRead ; }
public void updateLong ( int columnIndex , long x ) throws SQLException { throw new NotUpdatable ( ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public ServiceException rethrow ( ) { return rethrow ( getMessage ( ) ) ; }
public void write ( int theByte ) throws java . io . IOException { if ( suspendEncoding ) { super . out . write ( theByte ) ; return ; } if ( encode ) { buffer [ position ++ ] = ( byte ) theByte ; if ( position >= bufferLength ) { out . write ( encode3to4 ( b4 , buffer , bufferLength , options ) ) ; lineLength += NUM_ ; if ( breakLines && lineLength >= MAX_LINE_LENGTH ) { out . write ( NEW_LINE ) ; lineLength = NUM_ ; } position = NUM_ ; } } else { if ( decodabet [ theByte & NUM_ ] > WHITE_SPACE_ENC ) { buffer [ position ++ ] = ( byte ) theByte ; if ( position >= bufferLength ) { int len = Base64 . decode4to3 ( buffer , NUM_ , b4 , NUM_ , options ) ; out . write ( b4 , NUM_ , len ) ; position = NUM_ ; } } else if ( decodabet [ theByte & NUM_ ] != WHITE_SPACE_ENC ) { throw new java . io . IOException ( STR_ ) ; } } }
public NTLMEngineException ( String message ) { super ( message ) ; }
public PrefixSearchTupleSet ( ) { this ( BOOL_ ) ; }
@ SuppressWarnings ( { STR_ , STR_ } ) private static < T > T create ( Class < T > cls , QName qname ) { return ( T ) Configuration . getBuilderFactory ( ) . getBuilder ( qname ) . buildObject ( qname ) ; }
public void addInit ( Expr node ) { List < Expr > list = ( parent == null || state == null ) ? getInitListNoTransform ( ) : getInitList ( ) ; list . addChild ( node ) ; }
public static String encodeLines ( byte [ ] in , int iOff , int iLen , int lineLen , String lineSeparator ) { int blockLen = ( lineLen * NUM_ ) / NUM_ ; if ( blockLen <= NUM_ ) throw new IllegalArgumentException ( ) ; int lines = ( iLen + blockLen - NUM_ ) / blockLen ; int bufLen = ( ( iLen + NUM_ ) / NUM_ ) * NUM_ + lines * lineSeparator . length ( ) ; StringBuilder buf = new StringBuilder ( bufLen ) ; int ip = NUM_ ; while ( ip < iLen ) { int l = Math . min ( iLen - ip , blockLen ) ; buf . append ( encode ( in , iOff + ip , l ) ) ; buf . append ( lineSeparator ) ; ip += l ; } return buf . toString ( ) ; }
@ Override public Iterator < T > iterator ( ) { return nodes . keySet ( ) . iterator ( ) ; }
public void drawChart ( Graphics2D gc ) { colorByClasses = BOOL_ ; colorBySeries = BOOL_ ; doDraw ( gc ) ; }
public static void cursorStringToContentValues ( Cursor cursor , String field , ContentValues values , String key ) { values . put ( key , cursor . getString ( cursor . getColumnIndexOrThrow ( field ) ) ) ; }
public boolean gotoLast ( ) { currentIterator = null ; currentId = null ; return isCurrentSet ( ) ; }
public ConsulLookup ( @ Nonnull final Consul consul ) { this ( consul , BOOL_ ) ; }
private static void usage ( ) { log . info ( STR_ ) ; }
public ChoiceFormat ( String newPattern ) { applyPattern ( newPattern ) ; }
public void recogerDatosDictamenExecuteLogic ( ActionMapping mappings , ActionForm form , HttpServletRequest request , HttpServletResponse response ) { saveCurrentInvocation ( KeysClientsInvocations . VALORACION_DICTAMEN , request ) ; removeInTemporalSession ( request , ValoracionConstants . LISTA_BOLETINES_OFICIALES_KEY ) ; setInTemporalSession ( request , ValoracionConstants . LISTA_BOLETINES_OFICIALES_KEY , getGestionValoracionBI ( request ) . getBoletinesOficiales ( ) ) ; setReturnActionFordward ( request , mappings . findForward ( STR_ ) ) ; }
private void showEntry ( Entry e ) { try { setTitle ( e . file . getName ( ) ) ; checkField . setText ( e . check ) ; enclPanel . setInfo ( e . encl ) ; selfPanel . setInfo ( e . self ) ; body . setText ( e . file . getCharContent ( BOOL_ ) . toString ( ) ) ; Highlighter highlighter = body . getHighlighter ( ) ; highlighter . removeAllHighlights ( ) ; addHighlight ( highlighter , e . encl , enclColor ) ; addHighlight ( highlighter , e . self , selfColor ) ; scroll ( body , getMinPos ( enclPanel . info , selfPanel . info ) ) ; } catch ( IOException ex ) { body . setText ( STR_ + e . file . getName ( ) + STR_ + e ) ; } }
private void calcNextPos ( int dx , int minX , int maxX , int dy , int minY , int maxY ) { if ( dx != NUM_ ) { leadColumn += dx ; if ( leadColumn > maxX ) { leadColumn = minX ; leadRow ++ ; if ( leadRow > maxY ) { leadRow = minY ; } } else if ( leadColumn < minX ) { leadColumn = maxX ; leadRow -- ; if ( leadRow < minY ) { leadRow = maxY ; } } } else { leadRow += dy ; if ( leadRow > maxY ) { leadRow = minY ; leadColumn ++ ; if ( leadColumn > maxX ) { leadColumn = minX ; } } else if ( leadRow < minY ) { leadRow = maxY ; leadColumn -- ; if ( leadColumn < minX ) { leadColumn = maxX ; } } } }
private synchronized void schedule ( ) { if ( this . inflight . get ( ) >= MAX_INFLIGHT ) { return ; } if ( NUM_ == this . pending . get ( ) ) { return ; } if ( idx >= runnables . size ( ) ) { return ; } GTSDecoderIteratorRunnable runnable = runnables . get ( idx ) ; try { executor . execute ( runnable ) ; idx ++ ; } catch ( RejectedExecutionException ree ) { } }
public T caseProvidedRuntimeLibraryDependency ( ProvidedRuntimeLibraryDependency object ) { return null ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
protected void addProperties ( Map < String , String > propMap ) throws OpenStegoException { super . addProperties ( propMap ) ; }
static boolean compareNotNull ( Database database , Value l , Value r , int compareType ) { boolean result ; switch ( compareType ) { case EQUAL : case EQUAL_NULL_SAFE : result = database . areEqual ( l , r ) ; break ; case NOT_EQUAL : case NOT_EQUAL_NULL_SAFE : result = ! database . areEqual ( l , r ) ; break ; case BIGGER_EQUAL : result = database . compare ( l , r ) >= NUM_ ; break ; case BIGGER : result = database . compare ( l , r ) > NUM_ ; break ; case SMALLER_EQUAL : result = database . compare ( l , r ) <= NUM_ ; break ; case SMALLER : result = database . compare ( l , r ) < NUM_ ; break ; case SPATIAL_INTERSECTS : { ValueGeometry lg = ( ValueGeometry ) l . convertTo ( Value . GEOMETRY ) ; ValueGeometry rg = ( ValueGeometry ) r . convertTo ( Value . GEOMETRY ) ; result = lg . intersectsBoundingBox ( rg ) ; break ; } default : throw DbException . throwInternalError ( STR_ + compareType ) ; } return result ; }
public void rebuildClassFile ( ) { }
@ Override public ObjectVirtualPoolBulkRep queryBulkResourceReps ( List < URI > ids ) { if ( ! ids . iterator ( ) . hasNext ( ) ) { return new ObjectVirtualPoolBulkRep ( ) ; } String shortVdcId = VdcUtil . getVdcId ( VirtualArray . class , ids . iterator ( ) . next ( ) ) . toString ( ) ; Iterator < VirtualPool > dbIterator ; if ( shortVdcId . equals ( VdcUtil . getLocalShortVdcId ( ) ) ) { dbIterator = _dbClient . queryIterativeObjects ( getResourceClass ( ) , ids ) ; } else { GeoServiceClient geoClient = _geoHelper . getClient ( shortVdcId ) ; try { dbIterator = geoClient . queryObjects ( getResourceClass ( ) , ids ) ; } catch ( Exception ex ) { _log . error ( STR_ + shortVdcId , ex ) ; throw APIException . internalServerErrors . genericApisvcError ( STR_ , ex ) ; } } return new ObjectVirtualPoolBulkRep ( BulkList . wrapping ( dbIterator , new mapObjectVirtualPoolWithResources ( ) , new BulkList . VirtualPoolFilter ( Type . object ) ) ) ; }
public boolean contains ( String key ) { if ( key == null ) return BOOL_ ; Entry e = this . get ( key ) ; return e == null ? BOOL_ : e . enabled ( ) ; }
private boolean isCookieOutdatedForDomain ( MultiDomainServerState cookie , DN domainDN ) { final ServerState providedState = cookie . getServerState ( domainDN ) ; if ( providedState == null ) { return BOOL_ ; } final ServerState domainOldestState = getReplicationServerDomain ( domainDN ) . getOldestState ( ) ; for ( final CSN oldestCsn : domainOldestState ) { final CSN providedCsn = providedState . getCSN ( oldestCsn . getServerId ( ) ) ; if ( providedCsn != null && providedCsn . isOlderThan ( oldestCsn ) ) { return BOOL_ ; } } return BOOL_ ; }
@ Override public int applyIntersections ( ) { intersections = detector . intersections ( items ) ; return intersections . size ( ) ; }
protected void loadTableOIS ( Vector < ? > data ) { window . getWListbox ( ) . clear ( ) ; window . getWListbox ( ) . getModel ( ) . removeTableModelListener ( window ) ; ListModelTable model = new ListModelTable ( data ) ; model . addTableModelListener ( window ) ; window . getWListbox ( ) . setData ( model , getOISColumnNames ( ) ) ; configureMiniTable ( window . getWListbox ( ) ) ; }
private void resizeFramebufferTexture ( ) { glDeleteTextures ( raytraceTexture ) ; glDeleteTextures ( positionTexture ) ; glDeleteTextures ( normalTexture ) ; glDeleteRenderbuffers ( depthBuffer ) ; glDeleteFramebuffers ( fbo ) ; createRaytracingTexture ( ) ; createRasterizerTextures ( ) ; createRasterFrameBufferObject ( ) ; }
public synchronized int lastIndexOf ( Object elem , int index ) { if ( index >= elementCount ) { throw new IndexOutOfBoundsException ( index + STR_ + elementCount ) ; } if ( elem == null ) { for ( int i = index ; i >= NUM_ ; i -- ) if ( elementData [ i ] == null ) return i ; } else { for ( int i = index ; i >= NUM_ ; i -- ) if ( elem . equals ( elementData [ i ] ) ) return i ; } return - NUM_ ; }
public CStopTraceAction ( final JFrame parent , final IFrontEndDebuggerProvider debugger ) { m_parent = Preconditions . checkNotNull ( parent , STR_ ) ; m_debugger = Preconditions . checkNotNull ( debugger , STR_ ) ; putValue ( Action . NAME , STR_ ) ; putValue ( Action . SHORT_DESCRIPTION , STR_ ) ; putValue ( Action . SMALL_ICON , new ImageIcon ( STR_ ) ) ; }
public boolean isDistinct ( ) { return distinct ; }
public PegasosK ( double regularization , int iterations , KernelTrick kernel ) { this ( regularization , iterations , kernel , CacheMode . NONE ) ; }
public boolean hasBasicBlockSet ( ) { return basicBlock != null ; }
public XPathException ( String message , Exception e ) { super ( message ) ; this . m_exception = e ; }
public Picture ( Picture picture ) { width = picture . width ( ) ; height = picture . height ( ) ; image = new BufferedImage ( width , height , BufferedImage . TYPE_INT_RGB ) ; filename = picture . filename ; for ( int col = NUM_ ; col < width ( ) ; col ++ ) for ( int row = NUM_ ; row < height ( ) ; row ++ ) image . setRGB ( col , row , picture . get ( col , row ) . getRGB ( ) ) ; }
public void reject ( ) { accepted = BOOL_ ; throw new LicenseRejectedException ( this ) ; }
private InputStream findTemplate ( String path , String template ) { try { File file = new File ( path , template ) ; if ( file . canRead ( ) ) { return new BufferedInputStream ( new FileInputStream ( file . getAbsolutePath ( ) ) ) ; } else { return null ; } } catch ( FileNotFoundException fnfe ) { return null ; } }
public void copyStates ( Automaton other ) { int otherNumStates = other . getNumStates ( ) ; for ( int s = NUM_ ; s < otherNumStates ; s ++ ) { int newState = createState ( ) ; setAccept ( newState , other . isAccept ( s ) ) ; } }
@ SuppressWarnings ( STR_ ) public ConcurrentARC ( final int cacheSize , final int partitions , final Comparator < ? super K > comparator ) { int m = NUM_ ; while ( m < partitions ) m = m * NUM_ ; int partitionSize = cacheSize / m ; if ( partitionSize < NUM_ ) partitionSize = NUM_ ; this . arc = ( ARC < K , V > [ ] ) Array . newInstance ( ComparableARC . class , m ) ; for ( int i = NUM_ ; i < this . arc . length ; i ++ ) this . arc [ i ] = new ComparableARC < K , V > ( partitionSize , comparator ) ; m -= NUM_ ; this . mask = m ; }
protected static void loadTransforms ( ClassLoader loader , Properties props , Configuration config ) { for ( Iterator < Object > i = props . keySet ( ) . iterator ( ) ; i . hasNext ( ) ; ) { String key = ( String ) i . next ( ) ; String className = props . getProperty ( key ) ; if ( Debug . verboseOn ( ) ) { Debug . logVerbose ( STR_ + key + STR_ + className , module ) ; } try { config . setSharedVariable ( key , loader . loadClass ( className ) . newInstance ( ) ) ; } catch ( Exception e ) { Debug . logError ( e , STR_ + className + STR_ + e , module ) ; } } }
public BalancedBinaryNode < K , V > right ( ) { return right ; }
@ Deprecated public void insertData ( Object [ ] values , boolean isnew ) { Vector < Object > v = new Vector < Object > ( ) ; for ( int i = NUM_ ; i < values . length ; i ++ ) { v . add ( values [ i ] ) ; } insertData ( v , isnew ) ; }
public char nextClean ( ) throws JSONException { int nextCleanInt = nextCleanInternal ( ) ; return nextCleanInt == - NUM_ ? STR_ : ( char ) nextCleanInt ; }
public boolean isAnnotationPresent ( GridDeployment dep , Object target , Class < ? extends Annotation > annCls ) { return ioc . isAnnotationPresent ( target , annCls , dep ) ; }
public GridTcpCommunicationSpiRecoveryAckSelfTest ( ) { super ( BOOL_ ) ; }
public void clip ( Path path , int fillingRule ) { if ( clippingPath == null || clippingPath . isEmpty ( ) ) { return ; } Path pathCopy = new Path ( path ) ; pathCopy . closeAllSubpaths ( ) ; IClipper clipper = new DefaultClipper ( ) ; ClipperBridge . addPath ( clipper , clippingPath , IClipper . PolyType . SUBJECT ) ; ClipperBridge . addPath ( clipper , pathCopy , IClipper . PolyType . CLIP ) ; PolyTree resultTree = new PolyTree ( ) ; clipper . execute ( IClipper . ClipType . INTERSECTION , resultTree , IClipper . PolyFillType . NON_ZERO , ClipperBridge . getFillType ( fillingRule ) ) ; clippingPath = ClipperBridge . convertToPath ( resultTree ) ; }
public static JFreeChart createCandlestickChart ( String title , String timeAxisLabel , String valueAxisLabel , OHLCDataset dataset , boolean legend ) { ValueAxis timeAxis = new DateAxis ( timeAxisLabel ) ; NumberAxis valueAxis = new NumberAxis ( valueAxisLabel ) ; XYPlot plot = new XYPlot ( dataset , timeAxis , valueAxis , null ) ; plot . setRenderer ( new CandlestickRenderer ( ) ) ; JFreeChart chart = new JFreeChart ( title , JFreeChart . DEFAULT_TITLE_FONT , plot , legend ) ; currentTheme . apply ( chart ) ; return chart ; }
public static SM_SYSTEM_MESSAGE STR_PARTY_ALLIANCE_PICKUP_ITEM_HE_DENIED ( String value0 , String value1 , String value2 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 , value1 , value2 ) ; }
@ SuppressWarnings ( STR_ ) public List < Boundary > populateArea ( final Long wardId ) { HierarchyType hType = heirarchyTypeService . getHierarchyTypeByName ( hierarchyTypeName ) ; ; List < Boundary > areaList = new LinkedList < Boundary > ( ) ; final BoundaryType childBoundaryType = boundaryTypeService . getBoundaryTypeByNameAndHierarchyType ( STR_ , hType ) ; final Boundary parentBoundary = boundaryService . getBoundaryById ( wardId ) ; areaList = new LinkedList ( crossHeirarchyService . getCrossHierarchyChildrens ( parentBoundary , childBoundaryType ) ) ; LOGGER . info ( STR_ + areaList . toString ( ) ) ; return areaList ; }
public static boolean isOutgoingFolder ( int messageType ) { return ( messageType == MESSAGE_TYPE_FAILED ) || ( messageType == MESSAGE_TYPE_OUTBOX ) || ( messageType == MESSAGE_TYPE_SENT ) || ( messageType == MESSAGE_TYPE_QUEUED ) ; }
public LocationOperand ( Offset jtocOffset ) { type = JTOC_ACCESS ; JTOCoffset = jtocOffset ; }
protected boolean hasCompressedThumbnail ( ) { return mThumbnail != null ; }
public synchronized void connect ( boolean useRtuOverTcp ) throws Exception { if ( ! isConnected ( ) ) { logger . debug ( STR_ ) ; socket = new Socket ( ) ; socket . setReuseAddress ( BOOL_ ) ; socket . setSoLinger ( BOOL_ , NUM_ ) ; socket . setKeepAlive ( BOOL_ ) ; setTimeout ( timeout ) ; socket . connect ( new InetSocketAddress ( address , port ) , timeout ) ; prepareTransport ( useRtuOverTcp ) ; connected = BOOL_ ; } }
@ Override public Publisher < Payload > requestResponse ( final Payload payload ) { assertRequester ( ) ; return requester . requestResponse ( payload ) ; }
public PermImpl ( ) { _id = Defs . NULL_ID ; _dest = Defs . DESTINATION_USER ; _product = UserDefs . PRODUCT_IDOC ; _perm = UserDefs . PERMISSION_NONE ; }
public void writeBool ( boolean b ) throws TException { if ( booleanField_ != null ) { writeFieldBeginInternal ( booleanField_ , b ? Types . BOOLEAN_TRUE : Types . BOOLEAN_FALSE ) ; booleanField_ = null ; } else { writeByteDirect ( b ? Types . BOOLEAN_TRUE : Types . BOOLEAN_FALSE ) ; } }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public boolean askWithTTEntails ( String queryString ) { PLParser parser = new PLParser ( ) ; Sentence alpha = parser . parse ( queryString ) ; return new TTEntails ( ) . ttEntails ( this , alpha ) ; }
private void reset ( ) { changeSet = null ; }
public boolean isTrained ( ) { return sTrainingTaskFuture != null ; }
public VirtualFile resolve ( String relativeStr ) { File relativeFile = null ; if ( FileUtils . isDirectory ( f ) ) { relativeFile = FileUtil . openFile ( f , relativeStr ) ; } else if ( FileUtils . isFile ( f ) ) { relativeFile = FileUtil . openFile ( f . getParentFile ( ) , relativeStr ) ; } VirtualFile result = null ; if ( relativeFile != null && FileUtils . exists ( relativeFile ) ) { result = new LocalFile ( relativeFile ) ; } if ( ( result != null ) && Trace . pathResolver ) { Trace . trace ( STR_ + relativeStr + STR_ + result . getName ( ) ) ; } return result ; }
public long add ( long instant , long amount ) { instant = super . add ( instant , amount ) ; FieldUtils . verifyValueBounds ( this , get ( instant ) , iMin , iMax ) ; return instant ; }
public T caseStatement ( Statement object ) { return null ; }
public static String convertType ( Type type ) { if ( type instanceof ParameterizedType ) { ParameterizedType parameterizedType = ( ParameterizedType ) type ; Type rawType = parameterizedType . getRawType ( ) ; return convertParametrizedType ( type , parameterizedType , rawType ) ; } else if ( String . class . equals ( type ) || ( type instanceof Class && ( ( Class ) type ) . isEnum ( ) ) ) { return STR_ ; } else if ( Integer . class . equals ( type ) || Integer . TYPE . equals ( type ) || Long . class . equals ( type ) || Long . TYPE . equals ( type ) || Double . class . equals ( type ) || Double . TYPE . equals ( type ) ) { return STR_ ; } else if ( Boolean . class . equals ( type ) ) { return STR_ ; } return type . getTypeName ( ) ; }
@ Override public void evaluate ( Solution solution ) { double [ ] x = EncodingUtils . getReal ( solution ) ; double [ ] f = new double [ numberOfObjectives ] ; int k = numberOfVariables - numberOfObjectives + NUM_ ; double g = NUM_ ; for ( int i = numberOfVariables - k ; i < numberOfVariables ; i ++ ) { g += Math . pow ( x [ i ] - NUM_ , NUM_ ) ; } for ( int i = NUM_ ; i < numberOfObjectives ; i ++ ) { f [ i ] = NUM_ + g ; for ( int j = NUM_ ; j < numberOfObjectives - i - NUM_ ; j ++ ) { f [ i ] *= Math . cos ( NUM_ * Math . PI * x [ j ] ) ; } if ( i != NUM_ ) { f [ i ] *= Math . sin ( NUM_ * Math . PI * x [ numberOfObjectives - i - NUM_ ] ) ; } } solution . setObjectives ( f ) ; }
public BinLogPosition initialize ( MySqlConfig mySqlConfig , ZkBinLogStateConfig zkConfig , LinkedBlockingQueue < TransactionEvent > txEventQueue ) { this . openReplicator = new OpenReplicator ( ) ; this . openReplicator . setUser ( mySqlConfig . getUser ( ) ) ; this . openReplicator . setPassword ( mySqlConfig . getPassword ( ) ) ; this . openReplicator . setServerId ( mySqlConfig . getServerId ( ) ) ; this . openReplicator . setPort ( mySqlConfig . getPort ( ) ) ; this . openReplicator . setHost ( mySqlConfig . getHost ( ) ) ; BinLogPosition binLogPosition = getBinLogPositionToStartFrom ( mySqlConfig , zkConfig ) ; this . openReplicator . setBinlogPosition ( binLogPosition . getBinLogPosition ( ) ) ; this . openReplicator . setBinlogFileName ( binLogPosition . getBinLogFileName ( ) ) ; this . openReplicator . setBinlogEventListener ( new SpoutBinLogEventListener ( txEventQueue , getSchema ( mySqlConfig ) , binLogPosition . getBinLogFileName ( ) ) ) ; return binLogPosition ; }
public boolean equals ( Object t1 ) { try { Matrix3d m2 = ( Matrix3d ) t1 ; return ( this . m00 == m2 . m00 && this . m01 == m2 . m01 && this . m02 == m2 . m02 && this . m10 == m2 . m10 && this . m11 == m2 . m11 && this . m12 == m2 . m12 && this . m20 == m2 . m20 && this . m21 == m2 . m21 && this . m22 == m2 . m22 ) ; } catch ( ClassCastException e1 ) { return BOOL_ ; } catch ( NullPointerException e2 ) { return BOOL_ ; } }
public void propertyChange ( PropertyChangeEvent e ) { getHandler ( ) . propertyChange ( e ) ; }
public boolean isLeftToRight ( ) { return textLine . isDirectionLTR ( ) ; }
public WbXmlBody addPrePi ( WbXmlAttribute pi ) { this . prePi . add ( pi ) ; return this ; }
public boolean pageScroll ( int direction ) { boolean down = direction == View . FOCUS_DOWN ; int height = getHeight ( ) ; if ( down ) { mTempRect . top = getScrollY ( ) + height ; int count = getChildCount ( ) ; if ( count > NUM_ ) { View view = getChildAt ( count - NUM_ ) ; if ( mTempRect . top + height > view . getBottom ( ) ) { mTempRect . top = view . getBottom ( ) - height ; } } } else { mTempRect . top = getScrollY ( ) - height ; if ( mTempRect . top < NUM_ ) { mTempRect . top = NUM_ ; } } mTempRect . bottom = mTempRect . top + height ; return scrollAndFocus ( direction , mTempRect . top , mTempRect . bottom ) ; }
public byte [ ] encode ( boolean withHash ) { return encode0 ( client , server ) ; }
public DoubleMatrix2D random ( int rows , int columns ) { return make ( rows , columns ) . assign ( cern . jet . math . Functions . random ( ) ) ; }
@ Override public CompilerPhase newExecution ( IR ir ) { return this ; }
public CompleteDiff ( T part ) { this . part = part ; }
public void addEntry ( EntryEventImpl ev ) { this . removeAllData [ this . removeAllDataSize ] = new RemoveAllEntryData ( ev ) ; this . removeAllDataSize += NUM_ ; }
protected void onDayTapped ( Time day ) { day . hour = mSelectedDay . hour ; day . minute = mSelectedDay . minute ; day . second = mSelectedDay . second ; setSelectedDay ( day ) ; }
public DateRangeBuilder addRange ( String key , Object from , Object to ) { ranges . add ( new Range ( key , from , to ) ) ; return this ; }
protected Error ( String message , Throwable cause , boolean enableSuppression , boolean writableStackTrace ) { super ( message , cause , enableSuppression , writableStackTrace ) ; }
public static Registrar makeRegistrar2 ( ) { return makeRegistrarCommon ( ) . setClientId ( STR_ ) . setRegistrarName ( STR_ ) . setIanaIdentifier ( NUM_ ) . setPassword ( STR_ ) . setPhoneNumber ( STR_ ) . setPhonePasscode ( STR_ ) . build ( ) ; }
public boolean isInitializing ( ) { return getState ( ) . isInitializing ( ) ; }
public void testZonesAndTentsDisplayed_afterRoundView ( ) { inUserLoginGoToLocationSelection ( ) ; inLocationSelectionClickLocation ( LOCATION_NAME ) ; pressBack ( ) ; inLocationSelectionCheckZonesAndTentsDisplayed ( ) ; }
public void grantRight ( DbObject object , Right right ) { if ( grantedRights == null ) { grantedRights = New . hashMap ( ) ; } grantedRights . put ( object , right ) ; }
protected void pluginInitialize ( ) { }
public ValidateException ( ) { super ( NUM_ ) ; }
public SecondBestScoringFunctionFactory ( ScoringFunctionFactory delegate , EventsManager events , ScoreTracker scoreTracker , MatsimServices controler ) { this . delegate = delegate ; this . events = events ; this . scoreTracker = scoreTracker ; this . controler = controler ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public final String matchCategories ( Set < String > categories ) { if ( categories == null ) { return null ; } Iterator < String > it = categories . iterator ( ) ; if ( mCategories == null ) { return it . hasNext ( ) ? it . next ( ) : null ; } while ( it . hasNext ( ) ) { final String category = it . next ( ) ; if ( ! mCategories . contains ( category ) ) { return category ; } } return null ; }
public void sortFromTo ( int from , int to ) { double N = to - from + NUM_ ; double quickSortEstimate = N * Math . log ( N ) / NUM_ ; double width = NUM_ ; double countSortEstimate = Math . max ( width , N ) ; if ( countSortEstimate < quickSortEstimate ) { countSortFromTo ( from , to ) ; } else { quickSortFromTo ( from , to ) ; } }
private BSPTree < Euclidean1D > nextInternalNode ( BSPTree < Euclidean1D > node ) { if ( childAfter ( node ) . getCut ( ) != null ) { return leafAfter ( node ) . getParent ( ) ; } while ( isAfterParent ( node ) ) { node = node . getParent ( ) ; } return node . getParent ( ) ; }
public AdsGetSuggestionsQueryWithSchools q ( String value ) { return unsafeParam ( STR_ , value ) ; }
public InetAddress discoverHost ( int udpPort , int timeoutMillis ) { DatagramSocket socket = null ; try { socket = new DatagramSocket ( ) ; broadcast ( udpPort , socket ) ; socket . setSoTimeout ( timeoutMillis ) ; DatagramPacket packet = new DatagramPacket ( new byte [ NUM_ ] , NUM_ ) ; try { socket . receive ( packet ) ; } catch ( SocketTimeoutException ex ) { if ( INFO ) info ( STR_ , STR_ ) ; return null ; } if ( INFO ) info ( STR_ , STR_ + packet . getAddress ( ) ) ; return packet . getAddress ( ) ; } catch ( IOException ex ) { if ( ERROR ) error ( STR_ , STR_ , ex ) ; return null ; } finally { if ( socket != null ) socket . close ( ) ; } }
public void addAllUnique ( Collection < Artist > ps ) { synchronized ( mArtists ) { boolean didChange = BOOL_ ; for ( Artist p : ps ) { if ( ! mArtists . contains ( p ) && p != null ) { mArtists . add ( p ) ; didChange = BOOL_ ; } } if ( didChange ) { sortList ( ) ; } } }
public static List propertyDescriptors ( int apiLevel ) { return PROPERTY_DESCRIPTORS ; }
public boolean isSameDate ( CalendarDate date ) { return getDayOfWeek ( ) == date . getDayOfWeek ( ) && getMonth ( ) == date . getMonth ( ) && getYear ( ) == date . getYear ( ) && getEra ( ) == date . getEra ( ) ; }
public static boolean canSee ( IGame game , Entity ae , Targetable target , boolean useSensors , LosEffects los , List < ECMInfo > allECMInfo ) { if ( ! ae . getCrew ( ) . isActive ( ) ) { return BOOL_ ; } if ( target . isOffBoard ( ) ) { return BOOL_ ; } if ( los == null ) { los = LosEffects . calculateLos ( game , ae . getId ( ) , target ) ; } boolean isVisible = los . canSee ( ) && Compute . inVisualRange ( game , los , ae , target ) ; if ( useSensors ) { isVisible = isVisible || Compute . inSensorRange ( game , los , ae , target , allECMInfo ) ; } return isVisible ; }
private void removeVolatile ( final RPObject player ) { if ( player . has ( AWAY ) ) { player . remove ( AWAY ) ; } if ( player . has ( GRUMPY ) ) { player . remove ( GRUMPY ) ; } }
@ Override public void capabilitiesFilterChanged ( CapabilitiesFilterChangeEvent e ) { if ( e . getFilter ( ) == null ) { updateCapabilitiesFilter ( null ) ; } else { updateCapabilitiesFilter ( ( Capabilities ) e . getFilter ( ) . clone ( ) ) ; } }
public void run ( ) { while ( this . stop ) { System . out . print ( STR_ ) ; } }
private void unparkSuccessor ( Node node ) { int ws = node . waitStatus ; if ( ws < NUM_ ) compareAndSetWaitStatus ( node , ws , NUM_ ) ; Node s = node . next ; if ( s == null || s . waitStatus > NUM_ ) { s = null ; for ( Node t = tail ; t != null && t != node ; t = t . prev ) if ( t . waitStatus <= NUM_ ) s = t ; } if ( s != null ) LockSupport . unpark ( s . thread ) ; }
@ Override public void wktValueUpdated ( ) { setCachedExpression ( generateExpression ( ) ) ; checkSymbolIsValid ( ) ; FieldConfigBase parent = getParent ( ) ; if ( parent != null ) { parent . valueUpdated ( ) ; } }
public static void decodeImage ( final PdfDecoderInt decode_pdf , final GUIFactory currentGUI , final GUIThumbnailPanel thumbnails , final Values commonValues ) { throw new UnsupportedOperationException ( STR_ ) ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public void unlockCanvas ( Canvas canvas ) { addTaint ( canvas . getTaint ( ) ) ; }
public static float random ( float f ) { return ( ( float ) Math . random ( ) ) * f ; }
public static boolean isTemplate ( Category category ) { return category == CakePHP3Module . Category . TEMPLATE || category == CakePHP3Module . Category . TEMPLATE_CELL || category == CakePHP3Module . Category . ELEMENT || category == CakePHP3Module . Category . ERROR || category == CakePHP3Module . Category . LAYOUT || category == CakePHP3Module . Category . EMAIL || category == CakePHP3Module . Category . PAGES ; }
private void updatePeekBuffer ( int bytesConsumed ) { peekBufferLength -= bytesConsumed ; peekBufferPosition = NUM_ ; System . arraycopy ( peekBuffer , bytesConsumed , peekBuffer , NUM_ , peekBufferLength ) ; }
public TypeReference ( int typeRef ) { this . value = typeRef ; }
public ArrayRealVector ( int size ) { data = new double [ size ] ; }
public static boolean isBoolean ( final String param ) { if ( isEmpty ( param ) ) { return BOOL_ ; } return param . equalsIgnoreCase ( STR_ ) || param . equalsIgnoreCase ( STR_ ) ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public ImageFileFilter ( String description ) { desc = description ; }
public String toString ( ) { return STR_ + this . index + STR_ + this . character + STR_ + this . line + STR_ ; }
public static Label createLabel ( Composite parent , String text , int hspan ) { Label l = new Label ( parent , SWT . NONE ) ; l . setFont ( parent . getFont ( ) ) ; if ( text != null ) { l . setText ( text ) ; } GridData gd = new GridData ( GridData . FILL_HORIZONTAL ) ; gd . horizontalSpan = hspan ; gd . grabExcessHorizontalSpace = BOOL_ ; l . setLayoutData ( gd ) ; return l ; }
public void updateDisplay ( IMultiPoint [ ] items ) { if ( items == null ) { return ; } model . setItems ( items ) ; int width = getCanvas ( ) . getWidth ( ) ; int height = getCanvas ( ) . getHeight ( ) ; nativeItems = items ; items = transform ( items , width , height ) ; model . setItems ( items ) ; getCanvas ( ) . redrawState ( ) ; getCanvas ( ) . repaint ( ) ; }
public MyChangeRecordEntry ( DN dn ) { super ( dn ) ; }
@ POST @ Path ( STR_ ) @ Consumes ( MediaType . APPLICATION_JSON ) @ Produces ( MediaType . APPLICATION_JSON ) public Response createPolicy ( @ Context final HttpServletRequest httpServletRequest , @ QueryParam ( STR_ ) String orgId , @ QueryParam ( STR_ ) String spaceId , String jsonString ) { JSONObject response = new JSONObject ( ) ; response . put ( STR_ , TESTPOLICYID ) ; return RestApiResponseHandler . getResponseCreatedOk ( response . toString ( ) ) ; }
public static StackTraceElement [ ] approxSourceStackTraceElement ( BytecodePosition bytecodePosition ) { ArrayList < StackTraceElement > elements = new ArrayList < > ( ) ; BytecodePosition position = bytecodePosition ; while ( position != null ) { ResolvedJavaMethod method = position . getMethod ( ) ; if ( method != null ) { elements . add ( method . asStackTraceElement ( position . getBCI ( ) ) ) ; } position = position . getCaller ( ) ; } return elements . toArray ( new StackTraceElement [ NUM_ ] ) ; }
private void handleDataIntegrityIssues ( final JsonCommand jsonCommand , final DataIntegrityViolationException dve ) { final Throwable realCause = dve . getMostSpecificCause ( ) ; if ( realCause . getMessage ( ) . contains ( ReportMailingJobConstants . NAME_PARAM_NAME ) ) { final String name = jsonCommand . stringValueOfParameterNamed ( ReportMailingJobConstants . NAME_PARAM_NAME ) ; throw new PlatformDataIntegrityException ( STR_ , STR_ + name + STR_ , ReportMailingJobConstants . NAME_PARAM_NAME , name ) ; } logger . error ( dve . getMessage ( ) , dve ) ; throw new PlatformDataIntegrityException ( STR_ , STR_ + realCause . getMessage ( ) ) ; }
@ Override public void addTrait ( String guid , String traitInstanceDefinition ) throws AtlasException { guid = ParamChecker . notEmpty ( guid , STR_ ) ; traitInstanceDefinition = ParamChecker . notEmpty ( traitInstanceDefinition , STR_ ) ; ITypedStruct traitInstance = deserializeTraitInstance ( traitInstanceDefinition ) ; addTrait ( guid , traitInstance ) ; }
WebXmlProcessor ( ServletContext context ) { if ( context != null ) { scanForFacesServlet ( context ) ; } }
public SingleColor ( Paint color ) { this . color = color ; }
public static boolean canBeRandomized ( Class clazz ) { return ClassUtils . isPrimitiveOrWrapper ( clazz ) || clazz . equals ( String . class ) || clazz . equals ( IDiscordClient . class ) ; }
public String propertyNamed ( String propertyName ) { return properties . get ( propertyName ) ; }
public void writeSI32 ( int value ) throws IOException { flushBits ( ) ; out . write ( value & NUM_ ) ; out . write ( value > > NUM_ ) ; out . write ( value > > NUM_ ) ; out . write ( value > > NUM_ ) ; bytesWritten += NUM_ ; }
public UiBuilder < T > enabled ( ) { this . control . setEnabled ( BOOL_ ) ; return this ; }
public int indexOfOutermostNode ( ) { if ( outer == - NUM_ ) { Point2D . Double ctr = getCenter ( ) ; outer = NUM_ ; double dist = NUM_ ; for ( int i = NUM_ , n = size ( ) ; i < n ; i ++ ) { Node cp = get ( i ) ; double d = Geom . length2 ( ctr . x , ctr . y , cp . x [ NUM_ ] , cp . y [ NUM_ ] ) ; if ( d > dist ) { dist = d ; outer = i ; } } } return outer ; }
@ Field ( NUM_ ) public Pointer < Long > pllVal ( ) { return this . io . getPointerField ( this , NUM_ ) ; }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_Snare_A_TO_SELF ( String skillcaster , String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , skillcaster , skillname ) ; }
public TitledBorder ( Border border ) { this ( border , STR_ , LEADING , DEFAULT_POSITION , null , null ) ; }
public MessageSaver ( MessageFactory messageFactory , File saveDir ) throws FileNotFoundException { this ( messageFactory , saveDir , OwnHomeData , VisitedHomeData , EnemyHomeData , WarHomeData , HomeBattleReplayData ) ; }
protected ST ( ) { if ( STGroup . trackCreationEvents ) { if ( debugState == null ) debugState = new ST . DebugState ( ) ; debugState . newSTEvent = new ConstructionEvent ( ) ; } }
public final void removeAllHelperTextColors ( ) { helperTextColors . clear ( ) ; }
public static void extractDimensionsAndMeasuresFromExpression ( List < CustomAggregateExpression > expressions , List < CarbonDimension > dims , List < CarbonMeasure > msrs ) { for ( CustomAggregateExpression expression : expressions ) { List < CarbonColumn > dimsFromExpr = expression . getReferredColumns ( ) ; for ( CarbonColumn dimFromExpr : dimsFromExpr ) { if ( ! dimFromExpr . isDimesion ( ) ) { msrs . add ( ( CarbonMeasure ) dimFromExpr ) ; } else { dims . add ( ( CarbonDimension ) dimFromExpr ) ; } } } }
protected SVGOMAnimateMotionElement ( ) { }
public static byte [ ] checkTlsPreMasterSecretKey ( int clientVersion , int serverVersion , SecureRandom random , byte [ ] encoded , boolean isFailOver ) { if ( random == null ) { random = JCAUtil . getSecureRandom ( ) ; } byte [ ] replacer = new byte [ NUM_ ] ; random . nextBytes ( replacer ) ; if ( ! isFailOver && ( encoded != null ) ) { if ( encoded . length != NUM_ ) { return replacer ; } int encodedVersion = ( ( encoded [ NUM_ ] & NUM_ ) << NUM_ ) | ( encoded [ NUM_ ] & NUM_ ) ; if ( clientVersion != encodedVersion ) { if ( clientVersion > NUM_ || serverVersion != encodedVersion ) { encoded = replacer ; } } return encoded ; } return replacer ; }
public static String hex ( int ch , int width ) { StringBuffer buf = new StringBuffer ( ) ; return appendNumber ( buf , ch , NUM_ , width ) . toString ( ) ; }
public CharacterData createCharacterData ( Characters characters ) { String data = characters . getData ( ) ; if ( characters . isCData ( ) ) { return factory . createCDATA ( data ) ; } else { return factory . createText ( data ) ; } }
private void updateServer ( Map < ServerProperty , Object > serverProperties ) throws ADSContextException { DN dn = makeDNFromServerProperties ( serverProperties ) ; try { ModifyRequest request = newModifyRequest ( dn ) ; for ( ServerProperty prop : serverProperties . keySet ( ) ) { Attribute attr = makeAttrFromServerProperty ( prop , serverProperties . get ( prop ) ) ; if ( attr != null ) { request . addModification ( new Modification ( REPLACE , attr ) ) ; } } throwIfNotSuccess ( connectionWrapper . getConnection ( ) . modify ( request ) ) ; if ( serverProperties . containsKey ( ServerProperty . INSTANCE_PUBLIC_KEY_CERTIFICATE ) ) { registerInstanceKeyCertificate ( serverProperties , dn ) ; } } catch ( ADSContextException ace ) { throw ace ; } catch ( EntryNotFoundException x ) { throw new ADSContextException ( ErrorType . NOT_YET_REGISTERED ) ; } catch ( Exception x ) { throw new ADSContextException ( ErrorType . ERROR_UNEXPECTED , x ) ; } }
public static boolean isThreadNeqCurrentThread ( ) { if ( ! checkCallerThread ) { return BOOL_ ; } if ( currentThread == null ) { logger . error ( STR_ ) ; Map < Thread , StackTraceElement [ ] > map = Thread . getAllStackTraces ( ) ; for ( Thread t : map . keySet ( ) ) { String msg = STR_ + t + STR_ ; for ( StackTraceElement e : map . get ( t ) ) { msg += STR_ + e + STR_ ; } logger . error ( msg ) ; } currentThread = Thread . currentThread ( ) ; } return Thread . currentThread ( ) != currentThread ; }
public ImageShowAdapter ( Context context , List < String > imagePaths , int width , int height ) { mContext = context ; this . mImagePaths = imagePaths ; this . mWidth = width ; this . mHeight = height ; mAbImageLoader = new AbImageLoader ( mContext ) ; mAbImageLoader . setMaxWidth ( this . mWidth ) ; mAbImageLoader . setMaxHeight ( this . mHeight ) ; mAbImageLoader . setLoadingImage ( R . drawable . image_loading ) ; mAbImageLoader . setErrorImage ( R . drawable . image_error ) ; mAbImageLoader . setEmptyImage ( R . drawable . image_empty ) ; }
@ Override public final void preTearDown ( ) throws Exception { map . clear ( ) ; closeCache ( ) ; clientVM1 . invoke ( null ) ; clientVM2 . invoke ( null ) ; serverVM0 . invoke ( null ) ; serverVM1 . invoke ( null ) ; serverVM0 . invoke ( null ) ; serverVM1 . invoke ( null ) ; disconnectAllFromDS ( ) ; }
public void deleteTag ( int tagId , int ifdId ) { mData . removeTag ( getTrueTagKey ( tagId ) , ifdId ) ; }
public IEntryPacket toEntry ( Object object ) throws RemoteException , UnusableEntryException , UnknownTypeException { if ( object == null ) return null ; if ( object instanceof SpaceMapEntry ) return _converter . toInternal ( object ) ; if ( object instanceof Map . Entry ) { Map . Entry entry = ( Map . Entry ) object ; SpaceMapEntry envelope = MapEntryFactory . create ( entry . getKey ( ) , entry . getValue ( ) ) ; return _converter . toInternal ( envelope ) ; } if ( _converter != null ) return _converter . toInternal ( object ) ; return null ; }
public Coord toWGS84 ( Coord projection ) { if ( ! projection . isProjected ( ) ) { return projection ; } return inverseMercator ( projection . getLatitude ( ) , projection . getLongitude ( ) ) ; }
private void readObject ( java . io . ObjectInputStream s ) throws java . io . IOException , ClassNotFoundException { s . defaultReadObject ( ) ; set ( s . readDouble ( ) ) ; }
public void callEvent ( final Event event ) throws EventException { if ( event instanceof Cancellable ) { if ( ( ( Cancellable ) event ) . isCancelled ( ) && isIgnoringCancelled ( ) ) { return ; } } executor . execute ( listener , event ) ; }
@ DSComment ( STR_ ) @ DSBan ( DSCat . PRIVATE_METHOD ) @ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) private void formDidBlur ( int nodePointer ) { if ( mWebView == null ) return ; Message . obtain ( mWebView . mPrivateHandler , WebView . FORM_DID_BLUR , nodePointer , NUM_ ) . sendToTarget ( ) ; }
public AggregateTranslator ( final CharSequenceTranslator ... translators ) { this . translators = translators . clone ( ) ; }
public static List < Integer > convertToIntegerList ( int [ ] array ) { List < Integer > integers = new ArrayList < Integer > ( ) ; for ( int i = NUM_ ; i < array . length ; i ++ ) { integers . add ( array [ i ] ) ; } return integers ; }
public static void registerConfig ( ) { Config . registerSelf ( SocketCommandProcessor . class ) ; port = Config . parms . getInt ( STR_ ) ; }
private int createProgram ( String vertexSource , String fragmentSource ) { mVShaderHandle = loadShader ( GLES20 . GL_VERTEX_SHADER , vertexSource ) ; if ( mVShaderHandle == NUM_ ) { return NUM_ ; } mFShaderHandle = loadShader ( GLES20 . GL_FRAGMENT_SHADER , fragmentSource ) ; if ( mFShaderHandle == NUM_ ) { return NUM_ ; } int program = GLES20 . glCreateProgram ( ) ; if ( program != NUM_ ) { GLES20 . glAttachShader ( program , mVShaderHandle ) ; GLES20 . glAttachShader ( program , mFShaderHandle ) ; GLES20 . glLinkProgram ( program ) ; int [ ] linkStatus = new int [ NUM_ ] ; GLES20 . glGetProgramiv ( program , GLES20 . GL_LINK_STATUS , linkStatus , NUM_ ) ; if ( linkStatus [ NUM_ ] != GLES20 . GL_TRUE ) { RajLog . e ( STR_ + getClass ( ) . getCanonicalName ( ) + STR_ ) ; RajLog . e ( GLES20 . glGetProgramInfoLog ( program ) ) ; GLES20 . glDeleteProgram ( program ) ; program = NUM_ ; } } return program ; }
public void testBogusArguments ( ) throws Exception { IllegalArgumentException expected = expectThrows ( IllegalArgumentException . class , null ) ; assertTrue ( expected . getMessage ( ) . contains ( STR_ ) ) ; }
public com . sun . identity . wsfederation . jaxb . wsspolicy . WssRelV20Token10Element createWssRelV20Token10Element ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . wsfederation . jaxb . wsspolicy . impl . WssRelV20Token10ElementImpl ( ) ; }
private void readObject ( ) { }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { if ( stack . getUIMgr ( ) != null && stack . getUIMgr ( ) . getUIClientType ( ) == UIClient . REMOTE_UI && stack . getUIMgr ( ) . getRootPanel ( ) . getRenderEngine ( ) instanceof MiniClientSageRenderer ) { return ( ( MiniClientSageRenderer ) stack . getUIMgr ( ) . getRootPanel ( ) . getRenderEngine ( ) ) . getHDMIConnectorAutodetect ( ) ; } return null ; }
public void reset ( ) { currBuf = NUM_ ; currBufIdx = - NUM_ ; bufPosition = NUM_ ; bufStart = NUM_ ; bufLength = NUM_ ; file . setLength ( NUM_ ) ; }
public HttpDelete ( String path , ParameterMap params ) { super ( path , params ) ; this . httpMethod = HttpMethod . DELETE ; }
public void logInfo ( String message ) { logger . info ( logPrefix + message ) ; }
public void addHistoryChangedListener ( HistoryChangedListener l ) { m_HistoryChangedListeners . add ( l ) ; }
@ Override public void onAction ( ) { onAction ( ActionType . LOOK_CLOSELY ) ; }
public com . sun . identity . liberty . ws . common . jaxb . utility . ReceivedElement createReceivedElement ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . liberty . ws . common . jaxb . utility . impl . ReceivedElementImpl ( ) ; }
@ Nonnull public BugInstance addClass ( ClassDescriptor classDescriptor ) { add ( ClassAnnotation . fromClassDescriptor ( classDescriptor ) ) ; return this ; }
public static IStatus validateImportDeclaration ( String name ) { return validateImportDeclaration ( name , CompilerOptions . VERSION_1_3 , CompilerOptions . VERSION_1_3 ) ; }
public void removeLayoutComponent ( Component comp ) { removeConstraints ( comp ) ; }
@ SuppressWarnings ( STR_ ) public < T extends WebMediumConfig > T create ( T config ) { config . addCredentials ( this ) ; String xml = POST ( this . url + STR_ + config . getType ( ) , config . toXML ( ) ) ; Element root = parse ( xml ) ; if ( root == null ) { return null ; } try { config = ( T ) config . getClass ( ) . newInstance ( ) ; config . parseXML ( root ) ; return config ; } catch ( Exception exception ) { this . exception = SDKException . parseFailure ( exception ) ; throw this . exception ; } }
public PlaceProperty ( double latitude , double longitude ) { setCoordinates ( latitude , longitude ) ; }
public FileTreeNode ( Path parent ) throws SecurityException , FileNotFoundException { if ( parent == null ) { throw new FileNotFoundException ( ) ; } this . name = parent . toString ( ) ; Path pathPath = parent ; path = pathPath . toString ( ) ; isDir = BOOL_ ; isRoot = BOOL_ ; setUserObject ( this . name ) ; }
@ Override public boolean isActive ( ) { return amIActive ; }
public void mergeFrom ( ParseOperationSet other ) { for ( String key : other . keySet ( ) ) { ParseFieldOperation operation1 = other . get ( key ) ; ParseFieldOperation operation2 = get ( key ) ; if ( operation2 != null ) { operation2 = operation2 . mergeWithPrevious ( operation1 ) ; } else { operation2 = operation1 ; } put ( key , operation2 ) ; } }
private static String extractTextData ( Document document , String elementName ) { String value = STR_ ; NodeList nodeList = document . getElementsByTagName ( elementName ) ; if ( nodeList . getLength ( ) > NUM_ ) { value = nodeList . item ( NUM_ ) . getTextContent ( ) ; } return value ; }
@ Override public void dump ( final String prefix , final FileDescriptor fd , final PrintWriter writer , final String [ ] args ) { delegate . dump ( prefix , fd , writer , args ) ; }
protected void expandFor ( int index , Object d ) { if ( index < size ) return ; int oldSize = size , capacity = vector . length ; size = index + NUM_ ; if ( capacity >= size ) return ; while ( capacity < size ) capacity *= NUM_ ; Object [ ] t = new Object [ capacity ] ; System . arraycopy ( vector , NUM_ , t , NUM_ , oldSize ) ; if ( d != null ) Arrays . fill ( t , oldSize , size , d ) ; vector = t ; }
protected CnATreeElement loadElement ( String uuid , RetrieveInfo ri ) throws CommandException { LoadElementByUuid < CnATreeElement > loadByUuid = new LoadElementByUuid < CnATreeElement > ( uuid , ri ) ; loadByUuid = commandService . executeCommand ( loadByUuid ) ; CnATreeElement element = loadByUuid . getElement ( ) ; assertNotNull ( STR_ + uuid , element ) ; RetrieveCnATreeElement retrieveCommand = new RetrieveCnATreeElement ( element . getTypeId ( ) , element . getDbId ( ) , RetrieveInfo . getChildrenInstance ( ) ) ; retrieveCommand = commandService . executeCommand ( retrieveCommand ) ; CnATreeElement elementWithChildren = retrieveCommand . getElement ( ) ; assertNotNull ( STR_ + uuid , elementWithChildren ) ; assertNotNull ( STR_ + uuid , elementWithChildren . getChildren ( ) ) ; LoadElementForEditor loadForEditor = new LoadElementForEditor ( element , BOOL_ ) ; loadForEditor = ServiceFactory . lookupCommandService ( ) . executeCommand ( loadForEditor ) ; element = loadForEditor . getElement ( ) ; assertNotNull ( STR_ + uuid , element ) ; element . setChildren ( elementWithChildren . getChildren ( ) ) ; return element ; }
public void onNetConnected ( NetUtils . NetType type ) { }
public void addTransactionConfidenceEventListener ( TransactionConfidenceEventListener listener ) { addTransactionConfidenceEventListener ( Threading . USER_THREAD , listener ) ; }
public T targetObjectId ( String targetObjectId ) { jsonValue . put ( TARGET_OBJECT_ID , targetObjectId ) ; return self ( ) ; }
private E dequeue ( ) { final Object [ ] items = this . items ; @ SuppressWarnings ( STR_ ) E x = ( E ) items [ takeIndex ] ; items [ takeIndex ] = null ; takeIndex = inc ( takeIndex ) ; count -- ; if ( itrs != null ) itrs . elementDequeued ( ) ; notFull . signal ( ) ; return x ; }
public void editElement ( final Object element , final String columnPropertyName ) { final int columnIndex = TableViewerUtils . columnPropertyNameToColumnIndex ( columnPropertyName , BOOL_ , viewer ) ; viewer . editElement ( element , columnIndex ) ; }
private String generateCNonce ( ) { if ( secureRandom == null ) { secureRandom = new SecureRandom ( ) ; } byte [ ] cnonceBytes = new byte [ NUM_ ] ; secureRandom . nextBytes ( cnonceBytes ) ; return Base64 . encode ( cnonceBytes ) ; }
public static < TK , FV > ConcreteRule < TK , FV > makeSyntheticRule ( ConcreteRule < TK , FV > base , Sequence < TK > target , PhraseAlignment align , Scorer < FV > scorer , FeatureExtractor < TK , FV > featurizer , Sequence < TK > sourceSequence , InputProperties inputProperties , int sourceInputId ) { Rule < TK > baseRule = base . abstractRule ; Rule < TK > newRule = new Rule < > ( baseRule . scores , baseRule . phraseScoreNames , target , baseRule . source , align , PHRASE_TABLE_NAME ) ; newRule . reoderingScores = baseRule . reoderingScores ; newRule . forwardOrientation = baseRule . forwardOrientation ; newRule . backwardOrientation = baseRule . backwardOrientation ; ConcreteRule < TK , FV > rule = new ConcreteRule < > ( newRule , base . sourceCoverage , featurizer , scorer , sourceSequence , sourceInputId , inputProperties ) ; return rule ; }
@ Override public void changeCursor ( Cursor cursor ) { super . changeCursor ( cursor ) ; resetMappings ( ) ; }
public static void call ( Context context , String number ) { Uri uri = Uri . parse ( STR_ + number ) ; Intent intent = new Intent ( Intent . ACTION_CALL , uri ) ; if ( ActivityCompat . checkSelfPermission ( context , Manifest . permission . CALL_PHONE ) != PackageManager . PERMISSION_GRANTED ) { return ; } context . startActivity ( intent ) ; }
@ Nullable public static PyCallExpression findCallExpParent ( @ NotNull final PsiElement anchor , @ NotNull final FQNamesProvider functionName ) { final PsiElement parent = PsiTreeUtil . findFirstParent ( anchor , new MyFunctionCondition ( functionName ) ) ; if ( parent instanceof PyCallExpression ) { return ( PyCallExpression ) parent ; } return null ; }
public static SM_SYSTEM_MESSAGE STR_MSG_COMBAT_PARTY_PARRY ( String value0 , String value1 ) { return new SM_SYSTEM_MESSAGE ( NUM_ , value0 , value1 ) ; }
private ConcurrentMap < Class < ? > , MailAction > defaultMethodMap ( ) { final ConcurrentMap < Class < ? > , MailAction > actionMap = new ConcurrentHashMap < Class < ? > , MailAction > ( NUM_ ) ; actionMap . put ( ActionFileInto . class , new FileIntoAction ( ) ) ; actionMap . put ( ActionKeep . class , new KeepAction ( ) ) ; actionMap . put ( ActionRedirect . class , new RedirectAction ( ) ) ; actionMap . put ( ActionReject . class , new RejectAction ( ) ) ; actionMap . put ( ActionVacation . class , new VacationAction ( ) ) ; return actionMap ; }
public Iterator < BuildStep > iterator ( ) { return Collections . unmodifiableList ( mStepList ) . iterator ( ) ; }
@ Override public void destroy ( ) { this . attribute = null ; this . filterConfig = null ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( namednodemapreturnattrnode . class , args ) ; }
public void testPreconditions ( ) { assertNotNull ( STR_ , mTestActivity ) ; assertNotNull ( STR_ , mTestFragment ) ; }
String computeDescription ( IMethod method ) { StringBuffer buf = new StringBuffer ( ) ; buf . append ( STR_ ) ; buf . append ( method . getElementName ( ) ) ; buf . append ( STR_ ) ; boolean first = BOOL_ ; for ( String paramType : method . getParameterTypes ( ) ) { if ( first ) first = BOOL_ ; else buf . append ( STR_ ) ; buf . append ( Signature . toString ( paramType ) ) ; } buf . append ( STR_ ) ; return buf . toString ( ) ; }
public static void quickSort ( Object [ ] a , int fromIndex , int toIndex ) { rangeCheck ( a . length , fromIndex , toIndex ) ; quickSort1 ( a , fromIndex , toIndex - fromIndex ) ; }
public MethodInfo findMethodHere ( MethodInfo mproto ) { return ( isMissing ? null : getDetails ( ) . findMethodHere ( mproto ) ) ; }
public void addInterfaceName ( String interfaceName , int line ) { ( interfaceNames != null ? interfaceNames : ( interfaceNames = new TreeSet < NameInfo > ( ) ) ) . add ( new NameInfo ( interfaceName , line ) ) ; addImportName ( interfaceName , line ) ; }
private List < KV < ByteString , ByteString > > generateTableData ( int numRows ) { List < KV < ByteString , ByteString > > testData = new ArrayList < > ( numRows ) ; for ( int i = NUM_ ; i < numRows ; ++ i ) { ByteString key = ByteString . copyFromUtf8 ( String . format ( STR_ , i ) ) ; ByteString value = ByteString . copyFromUtf8 ( String . format ( STR_ , i ) ) ; testData . add ( KV . of ( key , value ) ) ; } return testData ; }
public void addBridgeIdleDebugListener ( NotThreadSafeBridgeIdleDebugListener listener ) { mBridgeIdleListeners . add ( listener ) ; }
private static void scale ( double constant , double vector [ ] ) { if ( constant == NUM_ ) return ; for ( int i = NUM_ ; i < vector . length ; i ++ ) { vector [ i ] *= constant ; } }
public boolean isSTW ( ) { return stw ; }
@ Override public void clear ( ) { map . clear ( ) ; }
public static XMLObjectWriter newInstance ( OutputStream out , String encoding ) throws XMLStreamException { XMLObjectWriter writer = new XMLObjectWriter ( ) ; writer . setOutput ( out , encoding ) ; return writer ; }
public boolean isClosed ( ) { return isClosed ; }
private void writeConfigFile ( ) { if ( configPropertiesFile != null ) { try { Properties props = new Properties ( ) ; for ( String key : fieldValueMap . keySet ( ) ) { String value = fieldValueMap . get ( key ) ; if ( value != null ) { props . setProperty ( key , value ) ; } } OutputStream out = new FileOutputStream ( configPropertiesFile ) ; props . store ( out , STR_ ) ; out . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } } }
@ RequestMapping ( value = STR_ , method = RequestMethod . POST , consumes = { STR_ , STR_ } ) @ Secured ( SecurityFunctions . FN_UPLOAD_POST ) public UploadSingleInitiationResponse initiateUploadSingle ( @ RequestBody UploadSingleInitiationRequest uploadSingleInitiationRequest ) { UploadSingleInitiationResponse uploadSingleInitiationResponse = uploadDownloadService . initiateUploadSingle ( uploadSingleInitiationRequest ) ; for ( BusinessObjectData businessObjectData : Arrays . asList ( uploadSingleInitiationResponse . getSourceBusinessObjectData ( ) , uploadSingleInitiationResponse . getTargetBusinessObjectData ( ) ) ) { BusinessObjectDataKey businessObjectDataKey = businessObjectDataHelper . getBusinessObjectDataKey ( businessObjectData ) ; for ( NotificationEventTypeEntity . EventTypesBdata eventType : Arrays . asList ( NotificationEventTypeEntity . EventTypesBdata . BUS_OBJCT_DATA_RGSTN , NotificationEventTypeEntity . EventTypesBdata . BUS_OBJCT_DATA_STTS_CHG ) ) { notificationEventService . processBusinessObjectDataNotificationEventAsync ( eventType , businessObjectDataKey , businessObjectData . getStatus ( ) , null ) ; } for ( StorageUnit storageUnit : businessObjectData . getStorageUnits ( ) ) { notificationEventService . processStorageUnitNotificationEventAsync ( NotificationEventTypeEntity . EventTypesStorageUnit . STRGE_UNIT_STTS_CHG , businessObjectDataKey , storageUnit . getStorage ( ) . getName ( ) , storageUnit . getStorageUnitStatus ( ) , null ) ; } } return uploadSingleInitiationResponse ; }
public @ Test final void testCreationNegativ3 ( ) { thrown . expect ( IllegalArgumentException . class ) ; new User ( null ) ; }
public int writeLong ( int index , long l ) { return this . writeULong ( index , l ) ; }
public void actionPerformed ( ActionEvent ev ) { executeImmediately ( STR_ ) ; }
private static String toPunycode ( String domainName ) { if ( UrlUtils . isASCII ( domainName ) ) { return domainName ; } return UrlUtils . toPunycode ( domainName ) ; }
public static double pdf ( double x , double mu , double sigma , double lambda ) { final double dx = x - mu ; final double lss = lambda * sigma * sigma ; final double erfc = NormalDistribution . erfc ( ( lss - dx ) / ( sigma * MathUtil . SQRT2 ) ) ; return erfc > NUM_ ? NUM_ * lambda * Math . exp ( lambda * ( lss * NUM_ - dx ) ) * erfc : NUM_ ; }
public boolean isNonRegularLoop ( ) { return ! isAffineLoop ( ) ; }
private void showFeedback ( String message ) { if ( myHost != null ) { myHost . showFeedback ( message ) ; } else { System . out . println ( message ) ; } }
public String encodeBody ( ) { String retval = STR_ ; if ( address . getAddressType ( ) == AddressImpl . ADDRESS_SPEC ) { retval += LESS_THAN ; } retval += address . encode ( ) ; if ( address . getAddressType ( ) == AddressImpl . ADDRESS_SPEC ) { retval += GREATER_THAN ; } if ( ! parameters . isEmpty ( ) ) { retval += SEMICOLON + parameters . encode ( ) ; } return retval ; }
static boolean isPackageAccess ( int modifiers ) { return ( modifiers & ACCESS_TEST ) == NUM_ ; }
public static JSONObject createOpenGraphActionForPost ( String type ) { JSONObject action = new JSONObject ( ) ; if ( type != null ) { try { action . put ( STR_ , type ) ; } catch ( JSONException e ) { throw new FacebookException ( STR_ , e ) ; } } return action ; }
public long skip ( long n ) throws java . io . IOException { if ( n <= NUM_ ) { return NUM_ ; } int adj = NUM_ ; if ( isBack ) { isBack = BOOL_ ; if ( n == NUM_ ) { return NUM_ ; } else { -- n ; adj = NUM_ ; } } long pos ; long len ; long newpos ; pos = getPosition ( ) ; len = length ( ) ; newpos = pos + n ; if ( newpos > len ) { newpos = len ; } seek ( newpos ) ; return newpos - pos + adj ; }
public static EWMA fiveMinuteEWMA ( ) { return new EWMA ( M5_ALPHA , NUM_ , TimeUnit . SECONDS ) ; }
public void test_update$BII ( ) throws Exception { try { MessageDigest . getInstance ( STR_ ) . update ( new byte [ ] { } , Integer . MAX_VALUE , Integer . MAX_VALUE ) ; fail ( ) ; } catch ( IllegalArgumentException expected ) { } }
public EndpointTest ( String name ) { super ( name ) ; }
private void recordBourneVplexMirrorEvent ( URI mirrorUri , String evtType , Operation . Status status , String description ) { try { VplexMirrorTaskCompleter . recordBourneVplexMirrorEvent ( _dbClient , mirrorUri , evtType , status , description ) ; } catch ( Exception e ) { _log . error ( STR_ , evtType , mirrorUri ) ; } }
public BigInteger nextBigInteger ( ) throws DecodeException { if ( ! hasNext ( GSER_INTEGER ) ) { final LocalizableMessage msg = WARN_GSER_NO_VALID_INTEGER . get ( gserValue . substring ( pos , length ) ) ; throw DecodeException . error ( msg ) ; } return new BigInteger ( next ( GSER_INTEGER ) ) ; }
@ Override public void memberOnline ( InternalDistributedMember member , PersistentMemberID persistentID ) { this . membershipChanged = BOOL_ ; }
@ Override public boolean supportsMinimumSQLGrammar ( ) { debugCodeCall ( STR_ ) ; return BOOL_ ; }
public JSONWriter key ( String string ) throws JSONException { if ( string == null ) { throw new JSONException ( STR_ ) ; } if ( this . mode == STR_ ) { try { this . stack [ this . top - NUM_ ] . putOnce ( string , Boolean . TRUE ) ; if ( this . comma ) { this . writer . write ( STR_ ) ; } this . writer . write ( JSONObject . quote ( string ) ) ; this . writer . write ( STR_ ) ; this . comma = BOOL_ ; this . mode = STR_ ; return this ; } catch ( IOException e ) { throw new JSONException ( e ) ; } } throw new JSONException ( STR_ ) ; }
@ VisibleForTesting static boolean isTagsMatched ( Launch launch , EmailSenderCase oneCase ) { return ! ( null != oneCase . getTags ( ) && ! oneCase . getTags ( ) . isEmpty ( ) ) || null != launch . getTags ( ) && oneCase . getTags ( ) . containsAll ( launch . getTags ( ) ) ; }
public CompositeComparator ( Comparator [ ] cmp ) { this ( cmp , BOOL_ ) ; }
public static boolean trackFreedReferenceCounts ( ) { return getInstance ( ) . trackFreedReferenceCounts ( ) ; }
private org . apache . carbondata . format . DataType fromWrapperToExternalDataType ( DataType dataType ) { if ( null == dataType ) { return null ; } switch ( dataType ) { case STRING : return org . apache . carbondata . format . DataType . STRING ; case INT : return org . apache . carbondata . format . DataType . INT ; case SHORT : return org . apache . carbondata . format . DataType . SHORT ; case LONG : return org . apache . carbondata . format . DataType . LONG ; case DOUBLE : return org . apache . carbondata . format . DataType . DOUBLE ; case DECIMAL : return org . apache . carbondata . format . DataType . DECIMAL ; case TIMESTAMP : return org . apache . carbondata . format . DataType . TIMESTAMP ; case ARRAY : return org . apache . carbondata . format . DataType . ARRAY ; case STRUCT : return org . apache . carbondata . format . DataType . STRUCT ; default : return org . apache . carbondata . format . DataType . STRING ; } }
public DistributedLogNamespaceBuilder featureProvider ( FeatureProvider featureProvider ) { this . _featureProvider = featureProvider ; return this ; }
public static String toString ( LuaTable table ) { JSONObject obj = toJSONObject ( table ) ; try { return obj . toString ( NUM_ ) ; } catch ( JSONException e ) { e . printStackTrace ( ) ; } return obj . toString ( ) ; }
public boolean isSetTransactionId ( ) { return EncodingUtils . testBit ( __isset_bitfield , __TRANSACTIONID_ISSET_ID ) ; }
protected static TrustAnchor findTrustAnchor ( X509Certificate cert , Set trustAnchors ) throws AnnotatedException { return findTrustAnchor ( cert , trustAnchors , null ) ; }
public SelectComponentValueITCase ( String name ) { super ( name ) ; }
public static String [ ] list_to_strings ( List l ) { int len = l . size ( ) ; String [ ] ret = new String [ len ] ; for ( int i = NUM_ ; i < len ; i ++ ) { ret [ i ] = l . get ( i ) . toString ( ) ; } return ret ; }
public boolean isCalledClass ( String className ) { if ( toTestClasses . isEmpty ( ) ) computeInterestingClasses ( graph ) ; if ( toTestClasses . contains ( className ) ) return BOOL_ ; return BOOL_ ; }
public synchronized void removeOption ( String key ) { Key k = new Key ( key ) ; options . remove ( key ) ; HashSet < String > on = optionNames . get ( k . getSectionName ( ) ) ; if ( on != null ) { on . remove ( k . getOptionName ( ) ) ; if ( on . isEmpty ( ) ) { cleanupSection ( k . getSectionName ( ) ) ; } } }
protected synchronized void minorRequirementChange ( ChildState cs ) { minorChanged = BOOL_ ; }
public boolean isValid ( String inetAddress ) { return isValidInet4Address ( inetAddress ) || isValidInet6Address ( inetAddress ) ; }
public static long swapEndian ( final long l ) { return ( ( l & NUM_ ) << NUM_ ) | ( ( l & NUM_ ) << NUM_ ) | ( ( l & NUM_ ) << NUM_ ) | ( ( l & NUM_ ) << NUM_ ) | ( ( l > > > NUM_ ) & NUM_ ) | ( ( l > > > NUM_ ) & NUM_ ) | ( ( l > > > NUM_ ) & NUM_ ) | ( ( l > > > NUM_ ) & NUM_ ) ; }
public boolean nextLineExceptComments ( ) throws IOException { while ( nextLine ( ) ) { if ( comment == null || ! comment . reset ( buf ) . matches ( ) ) { tokenizer . initialize ( buf , NUM_ , buf . length ( ) ) ; return BOOL_ ; } } return BOOL_ ; }
public void addElevations ( String filename ) throws IOException { if ( filename == null ) { String message = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( message ) ; throw new IllegalArgumentException ( message ) ; } this . addElevations ( new File ( filename ) ) ; }
public static final byte [ ] unzipBestEffort ( byte [ ] in , int sizeLimit ) { try { ByteArrayOutputStream outStream = new ByteArrayOutputStream ( EXPECTED_COMPRESSION_RATIO * in . length ) ; GZIPInputStream inStream = new GZIPInputStream ( new ByteArrayInputStream ( in ) ) ; byte [ ] buf = new byte [ BUF_SIZE ] ; int written = NUM_ ; while ( BOOL_ ) { try { int size = inStream . read ( buf ) ; if ( size <= NUM_ ) break ; if ( ( written + size ) > sizeLimit ) { outStream . write ( buf , NUM_ , sizeLimit - written ) ; break ; } outStream . write ( buf , NUM_ , size ) ; written += size ; } catch ( Exception e ) { break ; } } try { outStream . close ( ) ; } catch ( IOException e ) { } return outStream . toByteArray ( ) ; } catch ( IOException e ) { return null ; } }
public EditableOMRangeRings ( GraphicAttributes ga ) { createGraphic ( ga ) ; }
public PaymentException ( ) { }
public void removeUserNoUpdate ( User user ) { synchronized ( users ) { users . remove ( user ) ; } }
private void cancelHeartbeatTimeout ( ) { if ( heartbeatTimer != null ) { LOGGER . debug ( STR_ , context . getCluster ( ) . member ( ) . address ( ) ) ; heartbeatTimer . cancel ( ) ; } }
@ Override public void refreshing ( ) { mActionBarHeaderPullingProgressLayout . setVisibility ( View . INVISIBLE ) ; mActionBarHeaderRefreshingProgressBar . setVisibility ( View . VISIBLE ) ; }
public PackedTokenAttributeImpl ( ) { }
private List < LatLng > loadGpxData ( XmlPullParser parser , InputStream gpxIn ) throws XmlPullParserException , IOException { List < LatLng > latLngs = new ArrayList < > ( ) ; parser . setInput ( gpxIn , null ) ; parser . nextTag ( ) ; while ( parser . next ( ) != XmlPullParser . END_DOCUMENT ) { if ( parser . getEventType ( ) != XmlPullParser . START_TAG ) { continue ; } if ( parser . getName ( ) . equals ( STR_ ) ) { latLngs . add ( new LatLng ( Double . valueOf ( parser . getAttributeValue ( null , STR_ ) ) , Double . valueOf ( parser . getAttributeValue ( null , STR_ ) ) ) ) ; } } return latLngs ; }
public CellTable ( int [ ] dims ) { this . table = new MultiDimIntTable ( dims ) ; }
public Credentials toCredentials ( Element el , String attributeUser , String attributePassword , Credentials defaultCredentials ) { String user = el . getAttribute ( attributeUser ) ; String pass = el . getAttribute ( attributePassword ) ; if ( user == null ) return defaultCredentials ; if ( pass == null ) pass = STR_ ; return CredentialsImpl . toCredentials ( user , pass ) ; }
public SendableTextMessage . SendableTextMessageBuilder disableNotification ( boolean disableNotification ) { this . disableNotification = disableNotification ; return this ; }
private List < EndIsland > findSurroundingIslands ( int chunkX , int chunkY , int chunksPerFragmentX , int chunksPerFragmentY ) { List < EndIsland > result = new LinkedList < EndIsland > ( ) ; for ( int y = - SURROUNDING_CHUNKS ; y <= chunksPerFragmentY + SURROUNDING_CHUNKS ; y ++ ) { for ( int x = - SURROUNDING_CHUNKS ; x <= chunksPerFragmentX + SURROUNDING_CHUNKS ; x ++ ) { EndIsland island = tryCreateEndIsland ( chunkX + x , chunkY + y ) ; if ( island != null ) { result . add ( island ) ; } } } return result ; }
public String toString ( ) { return m_Formatter . format ( getStamp ( ) ) ; }
public DD sqrt ( ) { if ( isZero ( ) ) return valueOf ( NUM_ ) ; if ( isNegative ( ) ) { return NaN ; } double x = NUM_ / Math . sqrt ( hi ) ; double ax = hi * x ; DD axdd = valueOf ( ax ) ; DD diffSq = this . subtract ( axdd . sqr ( ) ) ; double d2 = diffSq . hi * ( x * NUM_ ) ; return axdd . add ( d2 ) ; }
public SelectionInputDialog ( Window owner , String key , Collection < T > selectionValues , T initialSelectionValue , InputValidator < T > inputValidator , Object ... keyArguments ) { super ( owner , STR_ + key , ModalityType . APPLICATION_MODAL , keyArguments ) ; this . inputValidator = inputValidator ; this . okButton = makeOkButton ( ) ; for ( T selectionValue : selectionValues ) { comboBox . addItem ( selectionValue ) ; } comboBox . setSelectedItem ( initialSelectionValue ) ; initGui ( ) ; }
public static void validateServiceName ( String serviceName ) { if ( serviceName == null || serviceName . length ( ) == NUM_ ) { throw new IllegalArgumentException ( LocalizedStrings . DLockService_LOCK_SERVICE_NAME_MUST_NOT_BE_NULL_OR_EMPTY . toLocalizedString ( ) ) ; } for ( int i = NUM_ ; i < reservedNames . length ; i ++ ) { if ( serviceName . startsWith ( reservedNames [ i ] ) ) { throw new IllegalArgumentException ( LocalizedStrings . DLockService_SERVICE_NAMED_0_IS_RESERVED_FOR_INTERNAL_USE_ONLY . toLocalizedString ( serviceName ) ) ; } } }
@ Override public boolean canUndo ( ) { return ( ( DataSortedTableModel ) m_TableData . getModel ( ) ) . canUndo ( ) ; }
public void quickSortFromTo ( int from , int to , java . util . Comparator c ) { if ( size == NUM_ ) return ; checkRangeFromTo ( from , to , size ) ; cern . colt . Sorting . quickSort ( elements , from , to + NUM_ , c ) ; }
public byte [ ] toByteArray ( ) { int k = ( ( mDegree - NUM_ ) > > NUM_ ) + NUM_ ; byte [ ] result = new byte [ k ] ; int i ; for ( i = NUM_ ; i < k ; i ++ ) { result [ k - i - NUM_ ] = ( byte ) ( ( mPol [ i > > > NUM_ ] & ( NUM_ << ( ( i & NUM_ ) << NUM_ ) ) ) > > > ( ( i & NUM_ ) << NUM_ ) ) ; } return result ; }
@ Transactional public void unfollowTag ( final String followerId , final String followingTagId ) throws ServiceException { try { unfollow ( followerId , followingTagId , Follow . FOLLOWING_TYPE_C_TAG ) ; } catch ( final RepositoryException e ) { final String msg = STR_ + followerId + STR_ + followingTagId + STR_ ; LOGGER . log ( Level . ERROR , msg , e ) ; throw new ServiceException ( msg ) ; } }
@ Override public void fireUndoableEditHappened ( UndoableEdit edit ) { UndoableEditEvent event = null ; if ( listenerList . getListenerCount ( ) > NUM_ ) { Object [ ] listeners = listenerList . getListenerList ( ) ; for ( int i = listeners . length - NUM_ ; i >= NUM_ ; i -= NUM_ ) { if ( event == null ) { event = new UndoableEditEvent ( this , edit ) ; } if ( listeners [ i ] == UndoableEditListener . class ) { ( ( UndoableEditListener ) listeners [ i + NUM_ ] ) . undoableEditHappened ( event ) ; } } } }
public PlatformServices withServerKeepBinary ( ) { return srvKeepBinary ? this : new PlatformServices ( platformCtx , services , BOOL_ ) ; }
public static int hash ( int seed , char aChar ) { return ( PRIME * seed ) + ( int ) aChar ; }
public boolean naive_side_effect ( ) { return soot . PhaseOptions . getBoolean ( options , STR_ ) ; }
public String toString ( String pattern ) { if ( pattern == null ) { return toString ( ) ; } return DateTimeFormat . forPattern ( pattern ) . print ( this ) ; }
public void onScreenChange ( int currentScreen , int lastScreen ) { ImageView [ ] points = platformGridView . points ; for ( int i = NUM_ ; i < points . length ; i ++ ) { points [ i ] . setImageBitmap ( platformGridView . grayPoint ) ; } points [ currentScreen ] . setImageBitmap ( platformGridView . bluePoint ) ; }
public void releaseService ( BeanContextServices bcs , Object requestor , Object service ) { backBCS . releaseService ( BeanContextServicesSupport . this . getBeanContextServicesPeer ( ) , requestor , service ) ; }
public XIncludeAwareParserConfiguration ( SymbolTable symbolTable , XMLGrammarPool grammarPool , XMLComponentManager parentSettings ) { super ( symbolTable , grammarPool , parentSettings ) ; final String [ ] recognizedFeatures = { ALLOW_UE_AND_NOTATION_EVENTS , XINCLUDE_FIXUP_BASE_URIS , XINCLUDE_FIXUP_LANGUAGE } ; addRecognizedFeatures ( recognizedFeatures ) ; final String [ ] recognizedProperties = { XINCLUDE_HANDLER , NAMESPACE_CONTEXT } ; addRecognizedProperties ( recognizedProperties ) ; setFeature ( ALLOW_UE_AND_NOTATION_EVENTS , BOOL_ ) ; setFeature ( XINCLUDE_FIXUP_BASE_URIS , BOOL_ ) ; setFeature ( XINCLUDE_FIXUP_LANGUAGE , BOOL_ ) ; fNonXIncludeNSContext = new NamespaceSupport ( ) ; fCurrentNSContext = fNonXIncludeNSContext ; setProperty ( NAMESPACE_CONTEXT , fNonXIncludeNSContext ) ; }
public void addBreak ( ) { Item wordItem = relation . getTail ( ) ; if ( wordItem != null ) { FeatureSet featureSet = wordItem . getFeatures ( ) ; featureSet . setString ( STR_ , STR_ ) ; } }
@ Override protected void onRestart ( ) { super . onRestart ( ) ; Log . d ( TAG , STR_ ) ; }
public Object readObject ( AbstractHessianInput in , Object [ ] fields ) throws IOException { throw new UnsupportedOperationException ( toString ( ) ) ; }
public static Element addChildElement ( Element element , String childElementName , Document document ) { Element newElement = document . createElement ( childElementName ) ; element . appendChild ( newElement ) ; return newElement ; }
public void generateAtom ( XmlWriter w ) throws IOException { ArrayList < XmlWriter . Attribute > attrs = new ArrayList < XmlWriter . Attribute > ( NUM_ ) ; if ( scheme != null ) { attrs . add ( new XmlWriter . Attribute ( STR_ , scheme ) ) ; } if ( term != null ) { attrs . add ( new XmlWriter . Attribute ( STR_ , term ) ) ; } if ( label != null ) { attrs . add ( new XmlWriter . Attribute ( STR_ , label ) ) ; } if ( labelLang != null ) { attrs . add ( new XmlWriter . Attribute ( STR_ , labelLang ) ) ; } w . simpleElement ( Namespaces . atomNs , STR_ , attrs , null ) ; }
public RaptorState deepCopy ( ) { RaptorState state = this ; RaptorState ret = this . copy ( ) ; RaptorState copy = ret ; while ( state . previous != null ) { copy . previous = state . previous . copy ( ) ; copy . previous . previous = null ; state = state . previous ; copy = copy . previous ; } return ret ; }
private ChatFormat ( char character , boolean isStyled ) { this . formatCode = character ; this . isStyle = isStyled ; this . formatText = STR_ + character ; }
private boolean isGivenVolumeListSameAsInStorageGroup ( StorageSystem storage , CIMObjectPath groupPath , List < URI > volumeURIs ) throws WBEMException { Set < String > returnedNativeGuids = new HashSet < String > ( ) ; Set < String > givenNativeGuids = new HashSet < String > ( ) ; CloseableIterator < CIMObjectPath > volumePathItr = null ; try { List < Volume > volumes = _dbClient . queryObject ( Volume . class , volumeURIs ) ; volumePathItr = _helper . getAssociatorNames ( storage , groupPath , null , SmisConstants . CIM_STORAGE_VOLUME , null , null ) ; while ( volumePathItr . hasNext ( ) ) { returnedNativeGuids . add ( _helper . getVolumeNativeGuid ( volumePathItr . next ( ) ) ) ; } for ( Volume volume : volumes ) { givenNativeGuids . add ( volume . getNativeGuid ( ) ) ; } _log . info ( STR_ , returnedNativeGuids ) ; _log . info ( STR_ , givenNativeGuids ) ; Set < String > diff = Sets . difference ( returnedNativeGuids , givenNativeGuids ) ; return ( diff . isEmpty ( ) ) ; } finally { volumePathItr . close ( ) ; } }
public void pushDat11 ( long [ ] l ) { tmp . push ( l ) ; }
public static IPath toPath ( URI uri ) { if ( uri == null ) return null ; final String scheme = uri . getScheme ( ) ; if ( scheme == null || EFS . SCHEME_FILE . equals ( scheme ) ) return new Path ( uri . getSchemeSpecificPart ( ) ) ; return null ; }
public SendableVenueMessage . SendableVenueMessageBuilder address ( String address ) { this . address = address ; return this ; }
public static Object invokeDeclared ( Object obj , String method , Class [ ] paramClasses , Object [ ] params ) throws IllegalAccessException , NoSuchMethodException , InvocationTargetException { Method m = obj . getClass ( ) . getDeclaredMethod ( method , paramClasses ) ; m . setAccessible ( BOOL_ ) ; return m . invoke ( obj , params ) ; }
public static double sampleSkew ( DoubleArrayList data , double mean , double sampleVariance ) { return sampleSkew ( data . size ( ) , moment ( data , NUM_ , mean ) , sampleVariance ) ; }
public AdapterPath append ( @ NonNull AdapterPathSegment segment ) { mSegments . add ( segment ) ; return this ; }
public boolean isPaused ( ) { return paused ; }
public boolean containsRuleActionId ( String ruleActionId ) { return getAggregationMap ( ) . containsKey ( ruleActionId ) ; }
public Range ( String str ) throws NumberFormatException { if ( str . indexOf ( STR_ ) != str . lastIndexOf ( STR_ ) ) { throw new Error ( STR_ ) ; } if ( str . substring ( NUM_ ) . contains ( STR_ ) ) { String [ ] vals = str . split ( STR_ ) ; this . min = Double . parseDouble ( vals [ NUM_ ] ) ; this . max = Double . parseDouble ( vals [ NUM_ ] ) ; } else { this . min = this . max = Double . parseDouble ( str ) ; } checkRangeValidity ( min , max ) ; }
public void updateDatabaseUploadResult ( RemoteOperationResult uploadResult , UploadFileOperation upload ) { Log_OC . d ( TAG , STR_ + uploadResult + STR_ + upload ) ; if ( uploadResult . isCancelled ( ) ) { removeUpload ( upload . getAccount ( ) . name , upload . getRemotePath ( ) ) ; } else { String localPath = ( FileUploader . LOCAL_BEHAVIOUR_MOVE == upload . getLocalBehaviour ( ) ) ? upload . getStoragePath ( ) : null ; if ( uploadResult . isSuccess ( ) ) { updateUploadStatus ( upload . getOCUploadId ( ) , UploadStatus . UPLOAD_SUCCEEDED , UploadResult . UPLOADED , upload . getRemotePath ( ) , localPath ) ; } else { updateUploadStatus ( upload . getOCUploadId ( ) , UploadStatus . UPLOAD_FAILED , UploadResult . fromOperationResult ( uploadResult ) , upload . getRemotePath ( ) , localPath ) ; } } }
protected void writeImage ( Element elem ) throws IOException { }
public boolean isEnableNetworkLogging ( ) { return enableNetworkLogging ; }
public void startClientWithProperties ( ) throws InterruptedException { System . setProperty ( STR_ , STR_ ) ; C2monServiceGateway . startC2monClientSynchronous ( ) ; ClientCommandTag < Boolean > commandTag = C2monServiceGateway . getCommandManager ( ) . getCommandTag ( NUM_ ) ; assertNotNull ( commandTag . getName ( ) ) ; assertTrue ( ! commandTag . getName ( ) . equalsIgnoreCase ( STR_ ) ) ; assertNotNull ( commandTag . getProcessId ( ) ) ; assertNotNull ( commandTag . getHardwareAddress ( ) ) ; }
public static boolean connect ( ) { boolean success = BOOL_ ; try { Connection connRW = getConnectionRW ( ) ; if ( connRW != null ) { s_cc . readInfo ( connRW ) ; connRW . close ( ) ; } Connection connRO = getConnectionRO ( ) ; if ( connRO != null ) { connRO . close ( ) ; } Connection connID = getConnectionID ( ) ; if ( connID != null ) { connID . close ( ) ; } success = ( ( connRW != null ) && ( connRO != null ) && ( connID != null ) ) ; } catch ( Exception e ) { System . err . println ( STR_ + e . getLocalizedMessage ( ) ) ; e . printStackTrace ( ) ; success = BOOL_ ; } return success ; }
@ SuppressWarnings ( STR_ ) public static < T extends View > T findViewById ( View parentView , int id ) { T view = null ; View genericView = parentView . findViewById ( id ) ; try { view = ( T ) ( genericView ) ; } catch ( Exception ex ) { String message = STR_ + id + STR_ + view . getClass ( ) + STR_ + genericView . getClass ( ) + STR_ ; Log . e ( STR_ , message ) ; throw new ClassCastException ( message ) ; } return view ; }
private void validateElements ( Class type , Order order ) throws Exception { if ( order != null ) { for ( String name : order . elements ( ) ) { if ( ! isElement ( name ) ) { throw new ElementException ( STR_ , name , type ) ; } } } }
public static void logOnLevel ( Logger logger , final Level level ) { logger . setLevel ( level ) ; for ( Handler handler : logger . getHandlers ( ) ) { handler . setLevel ( level ) ; if ( handler instanceof ConsoleHandler ) { handler . setFormatter ( new ShortFormatter ( ) ) ; } } }
private boolean checkForAllFailedHosts ( ) { boolean allbad = BOOL_ ; for ( int m_remoteHostsStatu : m_remoteHostsStatus ) { if ( m_remoteHostsStatu != CONNECTION_FAILED ) { allbad = BOOL_ ; break ; } } if ( allbad ) { m_plottingAborted = BOOL_ ; notifyListeners ( BOOL_ , BOOL_ , BOOL_ , STR_ + STR_ ) ; } return allbad ; }
void installFilter ( final Filter filter ) { synchronized ( stateLock ) { GrizzlyUtils . addFilterToConnection ( filter , connection ) ; } }
LineChart ( ) { }
public synchronized void removeConsumer ( ImageConsumer ic ) { ics . removeElement ( ic ) ; }
@ Override public UUID sessionId ( ) { if ( sessionId == null ) sessionId = UUID . randomUUID ( ) ; return sessionId ; }
void indent ( ) { lmargin ++ ; }
public Shell shell ( ) { return shell ; }
@ Override public void afterDataFlush ( PageServiceImpl tableService , int sequenceFlush ) { super . afterDataFlush ( tableService , sequenceFlush ) ; tableService . compareAndSetBlobPage ( this , _stub ) ; ArrayList < TempBuffer > buffers = _buffers ; _buffers = null ; if ( buffers != null ) { for ( TempBuffer buffer : buffers ) { buffer . free ( ) ; } } }
public synchronized void removeFlavorListener ( FlavorListener listener ) { if ( listener == null || flavorListeners == null ) { return ; } flavorListeners . remove ( listener ) ; }
public boolean isSetStore ( ) { return this . store != null ; }
public final void log ( ) { if ( this . values != null ) { for ( FilteredDataTagValue tagValue : values ) { tagValue . log ( ) ; } } }
private static String joinPath ( String path1 , String path2 ) { File file1 = new File ( path1 ) ; File file2 = new File ( file1 , path2 ) ; return file2 . getPath ( ) ; }
public static Object evaluateOutputEval ( Draft3Job job , Object output , Object binding ) throws Draft3ExpressionException { Object outputEval = getOutputEval ( binding ) ; return Draft3ExpressionResolver . resolve ( outputEval , job , output ) ; }
protected void addReactionPropertyDescriptor ( Object object ) { itemPropertyDescriptors . add ( createItemPropertyDescriptor ( ( ( ComposeableAdapterFactory ) adapterFactory ) . getRootAdapterFactory ( ) , getResourceLocator ( ) , getString ( STR_ ) , getString ( STR_ , STR_ , STR_ ) , SexecPackage . Literals . TRACE_REACTION_WILL_FIRE__REACTION , BOOL_ , BOOL_ , BOOL_ , null , null , null ) ) ; }
public Sequence ( Class < ? > type1 , Class < ? > type2 ) { super ( type2 , type1 , type2 ) ; }
public void addPatterns ( SiteList siteList , int from , int to , int every ) { if ( siteList == null ) { return ; } if ( taxonList == null ) { taxonList = siteList ; patternLength = taxonList . getTaxonCount ( ) ; } if ( dataType == null ) { dataType = siteList . getDataType ( ) ; } else if ( dataType != siteList . getDataType ( ) ) { throw new IllegalArgumentException ( STR_ ) ; } if ( from < NUM_ ) from = NUM_ ; if ( to <= NUM_ ) to = siteList . getSiteCount ( ) - NUM_ ; if ( every <= NUM_ ) every = NUM_ ; for ( int i = from ; i <= to ; i += every ) { int [ ] pattern = siteList . getSitePattern ( i ) ; if ( pattern != null && ( ! isInvariant ( pattern ) || ( ! isGapped ( pattern ) && ! isAmbiguous ( pattern ) && ! isUnknown ( pattern ) ) ) ) { addPattern ( pattern , NUM_ ) ; } } }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) static public void createDbFromSqlStatements ( Context context , String dbName , int dbVersion , String sqlStatements ) { SQLiteDatabase db = context . openOrCreateDatabase ( dbName , NUM_ , null ) ; String [ ] statements = TextUtils . split ( sqlStatements , STR_ ) ; for ( String statement : statements ) { if ( TextUtils . isEmpty ( statement ) ) continue ; db . execSQL ( statement ) ; } db . setVersion ( dbVersion ) ; db . close ( ) ; }
public Instant withMillis ( long newMillis ) { return ( newMillis == iMillis ? this : new Instant ( newMillis ) ) ; }
@ Override public void rangeChanged ( ColorMap cMap ) { Landscape . getInstance ( ) . markDirty ( DirtyType . RenderState ) ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public boolean isHeaderList ( ) { return BOOL_ ; }
@ DSComment ( STR_ ) @ DSSafe ( DSCat . SAFE_LIST ) @ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public void append ( int key , boolean value ) { if ( mSize != NUM_ && key <= mKeys [ mSize - NUM_ ] ) { put ( key , value ) ; return ; } int pos = mSize ; if ( pos >= mKeys . length ) { int n = ArrayUtils . idealIntArraySize ( pos + NUM_ ) ; int [ ] nkeys = new int [ n ] ; boolean [ ] nvalues = new boolean [ n ] ; System . arraycopy ( mKeys , NUM_ , nkeys , NUM_ , mKeys . length ) ; System . arraycopy ( mValues , NUM_ , nvalues , NUM_ , mValues . length ) ; mKeys = nkeys ; mValues = nvalues ; } mKeys [ pos ] = key ; mValues [ pos ] = value ; mSize = pos + NUM_ ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public static void onReceivedCredentials ( LoadListener loader , String host , String realm , String username , String password ) { CallbackProxy proxy = loader . getFrame ( ) . getCallbackProxy ( ) ; proxy . onReceivedHttpAuthCredentials ( host , realm , username , password ) ; }
public boolean updateDownload ( DownloadInfo di ) { ContentValues cv = new ContentValues ( ) ; cv . put ( DownloadColumns . INDEX , di . mIndex ) ; cv . put ( DownloadColumns . FILENAME , di . mFileName ) ; cv . put ( DownloadColumns . URI , di . mUri ) ; cv . put ( DownloadColumns . ETAG , di . mETag ) ; cv . put ( DownloadColumns . TOTALBYTES , di . mTotalBytes ) ; cv . put ( DownloadColumns . CURRENTBYTES , di . mCurrentBytes ) ; cv . put ( DownloadColumns . LASTMOD , di . mLastMod ) ; cv . put ( DownloadColumns . STATUS , di . mStatus ) ; cv . put ( DownloadColumns . CONTROL , di . mControl ) ; cv . put ( DownloadColumns . NUM_FAILED , di . mNumFailed ) ; cv . put ( DownloadColumns . RETRY_AFTER , di . mRetryAfter ) ; cv . put ( DownloadColumns . REDIRECT_COUNT , di . mRedirectCount ) ; return updateDownload ( di , cv ) ; }
public final void yyclose ( ) throws java . io . IOException { zzAtEOF = BOOL_ ; zzEndRead = zzStartRead ; if ( zzReader != null ) zzReader . close ( ) ; }
public final void testPSSParameterSpec0202 ( ) { try { new PSSParameterSpec ( null , STR_ , MGF1ParameterSpec . SHA1 , NUM_ , NUM_ ) ; fail ( STR_ ) ; } catch ( NullPointerException e ) { } }
public static ByteList Namespaces ( ByteList bytes , IntList namespaces ) { for ( int i = NUM_ ; i < namespaces . size ( ) ; i ++ ) { bytes = Int ( bytes , namespaces . get ( i ) ) ; } return bytes ; }
private Double parseCurrentPrecipitationProbability ( JSONObject response ) throws JSONException { JSONObject currently = response . getJSONObject ( STR_ ) ; return currently . getDouble ( STR_ ) ; }
private ZonedDateTime resolveLocal ( LocalDateTime newDateTime ) { return ofLocal ( newDateTime , zone , offset ) ; }
public boolean contains ( int integer ) { for ( int i = NUM_ ; i < size ; i ++ ) { if ( data [ i ] == integer ) return BOOL_ ; } return BOOL_ ; }
private static void addAllComplexTypeChildren ( CarbonDimension dimension , StringBuilder dimString , String parent ) { dimString . append ( dimension . getColName ( ) + CarbonCommonConstants . COLON_SPC_CHARACTER + dimension . getDataType ( ) + CarbonCommonConstants . COLON_SPC_CHARACTER + parent + CarbonCommonConstants . COLON_SPC_CHARACTER + dimension . getColumnId ( ) + CarbonCommonConstants . HASH_SPC_CHARACTER ) ; for ( int i = NUM_ ; i < dimension . getNumberOfChild ( ) ; i ++ ) { CarbonDimension childDim = dimension . getListOfChildDimensions ( ) . get ( i ) ; if ( childDim . getNumberOfChild ( ) > NUM_ ) { addAllComplexTypeChildren ( childDim , dimString , dimension . getColName ( ) ) ; } else { dimString . append ( childDim . getColName ( ) + CarbonCommonConstants . COLON_SPC_CHARACTER + childDim . getDataType ( ) + CarbonCommonConstants . COLON_SPC_CHARACTER + dimension . getColName ( ) + CarbonCommonConstants . COLON_SPC_CHARACTER + childDim . getColumnId ( ) + CarbonCommonConstants . COLON_SPC_CHARACTER + childDim . getOrdinal ( ) + CarbonCommonConstants . HASH_SPC_CHARACTER ) ; } } }
public DefaultGigaMap ( IMap map , TransactionProvider txProvider , ExceptionTranslator exTranslator , int defaultIsolationLevel ) { this . map = map ; this . lockManager = new LockManager ( map ) ; this . txProvider = txProvider ; this . exTranslator = exTranslator ; switch ( defaultIsolationLevel ) { case TransactionDefinition . ISOLATION_DEFAULT : this . defaultIsolationLevel = ReadModifiers . REPEATABLE_READ ; break ; case TransactionDefinition . ISOLATION_READ_UNCOMMITTED : this . defaultIsolationLevel = ReadModifiers . DIRTY_READ ; break ; case TransactionDefinition . ISOLATION_READ_COMMITTED : this . defaultIsolationLevel = ReadModifiers . READ_COMMITTED ; break ; case TransactionDefinition . ISOLATION_REPEATABLE_READ : this . defaultIsolationLevel = ReadModifiers . REPEATABLE_READ ; break ; case TransactionDefinition . ISOLATION_SERIALIZABLE : throw new IllegalArgumentException ( STR_ ) ; } }
public FriendsSearchQuery ( VkApiClient client , UserActor actor , int userId ) { super ( client , STR_ , SearchResponse . class ) ; accessToken ( actor . getAccessToken ( ) ) ; userId ( userId ) ; }
@ Override public Object toObject ( ByteBuffer content , Type targetType ) { return Charset . defaultCharset ( ) . decode ( content ) . toString ( ) ; }
public synchronized int checkExceptionThreshold ( String queueid ) { FetchItemQueue fiq = queues . get ( queueid ) ; if ( fiq == null ) { return NUM_ ; } if ( fiq . getQueueSize ( ) == NUM_ ) { return NUM_ ; } int excCount = fiq . incrementExceptionCounter ( ) ; if ( maxExceptionsPerQueue != - NUM_ && excCount >= maxExceptionsPerQueue ) { int deleted = fiq . emptyQueue ( ) ; LOG . info ( STR_ + queueid + STR_ + deleted + STR_ + excCount + STR_ ) ; for ( int i = NUM_ ; i < deleted ; i ++ ) { totalSize . decrementAndGet ( ) ; } return deleted ; } return NUM_ ; }
public boolean showWindow ( Container c ) { boolean result ; ChildFrameMDI mdiFrame ; ChildFrameSDI sdiFrame ; if ( c != null ) { try { if ( c instanceof ChildFrameMDI ) { mdiFrame = ( ChildFrameMDI ) c ; mdiFrame . setIcon ( BOOL_ ) ; mdiFrame . toFront ( ) ; createTitle ( mdiFrame . getTitle ( ) ) ; } else if ( c instanceof ChildFrameSDI ) { sdiFrame = ( ChildFrameSDI ) c ; sdiFrame . setExtendedState ( JFrame . NORMAL ) ; sdiFrame . toFront ( ) ; createTitle ( sdiFrame . getTitle ( ) ) ; } } catch ( Exception e ) { e . printStackTrace ( ) ; } result = BOOL_ ; } else { result = BOOL_ ; } return result ; }
public void pad ( int n ) { if ( n > x . length ) { double [ ] tmp = new double [ n ] ; pad ( x , tmp ) ; x = tmp ; } }
private void drawLineWithTranslate ( final Graphics2D graphics , final Line2D line , final double xOffset , final double yOffset , final double scale ) { final Point2D point1 = new Point2D . Double ( ( line . getP1 ( ) . getX ( ) - xOffset ) * scale , ( line . getP1 ( ) . getY ( ) - yOffset ) * scale ) ; final Point2D point2 = new Point2D . Double ( ( line . getP2 ( ) . getX ( ) - xOffset ) * scale , ( line . getP2 ( ) . getY ( ) - yOffset ) * scale ) ; if ( graphics . getClip ( ) . contains ( point1 ) || graphics . getClip ( ) . contains ( point2 ) ) { graphics . draw ( new Line2D . Double ( point1 , point2 ) ) ; } }
public void loadEntities ( OperationGroup updateGroup , OperationGroup deleteGroup , OperationGroup dependsOnGroup ) throws SortServiceProviderException , SortQueryException { BatchEntityLoader batchLoader = new BatchEntityLoader ( ) ; LOG . debug ( STR_ ) ; OperationGroup mergedAndOptimized = dependsOnGroup . mergedCopy ( updateGroup , deleteGroup . reverse ( ) ) . optimizedForInsertCopy ( ) ; batchLoader . addEntities ( mergedAndOptimized . getEntities ( ) ) ; LOG . debug ( STR_ ) ; LOG . debug ( STR_ ) ; batchLoader . load ( ) ; }
public EventException ( String message ) { super ( message ) ; cause = null ; }
public void addOfflineProject ( final IProject project ) { Check . notNull ( project , STR_ ) ; log . debug ( MessageFormat . format ( STR_ , project . getName ( ) ) ) ; waitForManagerStartup ( ) ; try { project . setPersistentProperty ( REPOSITORY_STATUS_KEY , REPOSITORY_STATUS_OFFLINE_VALUE ) ; } catch ( final CoreException e ) { log . error ( MessageFormat . format ( STR_ , project . getName ( ) ) , e ) ; } synchronized ( projectDataLock ) { ProjectRepositoryData projectData = projectDataMap . get ( project ) ; if ( projectData != null ) { log . error ( MessageFormat . format ( STR_ , project . getName ( ) ) ) ; CodeMarkerDispatch . dispatch ( FINISH_PROJECT_ADDITION ) ; return ; } projectData = new ProjectRepositoryData ( ) ; projectData . setStatus ( ProjectRepositoryStatus . OFFLINE ) ; projectDataMap . put ( project , projectData ) ; } log . info ( MessageFormat . format ( STR_ , project . getName ( ) ) ) ; CodeMarkerDispatch . dispatch ( FINISH_PROJECT_ADDITION ) ; }
public static boolean reflectionEquals ( Object lhs , Object rhs , boolean testTransients , Class reflectUpToClass ) { return reflectionEquals ( lhs , rhs , testTransients , reflectUpToClass , null ) ; }
private void parseText ( String text ) { this . progressText = STR_ ; this . progressAddValue = BOOL_ ; if ( text != null ) { if ( text . contains ( STR_ ) ) { text = text . replace ( STR_ , STR_ ) ; this . progressAddValue = BOOL_ ; } this . progressText = text ; } this . paint . getTextBounds ( this . progressText , NUM_ , this . progressText . length ( ) , this . textBounds ) ; }
public void keyPressed ( final KeyEvent e ) { int keycode = e . getKeyCode ( ) ; switch ( keycode ) { case KeyEvent . VK_U : workspace . iterate ( ) ; break ; default : break ; } }
private void minimizeSelectors ( List < RuleWrapper < RuleType > > rules , int startIndex ) { Location toBeMatchedRuleLocation = model . getLocationInConfig ( rule , SELECTOR_FIELD_NAME ) ; for ( Iterator < String > iter = selectors . iterator ( ) ; iter . hasNext ( ) ; ) { String selector = iter . next ( ) ; for ( int i = startIndex ; i < rules . size ( ) ; i ++ ) { RuleWrapper < RuleType > ruleWrapper = rules . get ( i ) ; if ( isSubsumed ( selector , ruleWrapper . selectors ) ) { Location matchingRuleLocation = model . getLocationInConfig ( ruleWrapper . rule , SELECTOR_FIELD_NAME ) ; if ( ! maintainSelectorMinimizationBugExperimentEnabled ( ) && isSameYamlFile ( matchingRuleLocation , toBeMatchedRuleLocation ) ) { model . getDiagCollector ( ) . addDiag ( Diag . error ( matchingRuleLocation , STR_ + STR_ , ruleWrapper . getUnflattenedSelector ( ) , matchingRuleLocation . getDisplayString ( ) , selector , toBeMatchedRuleLocation . getDisplayString ( ) ) ) ; } iter . remove ( ) ; break ; } } } }
public static void addShareAcl ( String aclURL , ShareACLForm shareACL , String formAccessControlList ) { String fileSystem = null ; String shareName = null ; if ( StringUtils . isNotBlank ( aclURL ) ) { String [ ] parts = aclURL . split ( STR_ ) ; if ( parts . length == NUM_ ) { fileSystem = parts [ NUM_ ] ; shareName = parts [ NUM_ ] ; } } if ( formAccessControlList == null || STR_ . equals ( formAccessControlList ) ) { flash . error ( MessagesUtils . get ( STR_ ) , null ) ; listAcl ( fileSystem , shareName ) ; } FileCifsShareACLUpdateParams input = createCifsShareAclParams ( formAccessControlList ) ; ViPRCoreClient client = BourneUtil . getViprClient ( ) ; try { client . fileSystems ( ) . updateShareACL ( uri ( fileSystem ) , shareName , input ) ; } catch ( ServiceErrorException e ) { flash . error ( e . getMessage ( ) , null ) ; listAcl ( fileSystem , shareName ) ; } flash . success ( MessagesUtils . get ( ADDED ) ) ; listAcl ( fileSystem , shareName ) ; }
public boolean startScoUsingVirtualVoiceCall ( BluetoothDevice device ) { if ( DBG ) log ( STR_ ) ; if ( mService != null && isEnabled ( ) && isValidDevice ( device ) ) { try { return mService . startScoUsingVirtualVoiceCall ( device ) ; } catch ( RemoteException e ) { Log . e ( TAG , e . toString ( ) ) ; } } else { Log . w ( TAG , STR_ ) ; if ( DBG ) Log . d ( TAG , Log . getStackTraceString ( new Throwable ( ) ) ) ; } return BOOL_ ; }
private void checkValid ( String authority ) throws Exception { FileSystem fs = fileSystem ( authority , tcp ) ; assert fs . exists ( new Path ( PATH . toString ( ) ) ) ; }
@ SuppressWarnings ( STR_ ) public X509CertPath ( List < ? extends Certificate > certs ) throws CertificateException { super ( STR_ ) ; for ( Object obj : certs ) { if ( obj instanceof X509Certificate == BOOL_ ) { throw new CertificateException ( STR_ + obj . getClass ( ) . getName ( ) ) ; } } this . certs = Collections . unmodifiableList ( new ArrayList < X509Certificate > ( ( List < X509Certificate > ) certs ) ) ; }
public OverpassQuery boundingBox ( double southernLat , double westernLon , double northernLat , double easternLon ) { builder . append ( String . format ( Locale . US , STR_ , southernLat , westernLon , northernLat , easternLon ) ) ; return this ; }
@ Override protected Object clone ( ) throws CloneNotSupportedException { throw new CloneNotSupportedException ( ) ; }
private void parseJars ( String [ ] files ) throws IOException { if ( files == null ) { return ; } String currentJar = null ; for ( int i = NUM_ ; i < files . length ; i ++ ) { currentJar = files [ i ] ; ZipFile zrf = new ZipFile ( currentJar . replace ( STR_ , File . separatorChar ) ) ; Enumeration < ? extends ZipEntry > entries = zrf . entries ( ) ; while ( entries . hasMoreElements ( ) ) { ZipEntry entry = entries . nextElement ( ) ; String fileName = entry . getName ( ) ; if ( fileName . equals ( STR_ ) || fileName . equals ( INDEX_NAME ) || fileName . equals ( JarFile . MANIFEST_NAME ) ) continue ; if ( ! metaInfFilenames || ! fileName . startsWith ( STR_ ) ) { add ( fileName , currentJar ) ; } else if ( ! entry . isDirectory ( ) ) { addMapping ( fileName , currentJar ) ; } } zrf . close ( ) ; } }
public Assignment copy ( ) { Assignment c = new Assignment ( this ) ; c . cachedHash = cachedHash ; return c ; }
public void move ( RectF rect , float x , float y , RectF bounds , int viewWidth , int viewHeight , float snapMargin , boolean fixedAspectRatio , float aspectRatio ) { float adjX = x + mTouchOffset . x ; float adjY = y + mTouchOffset . y ; if ( mType == Type . CENTER ) { moveCenter ( rect , adjX , adjY , bounds , viewWidth , viewHeight , snapMargin ) ; } else { if ( fixedAspectRatio ) { moveSizeWithFixedAspectRatio ( rect , adjX , adjY , bounds , viewWidth , viewHeight , snapMargin , aspectRatio ) ; } else { moveSizeWithFreeAspectRatio ( rect , adjX , adjY , bounds , viewWidth , viewHeight , snapMargin ) ; } } }
public static void dropTable ( SQLiteDatabase db , boolean ifExists ) { String sql = STR_ + ( ifExists ? STR_ : STR_ ) + STR_ ; db . execSQL ( sql ) ; }
public KMLStyleUrl ( String namespaceURI ) { super ( namespaceURI ) ; }
@ Override public boolean input ( Instance instance ) throws Exception { if ( getInputFormat ( ) == null ) { throw new IllegalStateException ( STR_ ) ; } if ( m_NewBatch ) { resetQueue ( ) ; m_NewBatch = BOOL_ ; } if ( outputFormatPeek ( ) != null ) { convertInstance ( instance ) ; return BOOL_ ; } bufferInput ( instance ) ; return BOOL_ ; }
public static void main ( String [ ] args ) throws IOException { boolean enableOutput = BOOL_ ; boolean outputToFile = BOOL_ ; String inputFolder = STR_ ; String outputFolder = STR_ ; String workload = STR_ ; String vmAllocationPolicy = STR_ ; String vmSelectionPolicy = STR_ ; String parameter = STR_ ; new RandomRunner ( enableOutput , outputToFile , inputFolder , outputFolder , workload , vmAllocationPolicy , vmSelectionPolicy , parameter ) ; }
public static Protocol detect ( InputStream inputStream ) throws IOException { if ( ! inputStream . markSupported ( ) ) { throw new IllegalArgumentException ( STR_ ) ; } byte [ ] packet = new byte [ NUM_ ] ; inputStream . mark ( packet . length ) ; int read = inputStream . read ( packet ) ; inputStream . reset ( ) ; if ( read < packet . length ) { return Protocol . TOO_SMALL ; } else if ( ProtocolDetector . isHttpProtocol ( packet ) ) { return Protocol . HTTP ; } else if ( ProtocolDetector . isTlsProtocol ( packet ) ) { return Protocol . TLS ; } else { return Protocol . OTHER ; } }
public void onSuccess ( int statusCode , Header [ ] headers , JSONArray response ) { }
public AtomicDoubleArray ( int length ) { larray = new AtomicLongArray ( length ) ; long ZERO = Double . doubleToRawLongBits ( NUM_ ) ; for ( int i = NUM_ ; i < length ; i ++ ) larray . set ( i , ZERO ) ; }
private String saveFileOnDisk ( String filePathToSave , String fileContent ) throws IOException { File file = new File ( filePathToSave ) ; Files . createParentDirs ( file ) ; Files . write ( fileContent , file , Charset . defaultCharset ( ) ) ; return filePathToSave ; }
public T caseDataTypeMappingModel ( DataTypeMappingModel object ) { return null ; }
public long nextLong ( long least , long bound ) { if ( least >= bound ) throw new IllegalArgumentException ( ) ; return nextLong ( bound - least ) + least ; }
public static ConstraintsParameters loadPolicyData ( InputStream policyDataStream ) { if ( policyDataStream != null ) { return load ( policyDataStream ) ; } if ( ( defaultPolicyConstraintsLocation != null ) && ! defaultPolicyConstraintsLocation . isEmpty ( ) ) { return load ( defaultPolicyConstraintsLocation ) ; } return null ; }
private static Version readVersion ( BitMatrix bitMatrix ) throws FormatException { int numRows = bitMatrix . getHeight ( ) ; int numColumns = bitMatrix . getWidth ( ) ; return Version . getVersionForDimensions ( numRows , numColumns ) ; }
public boolean bool ( XPathContext xctxt ) throws javax . xml . transform . TransformerException { return ( m_left . bool ( xctxt ) || m_right . bool ( xctxt ) ) ; }
public static Drawable bitmapToDrawable ( @ SuppressWarnings ( STR_ ) Context mContext , Bitmap bitmap ) { return new BitmapDrawable ( bitmap ) ; }
static int popLength ( InputStream stream ) { byte [ ] lengthBytes = new byte [ Integer . SIZE / Byte . SIZE ] ; try { stream . read ( lengthBytes ) ; } catch ( IOException e ) { Log . e ( TAG , STR_ + e ) ; return - NUM_ ; } ByteBuffer buffer = ByteBuffer . wrap ( lengthBytes ) ; buffer . order ( ByteOrder . BIG_ENDIAN ) ; return buffer . getInt ( ) ; }
private double [ ] [ ] laggedMatrix ( double [ ] x , int lag ) { double [ ] [ ] laggedMatrix = new double [ x . length - lag + NUM_ ] [ lag ] ; for ( int j = NUM_ ; j < lag ; j ++ ) { for ( int i = NUM_ ; i < laggedMatrix . length ; i ++ ) { laggedMatrix [ i ] [ j ] = x [ lag - j - NUM_ + i ] ; } } return laggedMatrix ; }
private static byte [ ] [ ] rotateArray ( byte [ ] [ ] bitarray ) { byte [ ] [ ] temp = new byte [ bitarray [ NUM_ ] . length ] [ bitarray . length ] ; for ( int ii = NUM_ ; ii < bitarray . length ; ii ++ ) { int inverseii = bitarray . length - ii - NUM_ ; for ( int jj = NUM_ ; jj < bitarray [ NUM_ ] . length ; jj ++ ) { temp [ jj ] [ inverseii ] = bitarray [ ii ] [ jj ] ; } } return temp ; }
public TransactionAlreadyExistsException ( String message , Throwable cause ) { super ( message , cause ) ; }
public static final char toOtherCase ( char c ) { int i = c ; final int A = STR_ ; final int Z = STR_ ; final int a = STR_ ; final int z = STR_ ; final int SHIFT = a - A ; if ( i < A ) { return c ; } else if ( i <= Z ) { return ( char ) ( i + SHIFT ) ; } else if ( i < a ) { return c ; } else if ( i <= z ) { return ( char ) ( i - SHIFT ) ; } else { return c ; } }
public void fillMinified ( final Map < String , Object > dataModel ) { switch ( Latkes . getRuntimeMode ( ) ) { case DEVELOPMENT : dataModel . put ( Common . MINI_POSTFIX , STR_ ) ; break ; case PRODUCTION : dataModel . put ( Common . MINI_POSTFIX , Common . MINI_POSTFIX_VALUE ) ; break ; default : throw new AssertionError ( ) ; } }
public void handleDOMSubtreeModifiedEvent ( MutationEvent evt ) { if ( laidoutText == null ) { computeLaidoutText ( ctx , e , getTextNode ( ) ) ; } }
public void writeDetails ( javax . xml . namespace . QName qname , org . apache . axis . encoding . SerializationContext context ) throws java . io . IOException { context . serialize ( qname , null , this ) ; }
public static String reverseUrl ( String urlString ) throws MalformedURLException { return reverseUrl ( new URL ( urlString ) ) ; }
public static ICreateFrom create ( GridTab mTab ) { int AD_Table_ID = Env . getContextAsInt ( Env . getCtx ( ) , mTab . getWindowNo ( ) , STR_ ) ; ICreateFrom retValue = null ; Class < ? extends ICreateFrom > cl = s_registeredClasses . get ( AD_Table_ID ) ; if ( cl != null ) { try { java . lang . reflect . Constructor < ? extends ICreateFrom > ctor = cl . getConstructor ( GridTab . class ) ; retValue = ctor . newInstance ( mTab ) ; } catch ( Throwable e ) { s_log . log ( Level . SEVERE , e . getLocalizedMessage ( ) , e ) ; return null ; } } if ( retValue == null ) { s_log . info ( STR_ + AD_Table_ID ) ; return null ; } return retValue ; }
public static void updateServerTimestampHeader ( MultiMap headers ) { String serverTimestamp = headers . get ( SERVER_TIMESTAMP_HEADER ) ; if ( serverTimestamp == null ) { String nowAsISO = dfISO8601 . print ( Instant . now ( ) ) ; log . debug ( STR_ + SERVER_TIMESTAMP_HEADER + STR_ + nowAsISO + STR_ + SERVER_TIMESTAMP_HEADER + STR_ ) ; headers . set ( SERVER_TIMESTAMP_HEADER , nowAsISO ) ; } else { String updatedTimestamp = localizeTimestamp ( serverTimestamp ) ; if ( ! updatedTimestamp . equals ( serverTimestamp ) ) { log . debug ( STR_ + SERVER_TIMESTAMP_HEADER + STR_ + serverTimestamp + STR_ + updatedTimestamp ) ; headers . remove ( SERVER_TIMESTAMP_HEADER ) ; headers . set ( SERVER_TIMESTAMP_HEADER , updatedTimestamp ) ; } } }
private static double distance ( double x1 , double y1 , double x2 , double y2 ) { return Math . sqrt ( ( y2 - y1 ) * ( y2 - y1 ) + ( x2 - x1 ) * ( x2 - x1 ) ) ; }
synchronized void clueless ( ) throws Exception { synchronized ( this ) { this . wait ( ) ; } }
@ Override public Serializable disassemble ( Object value ) throws HibernateException { return ( String ) this . deepCopy ( value ) ; }
public final boolean add ( Node n ) { if ( pag . getTypeManager ( ) . castNeverFails ( n . getType ( ) , type ) ) { return fastAdd ( n ) ; } return BOOL_ ; }
private AttributeRule ( String name , Class c ) { this . name = name ; this . c = c ; this . optional = BOOL_ ; }
public ClientRequestHelper ( CoordinatorClient coordinatorClient ) { this ( coordinatorClient , DEFAULT_READ_TIMEOUT , DEFAULT_CONNECT_TIMEOUT ) ; }
public void testIdWithoutDotsOrSlashes ( ) { String jndiName = STR_ ; String propertyString = DatasourcePropertySet . JNDI_LOCATION + STR_ + jndiName ; DataSource ds = dataSourceConverter . fromPropertyString ( propertyString ) ; assertEquals ( jndiName , ds . getId ( ) ) ; }
private int detectErrorCode ( String errorMessage ) { final String error = errorMessage != null ? errorMessage : null ; if ( error == null ) { return NUM_ ; } if ( error . equals ( DAILY_TRANSACTION_LIMIT_EXCEEDED ) ) { return NUM_ ; } else if ( error . equals ( INVALID_API_KEY ) ) { return NUM_ ; } else { return NUM_ ; } }
@ Override public Object clone ( ) throws CloneNotSupportedException { return super . clone ( ) ; }
public synchronized void nextSolution ( final int nQueryHandle ) { if ( ! m_prologTable . containsKey ( new Integer ( nQueryHandle ) ) ) throw new JIPInvalidHandleException ( ) ; final AsyncWAMManager container = ( AsyncWAMManager ) m_prologTable . get ( new Integer ( nQueryHandle ) ) ; if ( container . isRunning ( ) ) { throw new JIPIsRunningException ( ) ; } notifyMore ( nQueryHandle ) ; synchronized ( container ) { container . next ( ) ; } }
public void testGetColumnType ( ) { int [ ] types = { Types . SMALLINT , Types . VARCHAR , Types . VARCHAR } ; try { for ( int i = NUM_ ; i < rsmd . getColumnCount ( ) ; i ++ ) { int type = rsmd . getColumnType ( i + NUM_ ) ; assertEquals ( types [ i ] , type ) ; } } catch ( SQLException e ) { fail ( STR_ + e . getMessage ( ) ) ; } try { rsmd . getColumnType ( NUM_ ) ; fail ( STR_ ) ; } catch ( SQLException e ) { } try { rsmd . getColumnType ( NUM_ ) ; fail ( STR_ ) ; } catch ( SQLException e ) { } }
public StoredField ( String name , byte [ ] value ) { super ( name , value , TYPE ) ; }
private void stopProtectionSystem ( ProtectionSystem protectionSystem ) throws InternalException { ProtectionController controller = getProtectionController ( protectionSystem . getSystemType ( ) ) ; controller . disconnect ( protectionSystem . getId ( ) ) ; }
public Boolean isConsolidationNeeded ( ) { return consolidationNeeded ; }
public QuicklookProduct ( fr . gael . dhus . database . object . Product product ) { super ( product ) ; }
public boolean remove ( Object o ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { return q . remove ( o ) ; } finally { lock . unlock ( ) ; } }
public static LinearRing [ ] toLinearRingArray ( Collection linearRings ) { LinearRing [ ] linearRingArray = new LinearRing [ linearRings . size ( ) ] ; return ( LinearRing [ ] ) linearRings . toArray ( linearRingArray ) ; }
protected int assertLineTerminates ( int c ) throws IOException , RDFParseException { c = readCodePoint ( ) ; c = skipWhitespace ( c ) ; if ( c == STR_ ) { } else { if ( c != - NUM_ && c != STR_ && c != STR_ ) { reportFatalError ( STR_ ) ; } } return c ; }
public DCDs ( ) { this ( NUM_ , BOOL_ ) ; }
public void testDoConfigureSetsDefaultPort ( ) throws Exception { configuration . configure ( container ) ; String config = configuration . getFileHandler ( ) . readTextFile ( configuration . getHome ( ) + STR_ , STR_ ) ; XMLAssert . assertXpathEvaluatesTo ( configuration . getPropertyValue ( ServletPropertySet . PORT ) , STR_ , config ) ; }
public static < E extends Comparable < E > > void doubleTree ( BinaryNode < E > node ) { if ( node == null ) return ; BinaryNode < E > newNode = new BinaryNode < > ( node . value , node . left , null ) ; node . left = newNode ; doubleTree ( newNode . left ) ; doubleTree ( node . right ) ; }
public static int stencil9 ( DoubleMatrix2D A , cern . colt . function . Double9Function function , int maxIterations , DoubleMatrix2DProcedure hasConverged , int convergenceIterations ) { DoubleMatrix2D B = A . copy ( ) ; if ( convergenceIterations <= NUM_ ) convergenceIterations = NUM_ ; if ( convergenceIterations % NUM_ != NUM_ ) convergenceIterations ++ ; int i = NUM_ ; while ( i < maxIterations ) { A . zAssign8Neighbors ( B , function ) ; B . zAssign8Neighbors ( A , function ) ; i = i + NUM_ ; if ( i % convergenceIterations == NUM_ && hasConverged != null ) { if ( hasConverged . apply ( A ) ) return i ; } } return i ; }
public void computeQueryFacet ( String facet ) { Map < String , StatsCollector [ ] > f = queryFacetCollectors . get ( facet ) ; for ( StatsCollector [ ] arr : f . values ( ) ) { for ( StatsCollector b : arr ) { b . compute ( ) ; } } }
public GetFieldMappingsRequest local ( boolean local ) { this . local = local ; return this ; }
private void updateProgress ( int progress ) { if ( myHost != null ) { myHost . updateProgress ( progress ) ; } else { System . out . println ( STR_ + progress + STR_ ) ; } }
public TourGuide with ( Technique technique ) { mTechnique = technique ; return this ; }
@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( getClass ( ) . getSimpleName ( ) ) . append ( STR_ ) . append ( id ) . append ( STR_ ) . append ( sizeRecords ( ) ) . append ( STR_ ) . append ( sizeBytes ( ) ) . append ( STR_ ) ; return sb . toString ( ) ; }
public BlockFactory ( Context context , int [ ] blockSourceIds ) { this ( context ) ; if ( blockSourceIds != null ) { for ( int i = NUM_ ; i < blockSourceIds . length ; i ++ ) { addBlocks ( blockSourceIds [ i ] ) ; } } }
public SerializableList ( final int initialCapacity , final String label ) { super ( initialCapacity , label ) ; }
public boolean addAll ( int index , Collection < ? extends E > c ) { checkPositionIndex ( index ) ; Object [ ] a = c . toArray ( ) ; int numNew = a . length ; if ( numNew == NUM_ ) return BOOL_ ; Node < E > pred , succ ; if ( index == size ) { succ = null ; pred = last ; } else { succ = node ( index ) ; pred = succ . prev ; } for ( Object o : a ) { @ SuppressWarnings ( STR_ ) E e = ( E ) o ; Node < E > newNode = new Node < > ( pred , e , null ) ; if ( pred == null ) first = newNode ; else pred . next = newNode ; pred = newNode ; } if ( succ == null ) { last = pred ; } else { pred . next = succ ; succ . prev = pred ; } size += numNew ; modCount ++ ; return BOOL_ ; }
private void executeStatement ( String query ) throws SQLException { Statement stmt = null ; try { stmt = conn . createStatement ( ) ; stmt . execute ( query ) ; } catch ( SQLException e ) { if ( stmt != null ) { stmt . close ( ) ; } } }
protected ByteArrayList ( ) { header = new Node ( ) ; }
public static SM_SYSTEM_MESSAGE STR_SKILL_SUCC_DispelNPCDeBuff_A_TO_ME ( String skillcaster , String skillname ) { return new SM_SYSTEM_MESSAGE ( NUM_ , skillcaster , skillname ) ; }
public int hashCode ( ) { return super . hashCode ( ) ; }
public int addNewDivider ( String name , int parentId , boolean isFixed ) throws Exception { FolderTokenDivider div ; int id ; id = super . generateNextNewNodeId ( ) ; div = new FolderTokenDivider ( id , name , parentId , isFixed , FolderEditFlag . NEW ) ; super . add ( div ) ; return id ; }
@ DSComment ( STR_ ) @ DSSafe ( DSCat . SAFE_LIST ) @ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public boolean quickReject ( Region rgn ) { return ( ( ( rgn . getTaintInt ( ) + getTaintInt ( ) ) ) == NUM_ ) ; }
public ExtraCategoryAction ( DataEditor editor ) { super ( STR_ ) ; if ( editor == null ) { throw new NullPointerException ( ) ; } this . dataEditor = editor ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( hc_elementgetelementsbytagnamenomatch . class , args ) ; }
private void subscribe ( ) { Connection c = Connections . getInstance ( context ) . getConnection ( clientHandle ) ; String actionTaken = context . getString ( R . string . toast_sub_success , ( Object [ ] ) additionalArgs ) ; c . addAction ( actionTaken ) ; Notify . toast ( context , actionTaken , Toast . LENGTH_SHORT ) ; }
public static String encodeXML ( String text ) { if ( text == null ) { return null ; } final StringBuilder result = new StringBuilder ( ) ; final StringCharacterIterator iterator = new StringCharacterIterator ( text ) ; char character = iterator . current ( ) ; while ( character != CharacterIterator . DONE ) { if ( character == STR_ ) { result . append ( STR_ ) ; } else if ( character == STR_ ) { result . append ( STR_ ) ; } else if ( character == STR_ ) { result . append ( STR_ ) ; } else if ( character == STR_ ) { result . append ( STR_ ) ; } else if ( character == STR_ ) { result . append ( STR_ ) ; } else { result . append ( character ) ; } character = iterator . next ( ) ; } return result . toString ( ) ; }
public static long parseHexLong ( String x ) { try { if ( x . length ( ) == NUM_ ) { return ( Long . parseLong ( x . substring ( NUM_ , NUM_ ) , NUM_ ) << NUM_ ) | Long . parseLong ( x . substring ( NUM_ , NUM_ ) , NUM_ ) ; } return Long . parseLong ( x , NUM_ ) ; } catch ( NumberFormatException e ) { throw newIllegalStateException ( ERROR_FILE_CORRUPT , STR_ , x , e ) ; } }
public void storeClassBytes ( String className , byte [ ] definition ) { synchronized ( _stateLock ) { if ( _classBytesByName . containsKey ( className ) ) { String msg = toString ( ) + STR_ + className + STR_ ; if ( _logger . isLoggable ( Level . SEVERE ) ) { _logger . severe ( msg ) ; _logger . showGlobalTrace ( ) ; } if ( _disableDuplicateLoadProtection ) _logger . warning ( toString ( ) + STR_ ) ; else throw new IllegalArgumentException ( msg ) ; } if ( _logger . isLoggable ( Level . FINEST ) ) _logger . finest ( STR_ + className + STR_ + this ) ; _classBytesByName . put ( className , definition ) ; } }
private static void insertionSortReverse ( double [ ] keys , int [ ] vals , final int start , final int end ) { for ( int i = start + NUM_ ; i < end ; i ++ ) { for ( int j = i ; j > start ; j -- ) { if ( keys [ j ] <= keys [ j - NUM_ ] ) { break ; } swap ( keys , vals , j , j - NUM_ ) ; } } }
private void updateHistory ( Path path ) { if ( this . historyPointer == this . pathLists . size ( ) ) { this . pathLists . add ( path ) ; this . paintLists . add ( this . createPaint ( ) ) ; this . historyPointer ++ ; } else { this . pathLists . set ( this . historyPointer , path ) ; this . paintLists . set ( this . historyPointer , this . createPaint ( ) ) ; this . historyPointer ++ ; for ( int i = this . historyPointer , size = this . paintLists . size ( ) ; i < size ; i ++ ) { this . pathLists . remove ( this . historyPointer ) ; this . paintLists . remove ( this . historyPointer ) ; } } }
public void debug ( String s , Object ... params ) { if ( isEnabled ( TraceSystem . DEBUG ) ) { s = MessageFormat . format ( s , params ) ; traceWriter . write ( TraceSystem . DEBUG , s , null ) ; } }
public < E extends Entry > E createEntry ( ElementKey < ? , E > entryKey ) { E entry ; try { entry = Element . createElement ( entryKey ) ; } catch ( ContentCreationException cce ) { throw new IllegalStateException ( cce ) ; } if ( feedState . service != null ) { entry . setService ( feedState . service ) ; } return entry ; }
@ Override public void onNewFrame ( HeadTransform headTransform ) { headTransform . getEulerAngles ( mEulerAngles , NUM_ ) ; if ( i % NUM_ == NUM_ ) { Log . i ( TAG , mEulerAngles [ NUM_ ] + STR_ + mEulerAngles [ NUM_ ] + STR_ + mEulerAngles [ NUM_ ] ) ; } i ++ ; if ( tracking ) { shift ( ) ; mQueue . addRequest ( mEulerAngles [ NUM_ ] , mEulerAngles [ NUM_ ] ) ; } }
@ Override public LessonStep findByLessonAndId ( Lesson lesson , Long lessonStepId ) { LessonStep lessonStep = this . lessonStepRepository . findByLessonAndId ( lesson , lessonStepId ) . orElseThrow ( null ) ; return lessonStep ; }
public AnimationBuilder rotationY ( float ... rotationY ) { return property ( STR_ , rotationY ) ; }
private static BaseEntry parseEntry ( ApiClient actor , InputStream is , MapsService maps , boolean preview , PrintWriter pw ) throws Exception { BaseEntry entry ; entry = actor . parseAtom ( is ) ; if ( draft ) { entry . setDraft ( BOOL_ ) ; } if ( preview ) { pp ( maps , entry , pw ) ; } return entry ; }
private static boolean isXLargeTablet ( Context context ) { return ( context . getResources ( ) . getConfiguration ( ) . screenLayout & Configuration . SCREENLAYOUT_SIZE_MASK ) >= Configuration . SCREENLAYOUT_SIZE_XLARGE ; }
public static Optional < DateTime > firstMoment ( Collection < ? extends Collection < Interval > > intervalSets ) { return intervalSets . stream ( ) . flatMap ( null ) . map ( null ) . reduce ( null ) ; }
@ DSModeled ( DSC . SAFE ) public final boolean isEmpty ( ) { return BOOL_ ; }
synchronized void onReaderClosed ( ) { if ( openReaderCount . decrementAndGet ( ) == NUM_ ) { notifyAll ( ) ; } }
public static BiSortVal createTree ( int size , int seed ) { if ( size > NUM_ ) { seed = random ( seed ) ; int next_val = seed % RANGE ; BiSortVal retval = new BiSortVal ( next_val ) ; retval . left = createTree ( size / NUM_ , seed ) ; retval . right = createTree ( size / NUM_ , skiprand ( seed , size + NUM_ ) ) ; return retval ; } else { return null ; } }
public boolean isSortedFromTo ( int from , int to ) { if ( size == NUM_ ) return BOOL_ ; checkRangeFromTo ( from , to , size ) ; Object [ ] theElements = elements ; for ( int i = from + NUM_ ; i <= to ; i ++ ) { if ( ( ( Comparable ) theElements [ i ] ) . compareTo ( ( Comparable ) theElements [ i - NUM_ ] ) < NUM_ ) return BOOL_ ; } return BOOL_ ; }
protected void processVmDestroy ( SimEvent ev , boolean ack ) { Vm vm = ( Vm ) ev . getData ( ) ; getVmAllocationPolicy ( ) . deallocateHostForVm ( vm ) ; if ( ack ) { int [ ] data = new int [ NUM_ ] ; data [ NUM_ ] = getId ( ) ; data [ NUM_ ] = vm . getId ( ) ; data [ NUM_ ] = CloudSimTags . TRUE ; sendNow ( vm . getUserId ( ) , CloudSimTags . VM_DESTROY_ACK , data ) ; } getVmList ( ) . remove ( vm ) ; }
public boolean evaluatePropertyExists ( EventBean [ ] eventsPerStream , boolean isNewData ) { EventBean theEvent = eventsPerStream [ streamNum ] ; if ( theEvent == null ) { return BOOL_ ; } return propertyGetter . isExistsProperty ( theEvent ) ; }
@ Override public ChanceNode copy ( ) { ChanceNode cn = new ChanceNode ( nodeId , distrib . copy ( ) ) ; if ( cachedValues != null ) { cn . cachedValues = new HashSet < Value > ( cachedValues ) ; } return cn ; }
public void addGenerateCondition ( PassThroughOrGenerateRuleCondition condition ) { generateConditions . add ( condition ) ; }
public static JCStatement generateNullCheck ( JavacTreeMaker maker , JavacNode variable , JavacNode source ) { NullCheckExceptionType exceptionType = source . getAst ( ) . readConfiguration ( ConfigurationKeys . NON_NULL_EXCEPTION_TYPE ) ; if ( exceptionType == null ) exceptionType = NullCheckExceptionType . NULL_POINTER_EXCEPTION ; JCVariableDecl varDecl = ( JCVariableDecl ) variable . get ( ) ; if ( isPrimitive ( varDecl . vartype ) ) return null ; Name fieldName = varDecl . name ; JCExpression exType = genTypeRef ( variable , exceptionType . getExceptionType ( ) ) ; JCExpression exception = maker . NewClass ( null , List . < JCExpression > nil ( ) , exType , List . < JCExpression > of ( maker . Literal ( exceptionType . toExceptionMessage ( fieldName . toString ( ) ) ) ) , null ) ; JCStatement throwStatement = maker . Throw ( exception ) ; JCBlock throwBlock = maker . Block ( NUM_ , List . of ( throwStatement ) ) ; return maker . If ( maker . Binary ( CTC_EQUAL , maker . Ident ( fieldName ) , maker . Literal ( CTC_BOT , null ) ) , throwBlock , null ) ; }
public ChoiceStateData ( StateHolder < S , E > state , Guard < S , E > guard ) { Assert . notNull ( state , STR_ ) ; this . state = state ; this . guard = guard ; }
public static Vec4 fromArray2 ( double [ ] array , int offset ) { if ( array == null ) { String msg = Logging . getMessage ( STR_ ) ; Logging . logger ( ) . severe ( msg ) ; throw new IllegalArgumentException ( msg ) ; } return fromDoubleArray ( array , offset , NUM_ ) ; }
public ReferenceCache ( final int size ) { this . size = size ; cache = new LRUCache ( ) ; }
private static void expand ( InputStream input , File file ) throws IOException { try ( BufferedOutputStream output = new BufferedOutputStream ( new FileOutputStream ( file ) ) ) { byte buffer [ ] = new byte [ NUM_ ] ; while ( BOOL_ ) { int n = input . read ( buffer ) ; if ( n <= NUM_ ) break ; output . write ( buffer , NUM_ , n ) ; } } }
public static String expandUuid ( Object id ) { String str = STR_ + id ; if ( str . matches ( STR_ ) ) { return ( str + STR_ ) . substring ( NUM_ , NUM_ ) ; } return ( String ) id ; }
protected void showSystemMenu ( ) { }
public void run ( ) { String lastUsedPath = getDialogSetting ( LAST_PATH_SETTING ) ; if ( lastUsedPath == null ) { lastUsedPath = STR_ ; } FileDialog dialog = new FileDialog ( getShell ( ) , SWT . MULTI ) ; dialog . setText ( STR_ ) ; dialog . setFilterPath ( lastUsedPath ) ; String res = dialog . open ( ) ; if ( res == null ) { return ; } IPath filterPath = new Path ( dialog . getFilterPath ( ) ) ; IRuntimeClasspathEntry [ ] elems = new IRuntimeClasspathEntry [ NUM_ ] ; IPath path = new Path ( res ) . makeAbsolute ( ) ; elems [ NUM_ ] = JavaRuntime . newArchiveRuntimeClasspathEntry ( path ) ; setDialogSetting ( LAST_PATH_SETTING , filterPath . toOSString ( ) ) ; getViewer ( ) . addEntries ( elems ) ; }
private void reportInterruptAfterWait ( int interruptMode ) throws InterruptedException { if ( interruptMode == THROW_IE ) throw new InterruptedException ( ) ; else if ( interruptMode == REINTERRUPT ) selfInterrupt ( ) ; }
public DbProcessVar ( ) { }
@ Override public void writeDirect ( final ByteBuffer bytes , final boolean sync , final IOCallback callback ) { try { checkOpened ( ) ; } catch ( Exception e ) { ActiveMQJournalLogger . LOGGER . warn ( e . getMessage ( ) , e ) ; callback . onError ( - NUM_ , e . getMessage ( ) ) ; return ; } final int bytesToWrite = factory . calculateBlockSize ( bytes . limit ( ) ) ; final long positionToWrite = position . getAndAdd ( bytesToWrite ) ; AIOSequentialFileFactory . AIOSequentialCallback runnableCallback = getCallback ( callback , bytes ) ; runnableCallback . initWrite ( positionToWrite , bytesToWrite ) ; if ( writerExecutor != null ) { writerExecutor . execute ( runnableCallback ) ; } else { runnableCallback . run ( ) ; } }
private int writeEncryptedData ( final ByteBuffer src ) { final int pos = src . position ( ) ; final int len = src . remaining ( ) ; if ( src . isDirect ( ) ) { final long addr = Buffer . address ( src ) + pos ; final int netWrote = SSL . writeToBIO ( networkBIO , addr , len ) ; if ( netWrote >= NUM_ ) { src . position ( pos + netWrote ) ; return netWrote ; } } else { ByteBuffer buf = ByteBuffer . allocateDirect ( len ) ; try { final long addr = memoryAddress ( buf ) ; buf . put ( src ) ; final int netWrote = SSL . writeToBIO ( networkBIO , addr , len ) ; if ( netWrote >= NUM_ ) { src . position ( pos + netWrote ) ; return netWrote ; } else { src . position ( pos ) ; } } finally { buf . clear ( ) ; ByteBufferUtils . cleanDirectBuffer ( buf ) ; } } return - NUM_ ; }
public Walker ( StackMap sm ) { info = sm . get ( ) ; }
public void bounceOff ( Particle that ) { double dx = that . rx - this . rx ; double dy = that . ry - this . ry ; double dvx = that . vx - this . vx ; double dvy = that . vy - this . vy ; double dvdr = dx * dvx + dy * dvy ; double dist = this . radius + that . radius ; double magnitude = NUM_ * this . mass * that . mass * dvdr / ( ( this . mass + that . mass ) * dist ) ; double fx = magnitude * dx / dist ; double fy = magnitude * dy / dist ; this . vx += fx / this . mass ; this . vy += fy / this . mass ; that . vx -= fx / that . mass ; that . vy -= fy / that . mass ; this . count ++ ; that . count ++ ; }
public static int indexOf ( String value , String substring ) { return value != null && substring != null ? value . indexOf ( substring ) : - NUM_ ; }
@ SuppressWarnings ( STR_ ) @ Deprecated public final void suspend ( ) { if ( suspendHelper ( ) ) { Thread . currentThread ( ) . suspend ( ) ; } }
public static float mean ( float [ ] data , int [ ] inds ) { float mean = NUM_ ; for ( int i = NUM_ ; i < inds . length ; i ++ ) { if ( Float . isNaN ( data [ inds [ i ] ] ) ) throw new IllegalArgumentException ( STR_ ) ; mean += data [ inds [ i ] ] ; } mean /= inds . length ; return mean ; }
public AudioPermission ( String name ) { super ( name ) ; }
private void addProducedBindings ( final TermNode t , final Set < IVariable < ? > > producedBindings ) { if ( t instanceof VarNode ) { producedBindings . add ( ( ( VarNode ) t ) . getValueExpression ( ) ) ; } else if ( t instanceof ConstantNode ) { final ConstantNode cNode = ( ConstantNode ) t ; final Constant < ? > c = ( Constant < ? > ) cNode . getValueExpression ( ) ; final IVariable < ? > var = c . getVar ( ) ; if ( var != null ) { producedBindings . add ( var ) ; } } }
public final void yyreset ( java . io . Reader reader ) throws java . io . IOException { yy_reader = reader ; yy_atBOL = BOOL_ ; yy_atEOF = BOOL_ ; yy_endRead = yy_startRead = NUM_ ; yy_currentPos = yy_markedPos = yy_pushbackPos = NUM_ ; yyline = yychar = yycolumn = NUM_ ; yy_lexical_state = YYINITIAL ; }
public WallGetQuery ownerId ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
protected int postOperationFix ( int headIdx , List < Tree < String > > daughterTrees ) { return headIdx ; }
public Plugin ( RajawaliRenderer renderer , boolean createVBOs ) { mGeometry = new Geometry3D ( ) ; mRenderer = renderer ; init ( createVBOs ) ; }
private ReggieStat removeReggieStat ( ServiceID id ) { if ( id == null ) throw new NullPointerException ( STR_ ) ; ReggieStat rStat = null ; synchronized ( discoveryTimes ) { for ( Iterator it = discoveryTimes . iterator ( ) ; it . hasNext ( ) ; ) { ReggieStat rt = ( ReggieStat ) it . next ( ) ; if ( rt . serviceID . equals ( id ) ) { rStat = rt ; discoveryTimes . remove ( rt ) ; break ; } } } return ( rStat ) ; }
protected Optional < LogData > parseJsonLog ( String s , DateFormat dateFormat ) { try { Validator . validate ( s ) ; final JSONObject jsonObject = new JSONObject ( s ) ; final Map < String , String > map = toMap ( jsonObject ) ; return mapToLogData ( map , dateFormat ) ; } catch ( JSONException e ) { return Optional . empty ( ) ; } }
@ SuppressWarnings ( STR_ ) private static final PipelineOp addKnownInConditional ( PipelineOp left , final FilterNode filter , final AST2BOpContext ctx ) { final InBOp bop = ( InBOp ) filter . getValueExpression ( ) ; final IConstant < IV > [ ] set = bop . getSet ( ) ; final LinkedHashSet < IV > ivs = new LinkedHashSet < IV > ( ) ; for ( IConstant < IV > iv : set ) { ivs . add ( iv . get ( ) ) ; } final IVariable var = ( IVariable ) bop . getValueExpression ( ) ; left = new DataSetJoin ( leftOrEmpty ( left ) , NV . asMap ( new NV [ ] { new NV ( DataSetJoin . Annotations . VAR , var ) , new NV ( DataSetJoin . Annotations . BOP_ID , ctx . nextId ( ) ) , new NV ( DataSetJoin . Annotations . GRAPHS , ivs ) } ) ) ; return left ; }
public void update ( int done , int total ) { if ( isFirst ) { this . clearConsole ( ) ; System . out . println ( STR_ ) ; } else { setCursorPos ( NUM_ , NUM_ ) ; lineClear ( ) ; setCursorPos ( NUM_ , NUM_ ) ; } char [ ] workchars = { STR_ , STR_ , STR_ , STR_ } ; String format = STR_ ; int percent = ( ++ done * NUM_ ) / total ; int extrachars = ( percent / NUM_ ) - this . progress . length ( ) ; while ( extrachars -- > NUM_ ) { progress . append ( STR_ ) ; } extracharsBK = this . progress . length ( ) + NUM_ ; System . out . printf ( format , percent , progress , workchars [ done % workchars . length ] ) ; handler . flush ( ) ; if ( done == total ) { System . out . flush ( ) ; init ( ) ; } }
public static List < String > readLines ( InputStream input ) throws IOException { return readLines ( input , Charset . defaultCharset ( ) ) ; }
private void unhyphenate ( ) { restoreState ( savedState ) ; savedState = null ; char term [ ] = termAttribute . buffer ( ) ; int length = hyphenated . length ( ) ; if ( length > termAttribute . length ( ) ) { term = termAttribute . resizeBuffer ( length ) ; } hyphenated . getChars ( NUM_ , length , term , NUM_ ) ; termAttribute . setLength ( length ) ; offsetAttribute . setOffset ( offsetAttribute . startOffset ( ) , lastEndOffset ) ; hyphenated . setLength ( NUM_ ) ; }
public static byte [ ] decodeLines ( String s ) { char [ ] buf = new char [ s . length ( ) + NUM_ ] ; int p = NUM_ ; for ( int ip = NUM_ ; ip < s . length ( ) ; ip ++ ) { char c = s . charAt ( ip ) ; if ( c != STR_ && c != STR_ && c != STR_ && c != STR_ ) buf [ p ++ ] = c ; } while ( ( p % NUM_ ) != NUM_ ) buf [ p ++ ] = STR_ ; return decode ( buf , NUM_ , p ) ; }
public X509CertificateHolderSelector ( byte [ ] subjectKeyId ) { this ( null , null , subjectKeyId ) ; }
static boolean matchingLetter ( String inputString ) { return Pattern . matches ( PATTERN_LETTER , inputString ) ; }
@ Path ( STR_ ) @ POST @ Consumes ( MediaType . APPLICATION_JSON ) @ Produces ( { MediaType . APPLICATION_JSON , MediaType . TEXT_PLAIN } ) public ListResponse list ( final ListRequest request ) throws ApiException { request . setProjectPath ( getAbsoluteProjectPath ( request . getProjectPath ( ) ) ) ; return subversionApi . list ( request ) ; }
public NamedNodeHashMap ( ) { table = new Entry [ INITIAL_CAPACITY ] ; }
public CLIOutputResponse add ( final AddRequest request ) throws IOException , SubversionException , UnauthorizedException { final File projectPath = new File ( request . getProjectPath ( ) ) ; final List < String > args = defaultArgs ( ) ; addFlag ( args , STR_ , request . isAddIgnored ( ) ) ; addFlag ( args , STR_ , request . isAddParents ( ) ) ; if ( request . isAutoProps ( ) ) { args . add ( STR_ ) ; } if ( request . isNotAutoProps ( ) ) { args . add ( STR_ ) ; } addOption ( args , STR_ , request . getDepth ( ) ) ; args . add ( STR_ ) ; final CommandLineResult result = runCommand ( null , args , projectPath , request . getPaths ( ) ) ; return DtoFactory . getInstance ( ) . createDto ( CLIOutputResponse . class ) . withCommand ( result . getCommandLine ( ) . toString ( ) ) . withOutput ( result . getStdout ( ) ) . withErrOutput ( result . getStderr ( ) ) ; }
@ Override public void validate ( String content , ValidationContext context ) throws InvalidDatatypeValueException { if ( ! context . isEntityUnparsed ( content ) ) throw new InvalidDatatypeValueException ( STR_ , new Object [ ] { content } ) ; }
public void writeToParcel ( Parcel dest , int flags ) { dest . writeInt ( channel ) ; dest . writeInt ( frequency ) ; dest . writeInt ( ibssAllowed ? NUM_ : NUM_ ) ; }
protected void prepare ( ) { for ( ProcessInfoParameter para : getParameter ( ) ) { String name = para . getParameterName ( ) ; if ( para . getParameter ( ) == null ) ; else if ( name . equals ( I_M_Movement . COLUMNNAME_MovementDate ) ) { movementDate = para . getParameterAsTimestamp ( ) ; if ( movementDate == null ) throw new AdempiereException ( STR_ ) ; } } int locatorId = Env . getContextAsInt ( Env . getCtx ( ) , getProcessInfo ( ) . getWindowNo ( ) , STR_ ) ; if ( locatorId > NUM_ ) locator = new MLocator ( getCtx ( ) , locatorId , get_TrxName ( ) ) ; if ( locator == null ) throw new AdempiereException ( STR_ ) ; }
public AttributeMetadata < D > bind ( MetadataContext context ) { return schema . bind ( parent , attKey , context ) ; }
@ Override public boolean isActive ( ) { return amIActive ; }
@ Override protected void entityInit ( ) { if ( wrapped != null ) { wrapped . events . publish ( new Stateful . LoadEvent ( ) ) ; prevPosX = posX ; prevPosY = posY ; prevPosZ = posZ ; prevRotationYaw = rotationYaw ; prevRotationPitch = rotationPitch ; setPosition ( posX , posY , posZ ) ; } }
public DReDNetSimple ( int ... hiddenLayerSizes ) { setHiddenSizes ( hiddenLayerSizes ) ; }
public Vector multiply ( int m ) { x *= m ; y *= m ; z *= m ; return this ; }
public boolean removeKey ( int key ) { int i = indexOfKey ( key ) ; if ( i < NUM_ ) return BOOL_ ; this . state [ i ] = REMOVED ; this . distinct -- ; if ( this . distinct < this . lowWaterMark ) { int newCapacity = chooseShrinkCapacity ( this . distinct , this . minLoadFactor , this . maxLoadFactor ) ; rehash ( newCapacity ) ; } return BOOL_ ; }
public IndependenceTest indTestSubset ( List vars ) { throw new UnsupportedOperationException ( ) ; }
public void testLocalsAverageCorrectly ( PredictiveInfoCalculator piCalc , int k , int timeSteps ) throws Exception { piCalc . initialise ( k ) ; RandomGenerator rg = new RandomGenerator ( ) ; double [ ] data = rg . generateNormalData ( timeSteps , NUM_ , NUM_ ) ; piCalc . setObservations ( data ) ; double pi = piCalc . computeAverageLocalOfObservations ( ) ; lastResult = pi ; double [ ] piLocal = piCalc . computeLocalOfPreviousObservations ( ) ; System . out . printf ( STR_ , pi ) ; assertEquals ( pi , MatrixUtils . mean ( piLocal ) , NUM_ ) ; }
static public void showMessage ( String str ) { if ( statusLabel == null ) { System . out . println ( str ) ; return ; } ArgumentChecking . notNull ( str , STR_ ) ; statusLabel . showMessage ( str ) ; }
@ Override public void stop ( ) { }
public LikesAddQuery ownerId ( Integer value ) { return unsafeParam ( STR_ , value ) ; }
public EntropyRateCalculatorDiscrete ( int base , int history ) { super ( base , history ) ; }
public EventTimeSourceBuilder < T > emit ( T elem , long timeStamp ) { builder . emit ( elem , timeStamp ) ; return this ; }
public static Properties collapse ( Properties props ) { Properties result ; Enumeration < String > keys ; String key ; result = new Properties ( ) ; keys = ( Enumeration < String > ) props . propertyNames ( ) ; while ( keys . hasMoreElements ( ) ) { key = keys . nextElement ( ) ; result . setProperty ( key , props . getProperty ( key ) ) ; } return result ; }
public boolean equals ( Object that ) { return ( that instanceof CharSet ) && Arrays . equals ( chars , ( ( CharSet ) that ) . chars ) ; }
public TimePeriodValues createCopy ( int start , int end ) throws CloneNotSupportedException { TimePeriodValues copy = ( TimePeriodValues ) super . clone ( ) ; copy . data = new ArrayList ( ) ; if ( this . data . size ( ) > NUM_ ) { for ( int index = start ; index <= end ; index ++ ) { TimePeriodValue item = ( TimePeriodValue ) this . data . get ( index ) ; TimePeriodValue clone = ( TimePeriodValue ) item . clone ( ) ; try { copy . add ( clone ) ; } catch ( SeriesException e ) { System . err . println ( STR_ ) ; } } } return copy ; }
public void unzipArchive ( final File archive , final File outputDir ) throws IOException { ZipFile zipfile = new ZipFile ( archive , encoding ) ; for ( Enumeration e = zipfile . getEntries ( ) ; e . hasMoreElements ( ) ; ) { final ZipArchiveEntry entry = ( ZipArchiveEntry ) e . nextElement ( ) ; unzipEntry ( zipfile , entry , outputDir ) ; } zipfile . close ( ) ; }
public static void add ( int [ ] n1 , int [ ] n2 , int [ ] sum ) { int b = n1 . length - NUM_ ; int carry = NUM_ ; while ( b >= NUM_ ) { int s = n1 [ b ] + n2 [ b ] + carry ; sum [ b + NUM_ ] = s % NUM_ ; if ( s > NUM_ ) { carry = NUM_ ; } else { carry = NUM_ ; } b -- ; } sum [ NUM_ ] = carry ; }
public FriendlySwitchCompat ( Context context ) { this ( context , null ) ; }
@ Field ( NUM_ ) public Pointer < Float > pfltVal ( ) { return this . io . getPointerField ( this , NUM_ ) ; }
private void sendConfiguredNetworksChangedBroadcast ( WifiConfiguration network , int reason ) { Intent intent = new Intent ( WifiManager . CONFIGURED_NETWORKS_CHANGED_ACTION ) ; intent . addFlags ( Intent . FLAG_RECEIVER_REGISTERED_ONLY_BEFORE_BOOT ) ; intent . putExtra ( WifiManager . EXTRA_MULTIPLE_NETWORKS_CHANGED , BOOL_ ) ; intent . putExtra ( WifiManager . EXTRA_WIFI_CONFIGURATION , network ) ; intent . putExtra ( WifiManager . EXTRA_CHANGE_REASON , reason ) ; mContext . sendBroadcastAsUser ( intent , UserHandle . ALL ) ; }
public long lookup ( CharSequence host , int port , int userId ) { int len = ClientConnection . buildGUID ( guidWorkspace , host , port , userId ) ; return TrieParserReader . query ( hostTrieReader , hostTrie , guidWorkspace , NUM_ , len , Integer . MAX_VALUE ) ; }
public static void HANDLER_BEGIN ( int access , String className , String methName , String methDesc ) { if ( ignoreCallback ) return ; ignoreCallback = BOOL_ ; vm . countCallback ( ) ; try { for ( IVM listener : vm . listeners ) listener . HANDLER_BEGIN ( access , className , methName , methDesc ) ; } catch ( Throwable t ) { handleException ( t ) ; } ignoreCallback = BOOL_ ; }
public static MyServicePrx uncheckedCast ( Ice . ObjectPrx __obj , String __facet ) { return uncheckedCastImpl ( __obj , __facet , MyServicePrx . class , MyServicePrxHelper . class ) ; }
public Call put ( String url , Callback callback ) { return put ( url , null , callback ) ; }
private void updateProgress ( int progress ) { if ( myHost != null && progress != previousProgress ) { myHost . updateProgress ( progress ) ; } previousProgress = progress ; }
public void handle ( Throwable throwable , Response response ) { if ( LOGGER . isWarnEnabled ( ) ) { LOGGER . warn ( STR_ + throwable , throwable ) ; } final OAuth2RestletException exception = toOAuth2RestletException ( throwable ) ; response . setStatus ( exception . getStatus ( ) ) ; response . setEntity ( jacksonRepresentationFactory . create ( exception . asMap ( ) ) ) ; }
protected static String applyLimitClause ( final String query , int limit , final int queryResultSetLimit ) { Matcher matcher = SELECT_EXPR_PATTERN . matcher ( query ) ; if ( matcher . matches ( ) ) { Matcher limit_matcher = SELECT_WITH_LIMIT_EXPR_PATTERN . matcher ( query ) ; boolean queryAlreadyHasLimitClause = limit_matcher . matches ( ) ; if ( ! queryAlreadyHasLimitClause ) { if ( limit == NUM_ ) { limit = queryResultSetLimit ; } String result = query ; result += STR_ + limit ; return result ; } } return query ; }
public List < ChangeControl > find ( String id , CurrentUser user ) throws OrmException { InternalChangeQuery query = queryProvider . get ( ) . noFields ( ) ; if ( ! id . isEmpty ( ) && id . charAt ( NUM_ ) != STR_ ) { Integer n = Ints . tryParse ( id ) ; if ( n != null ) { return asChangeControls ( query . byLegacyChangeId ( new Change . Id ( n ) ) , user ) ; } } if ( ! id . contains ( STR_ ) ) { return asChangeControls ( query . byKeyPrefix ( id ) , user ) ; } Optional < ChangeTriplet > triplet = ChangeTriplet . parse ( id ) ; if ( triplet . isPresent ( ) ) { return asChangeControls ( query . byBranchKey ( triplet . get ( ) . branch ( ) , triplet . get ( ) . id ( ) ) , user ) ; } return Collections . emptyList ( ) ; }
public static boolean removeUsername ( UUID uuid ) { checkNotNull ( uuid ) ; if ( ! loaded ) { load ( ) ; } if ( map . remove ( uuid ) != null ) { return BOOL_ ; } return BOOL_ ; }
@ Override public Vertex readVertex ( final InputStream inputStream , final Function < Attachable < Vertex > , Vertex > vertexAttachMethod ) throws IOException { throw Io . Exceptions . readerFormatIsForFullGraphSerializationOnly ( this . getClass ( ) ) ; }
public PutRepositoryRequest source ( byte [ ] repositoryDefinition ) { return source ( repositoryDefinition , NUM_ , repositoryDefinition . length ) ; }
public void packageClosing ( PackageEvent evt ) { try { ResultsFrame frame = ResultsFrame . getInstance ( evt . getPackage ( ) . getProject ( ) , BOOL_ ) ; if ( frame != null ) frame . setVisible ( BOOL_ ) ; } catch ( ProjectNotOpenException e ) { Log . recordBug ( e ) ; } }
public static long currentUnixTime ( ) { Calendar calendar = getCalendarInstance ( ) ; calendar . setTimeInMillis ( currentTimeMillis ( ) ) ; return toUnixTime ( calendar ) ; }
public byte [ ] decrypt ( byte [ ] crypt ) { int [ ] buffer = new int [ crypt . length / NUM_ ] ; pack ( crypt , buffer , NUM_ ) ; unbrew ( buffer ) ; return unpack ( buffer , NUM_ , buffer [ NUM_ ] ) ; }
private void closeChannel ( byte channel ) { channelConfig [ channel ] . setInitializing ( BOOL_ ) ; channelConfig [ channel ] . setDeinitializing ( BOOL_ ) ; channelConfig [ channel ] . setChannelState ( ChannelStates . CLOSED ) ; try { antInterface . ANTCloseChannel ( channel ) ; } catch ( AntInterfaceException e ) { Log . w ( TAG , STR_ + channel , e ) ; handleAntError ( ) ; } }
public boolean forEach ( TIntProcedure procedure ) { int [ ] set = _set ; Object [ ] values = _values ; for ( int i = set . length ; i -- > NUM_ ; ) { if ( isFull ( values , i ) && ! procedure . execute ( set [ i ] ) ) { return BOOL_ ; } } return BOOL_ ; }
private Node floor ( Node x , Key key ) { if ( x == null ) return null ; int cmp = key . compareTo ( x . key ) ; if ( cmp == NUM_ ) return x ; if ( cmp < NUM_ ) return floor ( x . left , key ) ; Node y = floor ( x . right , key ) ; if ( y != null ) return y ; else return x ; }
static Spannable buildSpannable ( SuggestionAnswer . ImageLine line , Paint . FontMetrics metrics , float density ) { SpannableStringBuilder builder = new SpannableStringBuilder ( ) ; int maxTextHeightSp = getMaxTextHeightSp ( line ) ; List < SuggestionAnswer . TextField > textFields = line . getTextFields ( ) ; for ( int i = NUM_ ; i < textFields . size ( ) ; i ++ ) { appendAndStyleText ( builder , textFields . get ( i ) , maxTextHeightSp , metrics , density ) ; } if ( line . hasAdditionalText ( ) ) { builder . append ( STR_ ) ; SuggestionAnswer . TextField additionalText = line . getAdditionalText ( ) ; appendAndStyleText ( builder , additionalText , maxTextHeightSp , metrics , density ) ; } if ( line . hasStatusText ( ) ) { builder . append ( STR_ ) ; SuggestionAnswer . TextField statusText = line . getStatusText ( ) ; appendAndStyleText ( builder , statusText , maxTextHeightSp , metrics , density ) ; } return builder ; }
@ Override public boolean intTryCompareAndSwap ( ObjectReference objref , int expected , int newValue , Word offset , Word unused , int mode ) { if ( org . jikesrvm . VM . BuildForIA32 ) { return Magic . attemptInt ( objref . toObject ( ) , offset . toOffset ( ) , expected , newValue ) ; } else { int oldValue ; do { oldValue = Magic . prepareInt ( objref , offset . toOffset ( ) ) ; if ( oldValue != expected ) return BOOL_ ; } while ( ! Magic . attemptInt ( objref , offset . toOffset ( ) , oldValue , newValue ) ) ; return BOOL_ ; } }
public Locator2Impl ( ) { }
private void addSubCollectionField ( NutchDocument doc , String url ) { for ( Subcollection coll : CollectionManager . getCollectionManager ( getConf ( ) ) . getSubCollections ( url ) ) { if ( coll . getKey ( ) == null ) { doc . add ( fieldName , coll . getName ( ) ) ; } else { doc . add ( coll . getKey ( ) , coll . getName ( ) ) ; } } }
@ PUT @ Produces ( MediaType . APPLICATION_JSON ) @ Consumes ( MediaType . APPLICATION_FORM_URLENCODED ) @ Path ( STR_ ) @ Description ( STR_ ) public PrincipalUserDto updateUserEmail ( @ Context HttpServletRequest req , @ PathParam ( STR_ ) final BigInteger userId , @ FormParam ( STR_ ) final String email ) { if ( userId == null || userId . compareTo ( BigInteger . ZERO ) < NUM_ ) { throw new WebApplicationException ( STR_ , Status . BAD_REQUEST ) ; } if ( email == null || email . isEmpty ( ) ) { throw new WebApplicationException ( STR_ , Status . BAD_REQUEST ) ; } PrincipalUser remoteUser = getRemoteUser ( req ) ; PrincipalUser user = _uService . findUserByPrimaryKey ( userId ) ; validateResourceAuthorization ( req , user , remoteUser ) ; if ( user == null ) { throw new WebApplicationException ( Response . Status . NOT_FOUND . getReasonPhrase ( ) , Response . Status . NOT_FOUND ) ; } user . setEmail ( email ) ; user = _uService . updateUser ( user ) ; return PrincipalUserDto . transformToDto ( user ) ; }
ResetGenerationIdMsg ( byte [ ] in ) throws DataFormatException { final ByteArrayScanner scanner = new ByteArrayScanner ( in ) ; if ( scanner . nextByte ( ) != MSG_TYPE_RESET_GENERATION_ID ) { throw new DataFormatException ( STR_ ) ; } generationId = scanner . nextLongUTF8 ( ) ; }
public void warn ( Throwable throwable , String msg , Object arg0 , Object arg1 , Object arg2 ) { innerLog ( Level . WARNING , throwable , msg , arg0 , arg1 , arg2 , null ) ; }
public final int yystate ( ) { return zzLexicalState ; }
public static boolean isCglibProxy ( Object object ) { return ClassUtils . isCglibProxyClass ( object . getClass ( ) ) ; }
private void stopNodeAndSleep ( long timeout ) throws Exception { stopGrid ( NUM_ ) ; info ( STR_ ) ; U . sleep ( timeout ) ; }
public static < E , L extends List < E > > L filter ( L list , Predicate < E > predicate ) { for ( Iterator < ? extends E > iter = list . iterator ( ) ; iter . hasNext ( ) ; ) { E obj = iter . next ( ) ; if ( predicate . test ( obj ) ) { iter . remove ( ) ; } } return list ; }
public AwsIotCompletion ( String topic , AWSIotQos qos , String payload , long timeout ) { super ( topic , qos , payload ) ; this . timeout = timeout ; this . request = null ; this . isAsync = BOOL_ ; }
public Push join ( ) throws IllegalStateException , IOException { if ( this . joinedOnce ) { throw new IllegalStateException ( STR_ ) ; } this . joinedOnce = BOOL_ ; this . sendJoin ( ) ; return this . joinPush ; }
protected String nativeElementTypeName ( Field field ) { return STR_ ; }
private static void validateEventCountAtClient ( ) throws Exception { if ( ! proceedForValidation ) { synchronized ( Bug36853EventsExpiryDUnitTest . class ) { if ( ! proceedForValidation ) try { LogWriterUtils . getLogWriter ( ) . info ( STR_ ) ; Bug36853EventsExpiryDUnitTest . class . wait ( NUM_ ) ; } catch ( InterruptedException e ) { fail ( STR_ ) ; } } } LogWriterUtils . getLogWriter ( ) . info ( STR_ ) ; assertEquals ( STR_ , TOTAL_PUTS , putsRecievedByClient ) ; LogWriterUtils . getLogWriter ( ) . info ( STR_ + putsRecievedByClient ) ; LogWriterUtils . getLogWriter ( ) . info ( STR_ ) ; }
public LongKeyMap ( ) { this . loadFactor = DEFAULT_LOAD_FACTOR ; threshold = DEFAULT_INITIAL_CAPACITY ; table = new LongEntry [ DEFAULT_INITIAL_CAPACITY ] ; }
public ST ( String template ) { this ( STGroup . defaultGroup , template ) ; }
public static int toOctalMode ( String strMode ) throws IOException { strMode = strMode . trim ( ) . toLowerCase ( ) ; if ( strMode . length ( ) == NUM_ || strMode . length ( ) == NUM_ ) return _toOctalMode ( strMode ) ; if ( strMode . length ( ) <= NUM_ && strMode . length ( ) > NUM_ ) return Integer . parseInt ( strMode , NUM_ ) ; throw new IOException ( STR_ + strMode + STR_ ) ; }
public DeviceScannerException ( String msg ) { super ( msg ) ; }
@ Override public boolean checkCondition ( ) { return ! alliance . hasMember ( invited . getObjectId ( ) ) ; }
public static QueryExp lt ( ValueExp v1 , ValueExp v2 ) { return new BinaryRelQueryExp ( LT , v1 , v2 ) ; }
protected boolean calculateSize ( ) { p_height = NUM_ ; for ( int r = NUM_ ; r < m_rows ; r ++ ) { p_height += m_rowHeight [ r ] ; if ( m_rowHeight [ r ] > NUM_ ) p_height += m_rowGap ; } p_height -= m_rowGap ; p_width = NUM_ ; for ( int c = NUM_ ; c < m_cols ; c ++ ) { p_width += m_colWidth [ c ] ; if ( m_colWidth [ c ] > NUM_ ) p_width += m_colGap ; } p_width -= m_colGap ; return BOOL_ ; }
public boolean removeStyleKey ( String styleKey ) { return styleKeys . remove ( styleKey ) ; }
public static final UnregisterAllInterest singleton ( ) { return SINGLETON ; }
public SeekableFileInputStream ( RandomAccessFile randomAccessFile ) { this . randomAccessFile = randomAccessFile ; }
@ Override public synchronized void close ( ) throws IOException { if ( journalWriter == null ) { return ; } for ( Entry entry : new ArrayList < Entry > ( lruEntries . values ( ) ) ) { if ( entry . currentEditor != null ) { entry . currentEditor . abort ( ) ; } } trimToSize ( ) ; journalWriter . close ( ) ; journalWriter = null ; }
public static void copy ( InputStream inputStream , OutputStream outputStream , int bufferSize ) throws IOException { byte [ ] buffer ; ByteArrayPool . ByteArray array = null ; if ( bufferSize > BUFFER_SIZE ) { buffer = new byte [ bufferSize ] ; } else { array = BUFFER_POOL . getByteArray ( ) ; buffer = array . getBytes ( ) ; } IOUtils . copyLarge ( inputStream , outputStream , buffer ) ; outputStream . flush ( ) ; if ( array != null ) { array . release ( ) ; } }
public void init$Children ( ) { children = new ASTNode [ NUM_ ] ; }
public boolean isSurfaceNormalVisible ( ) { return ( surfaceNormalArrow . getSceneHints ( ) . getCullHint ( ) != CullHint . Always ) ; }
private static FileTime creationTime ( Path file ) throws IOException { return Files . readAttributes ( file , BasicFileAttributes . class ) . creationTime ( ) ; }
public void resetTracking ( ) { totalTime = NUM_ ; drawCycles = NUM_ ; }
public static void debug ( String message ) { if ( debug ) { logger . info ( message ) ; } }
public ClassEntry ( DynamicClassLoader loader , String name , Path sourcePath , Path classPath , CodeSource codeSource ) { _loader = loader ; _name = name ; _classPath = classPath ; setDependPath ( classPath ) ; if ( sourcePath != null && ! sourcePath . equals ( classPath ) ) { _sourcePath = sourcePath ; _sourceLastModified = sourcePath . getLastModified ( ) ; _sourceLength = sourcePath . length ( ) ; } _codeSource = codeSource ; }
public boolean urlToSpeech ( String urlPath ) { boolean ok = BOOL_ ; try { URL url = new URL ( urlPath ) ; InputStream is = url . openStream ( ) ; ok = streamToSpeech ( is ) ; } catch ( IOException ioe ) { System . err . println ( STR_ + urlPath ) ; } return ok ; }
public int order ( ) { return order ; }
public CipherParameters generateDerivedMacParameters ( int keySize ) { return generateDerivedParameters ( keySize ) ; }
public boolean includeGlobalState ( ) { return includeGlobalState ; }
public String toString ( ) { return STR_ + value ; }
public void forceStopTask ( ) { mSpeedTestMode = SpeedTestMode . NONE ; mForceCloseSocket = BOOL_ ; if ( mFtpInputstream != null ) { try { mFtpInputstream . close ( ) ; } catch ( IOException e ) { } } if ( mFtpOutputstream != null ) { try { mFtpOutputstream . close ( ) ; } catch ( IOException e ) { } } }
private void readStreams ( Process proc ) throws IOException { BufferedReader stdOut = new BufferedReader ( new InputStreamReader ( proc . getInputStream ( ) ) ) ; String s ; while ( ( s = stdOut . readLine ( ) ) != null ) System . out . println ( STR_ + s ) ; BufferedReader errOut = new BufferedReader ( new InputStreamReader ( proc . getErrorStream ( ) ) ) ; while ( ( s = errOut . readLine ( ) ) != null ) System . out . println ( STR_ + s ) ; }
public Triangle ( ) { side1 = side2 = side3 = NUM_ ; }
@ DSSafe ( DSCat . SAFE_LIST ) @ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public void delete ( int key ) { int i = binarySearch ( mKeys , NUM_ , mSize , key ) ; if ( i >= NUM_ ) { if ( mValues [ i ] != DELETED ) { mValues [ i ] = DELETED ; mGarbage = BOOL_ ; } } }
@ Override public DriverTask detachVolumeClone ( List < VolumeClone > list ) { return cloneHelper . detachVolumeClone ( list ) ; }
public QRCallbackBuilder withCallbackIndex ( int index ) { this . callbackIndex = index ; return this ; }
public V1 addAction ( int icon , CharSequence title , Action . OnActionListener listener ) { N . addAction ( icon , title , listener ) ; return this ; }
public static boolean isLafAqua ( ) { ensureValidCache ( ) ; if ( cachedIsLafAqua == null ) { cachedIsLafAqua = Boolean . valueOf ( computeIsLafAqua ( ) ) ; } return cachedIsLafAqua . booleanValue ( ) ; }
public String format ( double d ) { return format ( d , sigDigit ) ; }
@ Override public int generateDirectSurrogateKey ( String memberStr ) { SimpleDateFormat timeParser = new SimpleDateFormat ( CarbonProperties . getInstance ( ) . getProperty ( CarbonCommonConstants . CARBON_TIMESTAMP_FORMAT , CarbonCommonConstants . CARBON_TIMESTAMP_DEFAULT_FORMAT ) ) ; timeParser . setLenient ( BOOL_ ) ; if ( null == memberStr || memberStr . trim ( ) . isEmpty ( ) || memberStr . equals ( CarbonCommonConstants . MEMBER_DEFAULT_VAL ) ) { return NUM_ ; } return getDirectSurrogateForMember ( memberStr , timeParser ) ; }
public TimezoneId ( String timezone ) { super ( timezone ) ; }
public static CompoundSelect union ( Query query ) { return new CompoundSelect ( CompoundSelectOperator . UNION , query ) ; }
public MalformedURLException ( String detailMessage , Throwable cause ) { super ( detailMessage , cause ) ; }
public void add ( DalvInsn insn ) { finisher . add ( insn ) ; }
public void allocateLoadBalance ( ) { _loadBalanceAllocateCount . incrementAndGet ( ) ; }
public AdeOutputDirectoriesManager ( String outputPath ) throws AdeException { m_outputHome = new File ( outputPath ) ; m_modelsPath = new File ( m_outputHome , STR_ ) ; m_continuousOutputPath = new File ( m_outputHome , STR_ ) ; m_anaAdhocOutputPath = new File ( m_outputHome , STR_ ) ; ExtFileUtils . createDir ( m_modelsPath ) ; ExtFileUtils . createDir ( m_continuousOutputPath ) ; ExtFileUtils . createDir ( m_anaAdhocOutputPath ) ; }
public Object invoke ( Object proxy , Method method , Object [ ] args ) throws Throwable { String name = method . getName ( ) ; if ( method . getDeclaringClass ( ) == GroovyObject . class ) { if ( name . equals ( STR_ ) ) { return getMetaClass ( ) ; } else if ( name . equals ( STR_ ) ) { return setMetaClass ( ( MetaClass ) args [ NUM_ ] ) ; } } return InvokerHelper . invokeMethod ( extension , method . getName ( ) , args ) ; }
private long hash ( final long [ ] a , final int l , final int k ) { final int [ ] w = weight [ k ] ; long h = init [ k ] ; int i = l ; while ( i -- != NUM_ ) h ^= ( h << NUM_ ) + a [ i ] * w [ i % NUMBER_OF_WEIGHTS ] + ( h > > > NUM_ ) ; return ( h & NUM_ ) % m ; }
public boolean isElement ( List < String > requestPrefixList , String requestedElementName ) { if ( ( requestPrefixList != null ) && ( requestedElementName != null ) ) { for ( String requestPrefix : requestPrefixList ) { if ( isElement ( requestPrefix , requestedElementName ) ) { return BOOL_ ; } } } return BOOL_ ; }
public static ApmOverlay INSTANCE ( ) { return INSTANCE . get ( ) ; }
public boolean empty ( ) { return isEmpty ( ) ; }
@ Override public Filter createLogicFilter ( List < Filter > filterList ) { return null ; }
public void visitMultiANewArrayInsn ( String desc , int dims ) { if ( mv != null ) { mv . visitMultiANewArrayInsn ( desc , dims ) ; } }
public SortField ( String field , Type type , boolean reverse ) { initFieldType ( field , type ) ; this . reverse = reverse ; }
protected void workerComplete ( ISwingWorker < OMGraphicList > worker ) { boolean finishUpWithWorker = BOOL_ ; synchronized ( LAYERWORKER_LOCK ) { finishUpWithWorker = ! layerWorkerQueue ; setLayerWorker ( layerWorkerQueue ? createLayerWorker ( ) : null ) ; layerWorkerQueue = BOOL_ ; } if ( finishUpWithWorker ) { getProjectionChangePolicy ( ) . workerComplete ( worker . get ( ) ) ; } }
@ Transactional public Permission createPermission ( Permission permission ) { String permissionType = permission . getPermissionType ( ) ; String targetId = permission . getTargetId ( ) ; Permission current = permissionRepository . findTopByPermissionTypeAndTargetId ( permissionType , targetId ) ; Preconditions . checkState ( current == null , STR_ , permissionType , targetId ) ; return permissionRepository . save ( permission ) ; }
public static Response createConnectErrorResponse ( char errorCode ) throws IllegalArgumentException { return createConnectErrorResponse ( errorCode , null ) ; }
public static String combineExtraStyle ( String style , String extraStyle ) { String res ; if ( style == null ) { style = STR_ ; } else { style = style . trim ( ) ; } if ( extraStyle == null ) { extraStyle = STR_ ; } else { extraStyle = extraStyle . trim ( ) ; } if ( style . isEmpty ( ) ) { if ( extraStyle . startsWith ( STR_ ) || extraStyle . startsWith ( STR_ ) ) { res = STR_ + extraStyle . substring ( NUM_ ) ; } else { res = STR_ + extraStyle ; } } else { if ( extraStyle . startsWith ( STR_ ) || extraStyle . startsWith ( STR_ ) ) { res = style + STR_ + extraStyle . substring ( NUM_ ) ; } else { res = style + STR_ + extraStyle ; } } return res ; }
protected void createBridgeServer ( int port ) throws IOException { CacheServer bridge = getCache ( ) . addCacheServer ( ) ; bridge . setPort ( port ) ; bridge . setMaxThreads ( getMaxThreads ( ) ) ; bridgeServerPort = bridge . getPort ( ) ; }
long adjustBillingPeriodStart ( PriceModelHistory pmHistory ) { if ( pmHistory . getType ( ) == org . oscm . internal . types . enumtypes . PriceModelType . PER_UNIT ) { return PricingPeriodDateConverter . getStartTime ( billingInput . getBillingPeriodStart ( ) , pmHistory . getPeriod ( ) ) . getTimeInMillis ( ) ; } else { return billingInput . getBillingPeriodStart ( ) ; } }
protected SVGOMFETileElement ( ) { }
public static < T > Flux < T > sorted ( Flux < T > flux ) { return Flux . fromIterable ( null ) ; }
public double normalizedDistance ( double [ ] point1 , double [ ] point2 ) throws Exception { return Math . sqrt ( distance2 ( point1 , point2 ) ) / point1 . length ; }
public static < V > int addDistinctList ( List < V > sourceList , List < V > entryList ) { if ( sourceList == null || isEmpty ( entryList ) ) { return NUM_ ; } int sourceCount = sourceList . size ( ) ; for ( V entry : entryList ) { if ( ! sourceList . contains ( entry ) ) { sourceList . add ( entry ) ; } } return sourceList . size ( ) - sourceCount ; }
private double restore ( int d , double val ) { return ( val / imadsigma [ d ] ) + median [ d ] ; }
@ Override public Mono < Object > resolveArgument ( MethodParameter parameter , ModelMap model , ServerWebExchange exchange ) { String name = HandlerMapping . URI_TEMPLATE_VARIABLES_ATTRIBUTE ; Optional < Object > value = exchange . getAttribute ( name ) ; return ( value . isPresent ( ) ? Mono . just ( value . get ( ) ) : Mono . just ( Collections . emptyMap ( ) ) ) ; }
public static void checkProtocolVersion ( byte protoVer ) { if ( GridBinaryMarshaller . PROTO_VER != protoVer ) throw new BinaryObjectException ( STR_ + protoVer ) ; }
public static String downloadString ( String url , int triesCount ) throws MalformedURLException { return downloadString ( new URL ( url ) , null , DEFAULT_READ_TIMEOUT , DEFAULT_SOCKET_TIMEOUT , STR_ , triesCount ) ; }
public CacheClientNotifierStats ( StatisticsFactory f ) { this . _stats = f . createAtomicStatistics ( _type , STR_ ) ; }
public MathCharacter ( MetaCharacter meta ) { this . meta = meta ; }
public double nextDouble ( double least , double bound ) { if ( least >= bound ) { throw new IllegalArgumentException ( ) ; } return nextDouble ( ) * ( bound - least ) + least ; }
protected int addContentSpecNode ( short nodeType , String nodeValue ) { int contentSpecIndex = createContentSpec ( ) ; fContentSpec . setValues ( nodeType , nodeValue , null ) ; setContentSpec ( contentSpecIndex , fContentSpec ) ; return contentSpecIndex ; }
public void registerSSOToken ( SSOToken ssoToken ) { ssoTokens . add ( ssoToken ) ; Logger . token . set ( ssoToken ) ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public static synchronized boolean isEmpty ( ) { return services . isEmpty ( ) ; }
private boolean checkNameFromNode ( DefaultMutableTreeNode node , String startsWith ) { return ( checkNameFromNode ( node , NUM_ , startsWith ) ) ; }
public void visitInsn ( int opcode ) { if ( mv != null ) { mv . visitInsn ( opcode ) ; } }
public AWTTerminal ( TerminalSize initialTerminalSize , TerminalEmulatorDeviceConfiguration deviceConfiguration , AWTTerminalFontConfiguration fontConfiguration , TerminalEmulatorColorConfiguration colorConfiguration , TerminalScrollController scrollController ) { if ( deviceConfiguration == null ) { deviceConfiguration = TerminalEmulatorDeviceConfiguration . getDefault ( ) ; } if ( fontConfiguration == null ) { fontConfiguration = SwingTerminalFontConfiguration . getDefault ( ) ; } if ( colorConfiguration == null ) { colorConfiguration = TerminalEmulatorColorConfiguration . getDefault ( ) ; } terminalImplementation = new AWTTerminalImplementation ( this , fontConfiguration , initialTerminalSize , deviceConfiguration , colorConfiguration , scrollController ) ; }
public static double [ ] ndary ( int n ) { double d [ ] = new double [ n ] ; for ( int i = NUM_ ; i < n ; i ++ ) { d [ i ] = R . nextGaussian ( ) ; } return d ; }
@ DSComment ( STR_ ) @ DSSafe ( DSCat . SAFE_LIST ) @ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public AtomicReference ( V initialValue ) { value = initialValue ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public void rcommand ( String localUsername , String remoteUsername , String command ) throws IOException { rcommand ( localUsername , remoteUsername , command , BOOL_ ) ; }
public void onRightClick ( View view ) { final int currentPosition = mPager . getCurrentItem ( ) ; if ( currentPosition != mPager . getAdapter ( ) . getCount ( ) - NUM_ ) { characterSelectedHelper ( currentPosition + NUM_ , BOOL_ ) ; } }
public static IndexKey prepareDefaultStartIndexKey ( SegmentProperties segmentProperties ) throws KeyGenException { IndexKey startIndexKey ; long [ ] dictionarySurrogateKey = new long [ segmentProperties . getDimensions ( ) . size ( ) - segmentProperties . getNumberOfNoDictionaryDimension ( ) ] ; byte [ ] dictionaryStartMdkey = segmentProperties . getDimensionKeyGenerator ( ) . generateKey ( dictionarySurrogateKey ) ; byte [ ] noDictionaryStartKeyArray = getNoDictionaryDefaultStartKey ( segmentProperties ) ; startIndexKey = new IndexKey ( dictionaryStartMdkey , noDictionaryStartKeyArray ) ; return startIndexKey ; }
public void draw ( Canvas c , Rect bounds ) { final RectF arcBounds = mTempBounds ; arcBounds . set ( bounds ) ; arcBounds . inset ( mStrokeInset , mStrokeInset ) ; final float startAngle = ( mStartTrim + mRotation ) * NUM_ ; final float endAngle = ( mEndTrim + mRotation ) * NUM_ ; float sweepAngle = endAngle - startAngle ; mPaint . setColor ( mColors [ mColorIndex ] ) ; c . drawArc ( arcBounds , startAngle , sweepAngle , BOOL_ , mPaint ) ; drawTriangle ( c , startAngle , sweepAngle , bounds ) ; if ( mAlpha < NUM_ ) { mCirclePaint . setColor ( mBackgroundColor ) ; mCirclePaint . setAlpha ( NUM_ - mAlpha ) ; c . drawCircle ( bounds . exactCenterX ( ) , bounds . exactCenterY ( ) , bounds . width ( ) / NUM_ , mCirclePaint ) ; } }
@ SuppressWarnings ( STR_ ) public void addSurrogateIds ( Collection < IgniteUuid > col ) { if ( surrogateIds == null ) { surrogateIds = new IgniteUuid [ ids . length ] ; for ( int i = lastExistingIdx + NUM_ ; i < surrogateIds . length ; i ++ ) surrogateIds [ i ] = IgniteUuid . randomUuid ( ) ; } for ( int i = lastExistingIdx + NUM_ ; i < surrogateIds . length ; i ++ ) col . add ( surrogateIds [ i ] ) ; }
public void testBlockCommitOnFragments ( ) throws Exception { LinkedList < ReplDBMSEvent > events = new LinkedList < ReplDBMSEvent > ( ) ; for ( int seqno = NUM_ ; seqno < NUM_ ; seqno ++ ) { for ( short fragNo = NUM_ ; fragNo < NUM_ ; fragNo ++ ) { ReplDBMSEvent event = helper . createEvent ( seqno , STR_ , fragNo , ( fragNo == NUM_ ) ) ; events . add ( event ) ; } } checkBlockCommitSemantics ( events , BlockCommitPolicy . lax , BOOL_ , null ) ; checkBlockCommitSemantics ( events , BlockCommitPolicy . strict , BOOL_ , null ) ; checkBlockCommitSemantics ( events , null , BOOL_ , null ) ; }
@ Override protected void onVisibilityChanged ( View changedView , int visibility ) { super . onVisibilityChanged ( changedView , visibility ) ; if ( changedView != this ) { return ; } if ( visibility == View . VISIBLE ) { resume ( ) ; } else { pause ( ) ; } }
protected static String quoteTime ( java . sql . Time x ) { if ( x == null ) { return STR_ ; } return STR_ + x . toString ( ) + STR_ ; }
protected static SimpleCommand createCommand ( String command , final String host , final int port , final String user , final Path privateKeyFilePath , boolean logCommand ) throws AgentException { return new SimpleCommand ( command , new SecureShellAgent ( host , port , user , privateKeyFilePath ) , null , logCommand ) ; }
public static _Fields findByThriftIdOrThrow ( int fieldId ) { _Fields fields = findByThriftId ( fieldId ) ; if ( fields == null ) throw new IllegalArgumentException ( STR_ + fieldId + STR_ ) ; return fields ; }
public static boolean isTimeSeries ( Class < ? extends TaggedLogAPIEntity > clazz ) { TimeSeries ts = clazz . getAnnotation ( TimeSeries . class ) ; return ts != null && ts . value ( ) ; }
public static void copyFile ( CarbonFile sourceLocation , String desTinationLocation ) throws IOException { InputStream inputStream = null ; OutputStream outputStream = null ; try { inputStream = FileFactory . getDataInputStream ( sourceLocation . getAbsolutePath ( ) , FileFactory . getFileType ( sourceLocation . getAbsolutePath ( ) ) ) ; outputStream = FileFactory . getDataOutputStream ( desTinationLocation , FileFactory . getFileType ( desTinationLocation ) , NUM_ , BOOL_ ) ; copyFile ( inputStream , outputStream ) ; } finally { CarbonUtil . closeStreams ( inputStream , outputStream ) ; } }
@ DataProvider public Object [ ] [ ] validAttributeDescriptions ( ) { return new Object [ ] [ ] { { STR_ , BOOL_ } , { STR_ , BOOL_ } , { STR_ , BOOL_ } , { STR_ , BOOL_ } , { STR_ , BOOL_ } , { STR_ , BOOL_ } , { STR_ , BOOL_ } , { STR_ , BOOL_ } , { STR_ , BOOL_ } , { STR_ , BOOL_ } , { STR_ , BOOL_ } , { STR_ , BOOL_ } } ; }
private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
public ResizingArrayBag ( ) { a = ( Item [ ] ) new Object [ NUM_ ] ; n = NUM_ ; }
public static void sort ( short [ ] a ) { DualPivotQuicksort . sort ( a , NUM_ , a . length - NUM_ , null , NUM_ , NUM_ ) ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) private static Object spinWait ( Node node , Slot slot ) { int spins = SPINS ; for ( ; ; ) { Object v = node . get ( ) ; if ( v != null ) return v ; else if ( spins > NUM_ ) -- spins ; else tryCancel ( node , slot ) ; } }
public static void registerFont ( String path ) { registerFont ( path , null ) ; }
public static Angle fromDMS ( int degrees , int minutes , int seconds ) { if ( minutes < NUM_ || minutes >= NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } if ( seconds < NUM_ || seconds >= NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } return Angle . fromDegrees ( Math . signum ( degrees ) * ( Math . abs ( degrees ) + minutes / NUM_ + seconds / NUM_ ) ) ; }
public void call ( String method , Object [ ] args ) throws IOException { startCall ( method ) ; if ( args != null ) { for ( int i = NUM_ ; i < args . length ; i ++ ) writeObject ( args [ i ] ) ; } completeCall ( ) ; }
public boolean isPaused ( ) { return paused ; }
public boolean hasPassword ( ) { return O != null || U != null ; }
public Map < String , Object > processOutputs ( Map < String , Object > outputs , Draft2PortProcessorCallback portProcessor ) throws Draft2PortProcessorException { return processValues ( outputs , job . getApp ( ) . getOutputs ( ) , Draft2OutputPort . class , portProcessor ) ; }
public Iterator < String > parameterSignatureIterator ( ) { return new ParameterSignatureIterator ( ) ; }
public GSTextMessageImpl ( GSSessionImpl session ) throws JMSException { this ( session , null ) ; }
public boolean genStringAsCharArray ( ) { return genStringAsCharArray ; }
protected void startClient ( int port ) { t = new Thread ( new SSClient ( port ) , STR_ ) ; t . start ( ) ; try { Thread . sleep ( NUM_ ) ; } catch ( InterruptedException e ) { System . out . println ( STR_ + e . toString ( ) ) ; } }
private char processCharacterEscapeCodes ( char endDelimiter ) { pos ++ ; if ( pos >= buffer . length ) { throw new IllegalStateException ( STR_ ) ; } if ( buffer [ pos ] == ESCAPE_CHAR ) { pos ++ ; return ESCAPE_CHAR ; } else if ( buffer [ pos ] == endDelimiter ) { pos ++ ; return endDelimiter ; } else { return ESCAPE_CHAR ; } }
public Result createResult ( String xml ) throws XACMLException { Object object = XACMLSDKUtils . getObjectInstance ( XACMLConstants . RESULT , xml ) ; if ( object == null ) { return new ResultImpl ( xml ) ; } else { return ( Result ) object ; } }
public boolean hasDependencies ( ) { if ( doNotCheckCapabilities ( ) ) { return BOOL_ ; } return ( m_Dependencies . size ( ) > NUM_ ) ; }
private static int secondaryHash ( int h ) { h ^= ( h > > > NUM_ ) ^ ( h > > > NUM_ ) ; return h ^ ( h > > > NUM_ ) ^ ( h > > > NUM_ ) ; }
public static < T > T narrow ( Object narrowFrom , Class < T > narrowTo ) { ensureAvailable ( ) ; return proxy . narrow ( narrowFrom , narrowTo ) ; }
public Map < String , String > querySysData ( ) throws IOException { logger . fine ( STR_ + address ) ; Map < String , String > resMap = null ; resMap = new java . util . LinkedHashMap < String , String > ( ) ; Map < OID , String > res = get ( COMMON_SYS_OIDS ) ; if ( res != null ) { for ( Map . Entry < OID , String > e : res . entrySet ( ) ) { if ( STR_ . equalsIgnoreCase ( e . getValue ( ) ) ) continue ; resMap . put ( OID_NAME_MAP . get ( STR_ + e . getKey ( ) . toString ( ) ) , e . getValue ( ) ) ; } } return resMap ; }
public AndroidAuthenticator ( Context context , Account account , String authTokenType ) { this ( context , account , authTokenType , BOOL_ ) ; }
private int moveGap ( int offset , int remove , int oldGapSize , int newGapSize , int newGapStart ) { final int newGapEnd = newGapStart + newGapSize ; if ( offset < fGapStart ) { int afterRemove = offset + remove ; if ( afterRemove < fGapStart ) { final int betweenSize = fGapStart - afterRemove ; arrayCopy ( afterRemove , fContent , newGapEnd , betweenSize ) ; } } else { final int offsetShifted = offset + oldGapSize ; final int betweenSize = offsetShifted - fGapEnd ; arrayCopy ( fGapEnd , fContent , fGapStart , betweenSize ) ; } return newGapEnd ; }
public boolean isInfoSent ( ) { Object oo = get_Value ( COLUMNNAME_IsInfoSent ) ; if ( oo != null ) { if ( oo instanceof Boolean ) return ( ( Boolean ) oo ) . booleanValue ( ) ; return STR_ . equals ( oo ) ; } return BOOL_ ; }
public static int startDownloadServiceIfRequired ( Context context , PendingIntent notificationClient , Class < ? > serviceClass ) throws NameNotFoundException { return DownloaderService . startDownloadServiceIfRequired ( context , notificationClient , serviceClass ) ; }
public RegisterServerResponse RegisterServer ( RequestHeader RequestHeader , RegisteredServer Server ) throws ServiceFaultException , ServiceResultException { RegisterServerRequest req = new RegisterServerRequest ( RequestHeader , Server ) ; return ( RegisterServerResponse ) channel . serviceRequest ( req ) ; }
public ExperimentTrainTest ( String aExperimentName , Class < ? extends TCMachineLearningAdapter > mlAdapter ) throws TextClassificationException { setExperimentName ( aExperimentName ) ; setMachineLearningAdapter ( mlAdapter ) ; setType ( STR_ + experimentName ) ; setAttribute ( TC_TASK_TYPE , TcTaskType . EVALUATION . toString ( ) ) ; }
private static void resolveUnaryExpression ( UnaryExpression objSubjectExpression , @ Nullable Function objScope , PhpIndex objIndex , HashSet < String > objTypesSet ) { PsiElement objOperation = objSubjectExpression . getOperation ( ) ; if ( null == objOperation ) { return ; } IElementType objType = objOperation . getNode ( ) . getElementType ( ) ; if ( PhpTokenTypes . CAST_OPERATORS . contains ( objType ) ) { if ( objType == PhpTokenTypes . opINTEGER_CAST ) { objTypesSet . add ( Types . strInteger ) ; } else if ( objType == PhpTokenTypes . opARRAY_CAST ) { objTypesSet . add ( Types . strArray ) ; } else if ( objType == PhpTokenTypes . opBOOLEAN_CAST ) { objTypesSet . add ( Types . strBoolean ) ; } else if ( objType == PhpTokenTypes . opFLOAT_CAST ) { objTypesSet . add ( Types . strFloat ) ; } else if ( objType == PhpTokenTypes . opSTRING_CAST ) { objTypesSet . add ( Types . strString ) ; } return ; } storeAsTypeWithSignaturesImport ( objSubjectExpression . getType ( ) . toString ( ) , objScope , objIndex , objTypesSet ) ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public CertificateIssuer ( byte [ ] encoding ) { super ( encoding ) ; }
public static void main ( String [ ] args ) { PieChartDemo1 demo = new PieChartDemo1 ( STR_ ) ; demo . pack ( ) ; RefineryUtilities . centerFrameOnScreen ( demo ) ; demo . setVisible ( BOOL_ ) ; }
@ Nullable public static < K , V > V addIfAbsent ( Map < ? super K , V > map , @ Nullable K key , @ Nullable Callable < ? extends V > c ) { A . notNull ( map , STR_ ) ; try { if ( ! map . containsKey ( key ) ) { V v = c == null ? null : c . call ( ) ; map . put ( key , v ) ; return v ; } else return map . get ( key ) ; } catch ( Exception e ) { throw wrap ( e ) ; } }
Address ( ) { tags = new LinkedHashMap < String , ArrayList < String > > ( ) ; }
@ Override public SubscriberObject copy ( ) { return new SubscriberObject ( this ) ; }
public boolean addressOutOfRange ( ) { return addressOutOfRange ; }
public ClientBuilderForConnector forConnector ( DockerConnector connector ) throws UnrecoverableKeyException , NoSuchAlgorithmException , KeyStoreException , KeyManagementException { LOG . debug ( STR_ , connector . getServerUrl ( ) ) ; withCredentials ( connector . getCredentialsId ( ) ) ; withConnectorType ( connector . getConnectorType ( ) ) ; withConnectTimeout ( connector . getConnectTimeout ( ) ) ; return forServer ( connector . getServerUrl ( ) , connector . getApiVersion ( ) ) ; }
public Builder name ( String name ) { this . name = name ; return this ; }
private void createInitialState ( ) { long [ ] precalc = ( long [ ] ) INITIAL_STATES . get ( variantIdentifier ( getBlockSize ( ) , getOutputSize ( ) ) ) ; if ( ( key == null ) && ( precalc != null ) ) { chain = Arrays . clone ( precalc ) ; } else { chain = new long [ getBlockSize ( ) / NUM_ ] ; if ( key != null ) { ubiComplete ( SkeinParameters . PARAM_TYPE_KEY , key ) ; } ubiComplete ( PARAM_TYPE_CONFIG , new Configuration ( outputSizeBytes * NUM_ ) . getBytes ( ) ) ; } if ( preMessageParameters != null ) { for ( int i = NUM_ ; i < preMessageParameters . length ; i ++ ) { Parameter param = preMessageParameters [ i ] ; ubiComplete ( param . getType ( ) , param . getValue ( ) ) ; } } initialState = Arrays . clone ( chain ) ; }
public boolean checkSignLocation ( Location loc ) { if ( loc . equals ( signLocation ) ) { signLocation = null ; return BOOL_ ; } else { return BOOL_ ; } }
public static void edit ( String id , String virtualArrayId ) { NetworkRestRep network = getNetwork ( id ) ; NetworkForm form = new NetworkForm ( ) ; form . load ( network ) ; edit ( form ) ; }
void appendStartDocument ( ) { m_docElement = NULL ; initDocument ( NUM_ ) ; }
@ Override public void onCheckedChanged ( CompoundButton buttonView , boolean isChecked ) { if ( buttonView == mShowAllDisplaysCheckbox ) { mDisplayListAdapter . updateContents ( ) ; } else { final Display display = ( Display ) buttonView . getTag ( ) ; if ( isChecked ) { PresentationContents contents = new PresentationContents ( getNextPhoto ( ) ) ; showPresentation ( display , contents ) ; } else { hidePresentation ( display ) ; } } }
public LambdaCounter ( Logger logger , int logFrequency , String message ) { this ( logger , NUM_ , logFrequency , message ) ; }
protected static byte [ ] encodeDHPrivateKey ( DHPrivateKeyParameters privkey ) { return privkey . getX ( ) . toByteArray ( ) ; }
public static String displayOutputs ( String name , Set < String > outputNames , LocalVariableMap symbolTable ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( name ) ; sb . append ( STR_ ) ; sb . append ( displayOutputs ( outputNames , symbolTable ) ) ; return sb . toString ( ) ; }
private static String mapJoinStatusFromIDMToREST ( JoinStatus joinStatus ) { if ( joinStatus == JoinStatus . ACTIVE_DIRECTORY_JOIN_STATUS_UNKNOWN ) { return ADJoinStatus . UNKNOWN . name ( ) ; } else if ( joinStatus == JoinStatus . ACTIVE_DIRECTORY_JOIN_STATUS_WORKGROUP ) { return ADJoinStatus . WORKGROUP . name ( ) ; } else if ( joinStatus == JoinStatus . ACTIVE_DIRECTORY_JOIN_STATUS_DOMAIN ) { return ADJoinStatus . DOMAIN . name ( ) ; } else { throw new DTOMapperException ( STR_ + joinStatus . name ( ) ) ; } }
protected void assertOffHeapMetrics ( long freeMemory , long allocatedMemory , long objects , int fragmentation ) { ManagementService service = ManagementService . getExistingManagementService ( getCache ( ) ) ; assertNotNull ( service ) ; assertTrue ( service . isManager ( ) ) ; MemberMXBean memberBean = service . getMemberMXBean ( ) ; assertNotNull ( memberBean ) ; assertEquals ( freeMemory , memberBean . getOffHeapFreeMemory ( ) ) ; assertEquals ( allocatedMemory , memberBean . getOffHeapUsedMemory ( ) ) ; assertEquals ( objects , memberBean . getOffHeapObjects ( ) ) ; assertEquals ( fragmentation , memberBean . getOffHeapFragmentation ( ) ) ; }
public Builder addCompositeFieldClause ( String parentFieldName , String nestedFieldName , String nestedFieldValue , Occurance occurance ) { return addFieldClause ( QuerySpecification . buildCompositeFieldName ( parentFieldName , nestedFieldName ) , nestedFieldValue , occurance ) ; }
public boolean hasMorePages ( ) { boolean result = BOOL_ ; if ( ! hasTotalCount ( ) ) { result = BOOL_ ; } else { if ( skipResults + pageSize <= totalCount ) { result = BOOL_ ; } } return result ; }
protected Object clone ( ) { PipelinedMsgParser p = new PipelinedMsgParser ( ) ; p . rawInputStream = this . rawInputStream ; p . sipMessageListener = this . sipMessageListener ; Thread mythread = new Thread ( p ) ; mythread . setName ( STR_ ) ; return p ; }
public QueryStringQueryBuilder enablePositionIncrements ( boolean enablePositionIncrements ) { this . enablePositionIncrements = enablePositionIncrements ; return this ; }
public String cloneVolume ( String volumeName , long capacity , String volumeTypeId , String sourceVolId ) throws Exception { return createVolume ( volumeName , capacity , volumeTypeId , sourceVolId , null ) ; }
public WWWAuthenticateHeader createWWWAuthenticateHeader ( String scheme ) throws ParseException { if ( scheme == null ) throw new NullPointerException ( STR_ ) ; WWWAuthenticate www = new WWWAuthenticate ( ) ; www . setScheme ( scheme ) ; return www ; }
public void testSettingInHighApiTheme ( ) { VirtualFile virtualFile = myFixture . copyFileToProject ( STR_ , STR_ ) ; myFixture . copyFileToProject ( STR_ , STR_ ) ; myFixture . copyFileToProject ( STR_ , STR_ ) ; myFixture . copyFileToProject ( STR_ , STR_ ) ; ConfigurationManager configurationManager = myFacet . getConfigurationManager ( ) ; Configuration configuration = configurationManager . getConfiguration ( virtualFile ) ; ThemeResolver themeResolver = new ThemeResolver ( configuration ) ; ConfiguredThemeEditorStyle theme = themeResolver . getTheme ( STR_ ) ; assertNotNull ( theme ) ; theme . setValue ( STR_ , STR_ ) ; theme . setValue ( STR_ , STR_ ) ; theme . setParent ( STR_ ) ; myFixture . checkResultByFile ( STR_ , STR_ , BOOL_ ) ; myFixture . checkResultByFile ( STR_ , STR_ , BOOL_ ) ; myFixture . checkResultByFile ( STR_ , STR_ , BOOL_ ) ; myFixture . checkResultByFile ( STR_ , STR_ , BOOL_ ) ; }
@ Override protected void addSubView ( View child , int index ) { if ( child == null || getRealView ( ) == null ) { return ; } if ( child instanceof WXBaseRefreshLayout ) { return ; } int count = getRealView ( ) . getChildCount ( ) ; index = index >= count ? - NUM_ : index ; if ( index == - NUM_ ) { getRealView ( ) . addView ( child ) ; } else { getRealView ( ) . addView ( child , index ) ; } }
private static void printMessage ( String [ ] msg ) { for ( String s : msg ) { System . out . println ( s ) ; } }
public SimpleSimilarity ( double dInit ) { Simil = Double . valueOf ( dInit ) ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public void send ( InetAddress host , int port ) throws IOException { __sendPacket . setAddress ( host ) ; __sendPacket . setPort ( port ) ; _socket_ . send ( __sendPacket ) ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( nodeentitynodetype . class , args ) ; }
public static long twoIntsToLong ( int highOrder , int lowOrder ) { return ( ( ( long ) highOrder ) << NUM_ ) | ( ( ( long ) lowOrder ) & NUM_ ) ; }
public AbortProcessingException ( Throwable cause ) { super ( cause ) ; }
public void stop ( ) { mIsRunning . set ( BOOL_ ) ; }
public static void main ( final String [ ] args ) { DOMTestCase . doMain ( hc_nodedocumentnodeattribute . class , args ) ; }
@ Deployment ( resources = { STR_ } ) public void testProcessCompleted_StartEnd ( ) throws Exception { this . runtimeService . startProcessInstanceByKey ( STR_ ) ; assertEquals ( STR_ , NUM_ , listener . filterEvents ( ActivitiEventType . PROCESS_COMPLETED ) . size ( ) ) ; }
@ Nullable @ Override public JobNotification findRevision ( int id , int revisionNumber ) { JobNotification result = null ; try { begin ( ) ; AuditReader reader = AuditReaderFactory . get ( getEntityManager ( ) ) ; result = reader . find ( JobNotification . class , id , revisionNumber ) ; Hibernate . initialize ( result . getLifecycleEvents ( ) ) ; result . getLifecycleEvents ( ) . contains ( JobLifecycleEvent . QUEUE_ADD ) ; commit ( ) ; } catch ( NoResultException e ) { LOG . warn ( STR_ + revisionNumber + STR_ + id ) ; } finally { cleanup ( ) ; } return result ; }
public boolean hasParent ( ) { return parts . size ( ) > NUM_ ; }
private boolean isColoringEnabled ( ) { return Boolean . parseBoolean ( WtWindowManager . getInstance ( ) . getProperty ( STR_ , STR_ ) ) ; }
public boolean contains ( V vector ) { for ( CLIQUEInterval interval : intervals ) { final double value = vector . doubleValue ( interval . getDimension ( ) ) ; if ( interval . getMin ( ) > value || value >= interval . getMax ( ) ) { return BOOL_ ; } } return BOOL_ ; }
public String [ ] createUserFlags ( ) { String [ ] flags = new String [ userFlags . size ( ) ] ; for ( int i = NUM_ ; i < userFlags . size ( ) ; i ++ ) { flags [ i ] = userFlags . get ( i ) ; } return flags ; }
public void onCreate ( SQLiteDatabase paramSQLiteDatabase ) { int numSchemas = sSchemas . length ; for ( int i = NUM_ ; i < numSchemas ; i ++ ) { try { String [ ] [ ] schema = ( String [ ] [ ] ) sSchemas [ i ] ; paramSQLiteDatabase . execSQL ( createTableQueryFromArray ( sTables [ i ] , schema ) ) ; } catch ( Exception localException ) { while ( BOOL_ ) localException . printStackTrace ( ) ; } } }
public void logPurchase ( BigDecimal purchaseAmount , Currency currency ) { logPurchase ( purchaseAmount , currency , null ) ; }
public SVGPath quadTo ( double [ ] c1xy , double [ ] xy ) { append ( SVGConstants . PATH_QUAD_TO , c1xy [ NUM_ ] , c1xy [ NUM_ ] , xy [ NUM_ ] , xy [ NUM_ ] ) ; return this ; }
public ECPResponseImpl ( Element element ) throws SAML2Exception { parseElement ( element ) ; }
public Builder addMenuItem ( @ NonNull String label , @ NonNull PendingIntent pendingIntent ) { if ( mMenuItems == null ) mMenuItems = new ArrayList < > ( ) ; Bundle bundle = new Bundle ( ) ; bundle . putString ( KEY_MENU_ITEM_TITLE , label ) ; bundle . putParcelable ( KEY_PENDING_INTENT , pendingIntent ) ; mMenuItems . add ( bundle ) ; return this ; }
public static < T > ContextEncodedCachingLmWrapper < T > wrapWithCacheNotThreadSafe ( final ContextEncodedNgramLanguageModel < T > lm ) { return wrapWithCacheNotThreadSafe ( lm , NUM_ ) ; }
public void saveConfiguration ( Configuration dertConfig ) { File file = new File ( dertConfig . getLandscapePath ( ) , STR_ ) ; file = new File ( file , STR_ ) ; if ( ! file . exists ( ) ) file . mkdirs ( ) ; HashMap < String , Object > savedState = dertConfig . save ( ) ; try { file = new File ( file , dertConfig . label ) ; ObjectOutputStream oos = new ObjectOutputStream ( new FileOutputStream ( file ) ) ; oos . writeObject ( savedState ) ; oos . flush ( ) ; oos . close ( ) ; addRecent ( file . getAbsolutePath ( ) ) ; } catch ( Exception e ) { Console . getInstance ( ) . println ( STR_ ) ; e . printStackTrace ( ) ; } Console . getInstance ( ) . println ( STR_ + dertConfig . label ) ; }
private ScriptUtils ( ) { }
public boolean isOverwriteCampaign ( ) { Object oo = get_Value ( COLUMNNAME_OverwriteCampaign ) ; if ( oo != null ) { if ( oo instanceof Boolean ) return ( ( Boolean ) oo ) . booleanValue ( ) ; return STR_ . equals ( oo ) ; } return BOOL_ ; }
public int size ( ) { return this . pathCondition . size ( ) ; }
private void lock ( ) throws InterruptedException { if ( Log . isLoggable ( TAG , Log . DEBUG ) ) { Log . d ( TAG , STR_ , new Throwable ( ) ) ; } mLock . acquire ( ) ; if ( Log . isLoggable ( TAG , Log . DEBUG ) ) { Log . d ( TAG , STR_ ) ; } }
boolean isMarker ( ) { return value == this ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) private void onRequestPasskey ( String objectPath , int nativeData ) { String address = checkPairingRequestAndGetAddress ( objectPath , nativeData ) ; if ( address == null ) return ; mWakeLock . acquire ( ) ; Intent intent = new Intent ( BluetoothDevice . ACTION_PAIRING_REQUEST ) ; intent . putExtra ( BluetoothDevice . EXTRA_DEVICE , mAdapter . getRemoteDevice ( address ) ) ; intent . putExtra ( BluetoothDevice . EXTRA_PAIRING_VARIANT , BluetoothDevice . PAIRING_VARIANT_PASSKEY ) ; mContext . sendBroadcast ( intent , BLUETOOTH_ADMIN_PERM ) ; mWakeLock . release ( ) ; return ; }
public void createContainer ( ) { hierarchicalContainer = new HierarchicalContainer ( ) ; hierarchicalContainer . addContainerProperty ( SPUIDefinitions . ACTION_HIS_TBL_ACTIVE_HIDDEN , String . class , null ) ; hierarchicalContainer . addContainerProperty ( SPUIDefinitions . ACTION_HIS_TBL_FORCED , Action . class , null ) ; hierarchicalContainer . addContainerProperty ( SPUIDefinitions . ACTION_HIS_TBL_ACTION_ID_HIDDEN , Long . class , null ) ; hierarchicalContainer . addContainerProperty ( SPUIDefinitions . ACTION_HIS_TBL_ACTION_ID , String . class , null ) ; hierarchicalContainer . addContainerProperty ( SPUIDefinitions . ACTION_HIS_TBL_DIST , String . class , null ) ; hierarchicalContainer . addContainerProperty ( SPUIDefinitions . ACTION_HIS_TBL_DATETIME , String . class , null ) ; hierarchicalContainer . addContainerProperty ( SPUIDefinitions . ACTION_HIS_TBL_STATUS_HIDDEN , Action . Status . class , null ) ; hierarchicalContainer . addContainerProperty ( SPUIDefinitions . ACTION_HIS_TBL_MSGS_HIDDEN , List . class , null ) ; hierarchicalContainer . addContainerProperty ( SPUIDefinitions . ACTION_HIS_TBL_ROLLOUT_NAME , String . class , null ) ; }
public static void createAgent ( SSOToken ssoToken , String realm , String agentName , String agentType , Map attrValues , String serverURL , String agentURL ) throws IdRepoException , SSOException , SMSException , ConfigurationException { if ( ( serverURL == null ) || ( serverURL . trim ( ) . length ( ) == NUM_ ) ) { throw new ConfigurationException ( STR_ , null ) ; } if ( ( agentURL == null ) || ( agentURL . trim ( ) . length ( ) == NUM_ ) ) { throw new ConfigurationException ( STR_ , null ) ; } FQDNUrl serverFQDNURL = null ; FQDNUrl agentFQDNURL = null ; try { serverFQDNURL = new FQDNUrl ( serverURL ) ; } catch ( MalformedURLException e ) { throw new ConfigurationException ( STR_ , null ) ; } try { agentFQDNURL = new FQDNUrl ( agentURL ) ; } catch ( MalformedURLException e ) { throw new ConfigurationException ( STR_ , null ) ; } createAgentEx ( ssoToken , realm , agentName , agentType , attrValues , serverFQDNURL , agentFQDNURL ) ; }
public void emitMultianewarray ( int ndims , int type , Type arrayType ) { emitop ( multianewarray ) ; if ( ! alive ) return ; emit2 ( type ) ; emit1 ( ndims ) ; state . pop ( ndims ) ; state . push ( arrayType ) ; }
public void addQuat ( Quaternion input ) { this . dirty = BOOL_ ; addQuat ( input , this ) ; }
private static int convertToValue ( final String rawValue ) { int value = - NUM_ ; if ( rawValue . equals ( STR_ ) ) { value = SUM ; } else if ( rawValue . equals ( STR_ ) ) { value = AVG ; } else if ( rawValue . equals ( STR_ ) ) { value = PRD ; } else if ( rawValue . equals ( STR_ ) ) { value = MIN ; } else if ( rawValue . equals ( STR_ ) ) { value = MAX ; } return value ; }
public void unparsedEntityDecl ( String name , String pubID , String sysID , String notationName ) throws SAXException { try { DTDprolog ( ) ; m_writer . write ( STR_ ) ; m_writer . write ( name ) ; if ( pubID != null ) { m_writer . write ( STR_ ) ; m_writer . write ( pubID ) ; } else { m_writer . write ( STR_ ) ; m_writer . write ( sysID ) ; } m_writer . write ( STR_ ) ; m_writer . write ( notationName ) ; m_writer . write ( STR_ ) ; m_writer . write ( m_lineSep , NUM_ , m_lineSepLen ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
public static final void shuffle ( double [ ] a , int start , int len , Random r ) { for ( int i = start + len ; i > NUM_ ; -- i ) { double t = a [ i ] ; int j = r . nextInt ( i ) ; a [ i ] = a [ j ] ; a [ j ] = t ; } }
public void create ( @ Nullable String spaceName , int parts , long init , long max , @ Nullable GridOffHeapEvictListener lsnr ) { spaceName = maskNull ( spaceName ) ; GridOffHeapPartitionedMap m = GridOffHeapMapFactory . unsafePartitionedMap ( parts , NUM_ , NUM_ , init , max , ( short ) NUM_ , lsnr ) ; GridOffHeapPartitionedMap old = offheap . put ( spaceName , m ) ; if ( old != null ) old . destruct ( ) ; }
public static boolean isInsidePolygon ( ReadOnlyVector3 p , ReadOnlyVector3 [ ] vertex ) { return ( windingNumber ( p , vertex ) != NUM_ ) ; }
private static byte [ ] streamToBytes ( InputStream in , int length ) throws IOException { byte [ ] bytes = new byte [ length ] ; int count ; int pos = NUM_ ; while ( pos < length && ( ( count = in . read ( bytes , pos , length - pos ) ) != - NUM_ ) ) { pos += count ; } if ( pos != length ) { throw new IOException ( STR_ + length + STR_ + pos + STR_ ) ; } return bytes ; }
private Instruction do_fload ( int index ) { Operand r = getLocal ( index ) ; if ( VM . VerifyAssertions ) opt_assert ( r . isFloat ( ) ) ; if ( LOCALS_ON_STACK ) { push ( r ) ; return null ; } else { return _moveHelper ( FLOAT_MOVE , r , TypeReference . Float ) ; } }
private void configureParent ( ) { EasyMock . expect ( myView . getSelectedParent ( ) ) . andReturn ( getClassByName ( STR_ ) ) . anyTimes ( ) ; }
protected void checkCompatibleScriptURL ( String scriptType , ParsedURL scriptPURL ) { userAgent . checkLoadScript ( scriptType , scriptPURL , docPURL ) ; }
public String toString ( ) { return String . format ( STR_ , x ( ) , y ( ) ) ; }
public LogException ( ) { super ( ) ; }
public LiveAnalysis ( ) { this ( BOOL_ , BOOL_ , BOOL_ , BOOL_ ) ; }
private int loadSerializationType ( ) { String propertyValue = _configReader . getSpaceProperty ( Engine . ENGINE_SERIALIZATION_TYPE_PROP , Engine . ENGINE_SERIALIZATION_TYPE_DEFAULT ) . trim ( ) ; try { int result = Integer . parseInt ( propertyValue ) ; StorageType storageType = StorageType . fromCode ( result ) ; if ( storageType != StorageType . OBJECT && _logger . isLoggable ( Level . WARNING ) ) _logger . log ( Level . WARNING , Engine . FULL_ENGINE_SERIALIZATION_TYPE_PROP + STR_ + propertyValue + STR_ ) ; return result ; } catch ( NumberFormatException e ) { String msg = STR_ + propertyValue ; if ( _logger . isLoggable ( Level . SEVERE ) ) _logger . log ( Level . SEVERE , msg , e ) ; throw new RuntimeException ( msg , e ) ; } catch ( IllegalArgumentException e ) { String msg = e . getMessage ( ) . replace ( STR_ , STR_ ) ; if ( _logger . isLoggable ( Level . SEVERE ) ) _logger . log ( Level . SEVERE , msg ) ; throw new RuntimeException ( msg ) ; } }
public static void encodeToFile ( byte [ ] dataToEncode , String filename ) throws java . io . IOException { if ( dataToEncode == null ) { throw new NullPointerException ( STR_ ) ; } Base64 . OutputStream bos = null ; try { bos = new Base64 . OutputStream ( new java . io . FileOutputStream ( filename ) , Base64 . ENCODE ) ; bos . write ( dataToEncode ) ; } catch ( java . io . IOException e ) { throw e ; } finally { try { bos . close ( ) ; } catch ( Exception e ) { } } }
public void addTeleMissileAttack ( AttackAction ea ) { pendingTeleMissileAttacks . addElement ( ea ) ; processGameEvent ( new GameNewActionEvent ( this , ea ) ) ; }
private void viewWarnings ( ) { createLogWindow ( STR_ , m_warningLog , Color . BLUE ) ; }
@ Override public int hashCode ( ) { return ( int ) ( termId ^ ( termId > > > NUM_ ) ) ; }
protected synchronized Class loadClass ( final String name , boolean resolve ) throws ClassNotFoundException { Class c = this . findLoadedClass ( name ) ; if ( c != null ) return c ; c = ( Class ) customClasses . get ( name ) ; if ( c != null ) return c ; try { c = oldFindClass ( name ) ; } catch ( ClassNotFoundException cnfe ) { } if ( c == null ) c = super . loadClass ( name , resolve ) ; if ( resolve ) resolveClass ( c ) ; return c ; }
protected AbstractHashedMap ( int initialCapacity , float loadFactor ) { super ( ) ; if ( initialCapacity < NUM_ ) { throw new IllegalArgumentException ( STR_ ) ; } if ( loadFactor <= NUM_ || Float . isNaN ( loadFactor ) ) { throw new IllegalArgumentException ( STR_ ) ; } this . loadFactor = loadFactor ; this . threshold = calculateThreshold ( initialCapacity , loadFactor ) ; initialCapacity = calculateNewCapacity ( initialCapacity ) ; this . data = new HashEntry [ initialCapacity ] ; init ( ) ; }
public int double_set_new ( ) { String s = soot . PhaseOptions . getString ( options , STR_ ) ; if ( s . equalsIgnoreCase ( STR_ ) ) return double_set_new_hash ; if ( s . equalsIgnoreCase ( STR_ ) ) return double_set_new_bit ; if ( s . equalsIgnoreCase ( STR_ ) ) return double_set_new_hybrid ; if ( s . equalsIgnoreCase ( STR_ ) ) return double_set_new_array ; if ( s . equalsIgnoreCase ( STR_ ) ) return double_set_new_heintze ; throw new RuntimeException ( STR_ + s + STR_ ) ; }
private void updateMonthHighlight ( AbsListView view ) { SimpleWeekView child = ( SimpleWeekView ) view . getChildAt ( NUM_ ) ; if ( child == null ) { return ; } int offset = child . getBottom ( ) < WEEK_MIN_VISIBLE_HEIGHT ? NUM_ : NUM_ ; child = ( SimpleWeekView ) view . getChildAt ( SCROLL_HYST_WEEKS + offset ) ; if ( child == null ) { return ; } int month ; if ( mIsScrollingUp ) { month = child . getFirstMonth ( ) ; } else { month = child . getLastMonth ( ) ; } int monthDiff ; if ( mCurrentMonthDisplayed == NUM_ && month == NUM_ ) { monthDiff = NUM_ ; } else if ( mCurrentMonthDisplayed == NUM_ && month == NUM_ ) { monthDiff = - NUM_ ; } else { monthDiff = month - mCurrentMonthDisplayed ; } if ( monthDiff != NUM_ ) { int julianDay = child . getFirstJulianDay ( ) ; if ( mIsScrollingUp ) { } else { julianDay += DAYS_PER_WEEK ; } mTempTime . setJulianDay ( julianDay ) ; setMonthDisplayed ( mTempTime , BOOL_ ) ; } }
protected final void appendLong ( final BigInteger number ) { for ( int i = NUM_ ; i >= NUM_ ; -- i ) { byteData . add ( Byte . valueOf ( ( byte ) ( number . shiftRight ( NUM_ * i ) . and ( BigInteger . valueOf ( NUM_ ) ) . longValue ( ) ) ) ) ; } }
public static List < WebElement > findElementsClickableAfter ( SearchContext parent , By by , int waitInSeconds ) { Preconditions . checkNotNull ( parent ) ; Preconditions . checkNotNull ( by ) ; findElementClickableAfter ( parent , by , waitInSeconds ) ; return parent . findElements ( by ) . stream ( ) . filter ( null ) . collect ( Collectors . toList ( ) ) ; }
@ Override public synchronized void acceptDataSet ( DataSetEvent e ) { try { m_Saver = makeCopy ( ) ; } catch ( Exception ex ) { if ( m_logger != null ) { m_logger . statusMessage ( statusMessagePrefix ( ) + STR_ ) ; m_logger . logMessage ( STR_ + statusMessagePrefix ( ) + STR_ + ex . getMessage ( ) ) ; } } passEnvOnToSaver ( ) ; m_fileName = sanitizeFilename ( e . getDataSet ( ) . relationName ( ) ) ; m_dataSet = e . getDataSet ( ) ; if ( e . isStructureOnly ( ) && m_isDBSaver && ( ( DatabaseSaver ) m_SaverTemplate ) . getRelationForTableName ( ) ) { ( ( DatabaseSaver ) m_Saver ) . setTableName ( m_fileName ) ; } if ( ! e . isStructureOnly ( ) ) { if ( ! m_isDBSaver ) { try { m_Saver . setDirAndPrefix ( m_fileName , STR_ ) ; } catch ( Exception ex ) { System . out . println ( ex ) ; } } saveBatch ( ) ; System . out . println ( STR_ + m_fileName + STR_ ) ; } }
public ImException ( Throwable cause ) { super ( cause ) ; }
public MatrixStack popMatrix ( ) { current = stack . pop ( ) ; return this ; }
public void leftClick ( ) throws InterruptedException { click ( InputEvent . BUTTON1_MASK ) ; }
public ProjectContext loadLastProject ( ) { ProjectRef lastOpenedProject = registry . getLastOpenedProject ( ) ; if ( lastOpenedProject != null ) { try { return loadProject ( lastOpenedProject ) ; } catch ( FileNotFoundException fnf ) { Log . error ( TAG , fnf . getMessage ( ) ) ; fnf . printStackTrace ( ) ; } catch ( AssetNotFoundException anf ) { Log . error ( TAG , anf . getMessage ( ) ) ; } catch ( MetaFileParseException mfp ) { Log . error ( TAG , mfp . getMessage ( ) ) ; } return null ; } return null ; }
public int read ( byte [ ] b , int off , int len ) { return NUM_ ; }
public boolean changeOnlineStatus ( OnlineStatus newStatus ) { if ( onlineStatus . canChangeTo ( newStatus ) ) { OnlineStatus oldStatus = onlineStatus ; onlineStatus = newStatus ; synchronized ( cmrRepositoryChangeListeners ) { for ( CmrRepositoryChangeListener changeListener : cmrRepositoryChangeListeners ) { changeListener . repositoryOnlineStatusUpdated ( this , oldStatus , newStatus ) ; } } return BOOL_ ; } return BOOL_ ; }
private InetAddressUtil ( ) { }
public ImmutableDescriptor ( String [ ] fieldNames , Object [ ] fieldValues ) { this ( makeMap ( fieldNames , fieldValues ) ) ; }
public boolean isPrivateDnsRouteSet ( ) { return mPrivateDnsRouteSet . get ( ) ; }
public static long [ ] breakdown ( long t , @ NonNull TimeUnit unit , boolean roundMillis ) { long days = unit . toDays ( t ) ; long hours = unit . toHours ( t ) % NUM_ ; long minutes = unit . toMinutes ( t ) % NUM_ ; long seconds = unit . toSeconds ( t ) % NUM_ ; long msecs = unit . toMillis ( t ) % NUM_ ; if ( roundMillis ) { if ( msecs >= NUM_ ) { seconds ++ ; msecs = NUM_ ; if ( seconds == NUM_ ) { minutes ++ ; seconds = NUM_ ; if ( minutes == NUM_ ) { hours ++ ; minutes = NUM_ ; if ( hours == NUM_ ) { days ++ ; hours = NUM_ ; } } } } } return new long [ ] { days , hours , minutes , seconds , msecs } ; }
public Environment ( ) { this ( null ) ; }
SelfIteratorNoPredicate ( Compiler compiler , int opPos , int analysis ) throws javax . xml . transform . TransformerException { super ( compiler , opPos , analysis , BOOL_ ) ; }
public PostscriptWriter ( JComponent c ) { super ( c ) ; }
public Zipper < A > modifyNext ( UnaryOperator < A > operator ) throws NoSuchElementException { return new Zipper < > ( front , back . tail ( ) . plus ( operator . apply ( back . head ( ) ) ) , position ) ; }
GeneralPath drawGeometry ( Geometry geom , GeomInfo2D info , boolean fill ) { Coordinate coords [ ] = geom . getCoordinates ( ) ; GeneralPath path = new GeneralPath ( GeneralPath . WIND_NON_ZERO , coords . length ) ; path . moveTo ( ( float ) coords [ NUM_ ] . x , ( float ) coords [ NUM_ ] . y ) ; for ( int i = NUM_ ; i < coords . length ; i ++ ) { path . lineTo ( ( float ) coords [ i ] . x , ( float ) coords [ i ] . y ) ; } path . transform ( info . transform ) ; return path ; }
protected void activateWindow ( ExecutionWindow window ) { lock . lock ( ) ; try { if ( ! activeWindows . containsKey ( window . getId ( ) ) ) { LOG . info ( STR_ + window . getLabel ( ) ) ; activeWindows . put ( window . getId ( ) , window ) ; hasActiveWindows . signalAll ( ) ; } } finally { lock . unlock ( ) ; } }
@ Override public void fillRect ( int x , int y , int width , int height ) { if ( width == m_extent . width && height == m_extent . height ) { clearRect ( x , y , width , height ) ; } else { if ( DEBUG ) { m_printstream . println ( STR_ ) ; } setStateToLocal ( ) ; m_printstream . println ( xTransform ( xScale ( x ) ) + STR_ + yTransform ( yScale ( y ) ) + STR_ + xScale ( width ) + STR_ + yScale ( height ) + STR_ ) ; } }
public static ODataUri createODataValueEntitiesUri ( String serviceRoot , String entitySetName , String propertyName ) { ValuePath$ valuePath = ValuePath$ . MODULE$ ; scala . Option < PathSegment > valuePathOption = scala . Option . apply ( valuePath ) ; PropertyPath propertyPath = PropertyPath$ . MODULE$ . apply ( propertyName , valuePathOption ) ; scala . Option < PathSegment > propertyPathOption = scala . Option . apply ( propertyPath ) ; scala . Option < String > noString = scala . Option . apply ( null ) ; EntityCollectionPath entityCollectionPath = new EntityCollectionPath ( noString , propertyPathOption ) ; scala . Option < EntityCollectionPath > entityCollectionPathOption = scala . Option . apply ( entityCollectionPath ) ; EntitySetPath entitySetPath = new EntitySetPath ( entitySetName , entityCollectionPathOption ) ; List < QueryOption > queryOptions = new ArrayList < > ( ) ; ResourcePathUri resourcePathUri = new ResourcePathUri ( entitySetPath , asScalaList ( queryOptions ) ) ; return new ODataUri ( serviceRoot , resourcePathUri ) ; }
public static int accumulateCRC ( byte data , int crc ) { int tmp = ( data ^ crc ) & NUM_ ; tmp ^= ( tmp << NUM_ ) & NUM_ ; return ( ( crc > > NUM_ ) ^ ( tmp << NUM_ ) ^ ( tmp << NUM_ ) ^ ( tmp > > NUM_ ) ) & NUM_ ; }
public void addEntity ( WorldEntity entity ) { logger . debug ( STR_ , entity . getName ( ) , name ) ; entities . add ( entity ) ; entity . btRigidBody . setUserValue ( entities . size ( ) ) ; bulletWorld . addRigidBody ( entity . btRigidBody ) ; }
@ DSGenerator ( tool_name = STR_ , tool_version = STR_ , generated_on = STR_ , hash_original_method = STR_ , hash_generated_method = STR_ ) public static BigInteger sizeOfDirectoryAsBigInteger ( File directory ) { checkDirectory ( directory ) ; final File [ ] files = directory . listFiles ( ) ; if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { try { if ( ! isSymlink ( file ) ) { size = size . add ( BigInteger . valueOf ( sizeOf ( file ) ) ) ; } } catch ( IOException ioe ) { } } return size ; }
protected MessageIntegrityAttribute ( ) { super ( MESSAGE_INTEGRITY ) ; }
public void openNativeNavigationApp ( String location ) { impl . openNativeNavigationApp ( location ) ; }
public void normalize ( ) { throw new UnsupportedOperationException ( STR_ ) ; }
private boolean ManageInputArguments ( ) { CustomLogger . log ( STR_ + args . length + STR_ ) ; for ( int i = NUM_ ; i < args . length ; i ++ ) { CustomLogger . log ( STR_ + args [ i ] ) ; } printer . jumpLine ( ) ; CustomLogger . log ( STR_ ) ; if ( args . length == NUM_ ) { CustomLogger . log ( STR_ ) ; printer . printHelp ( ) ; return BOOL_ ; } if ( args [ NUM_ ] . equalsIgnoreCase ( OPTION_VERSION ) || args [ NUM_ ] . equalsIgnoreCase ( OPTION_VERSION2 ) ) { CustomLogger . log ( STR_ ) ; printer . printVersion ( ) ; return BOOL_ ; } if ( args [ NUM_ ] . equalsIgnoreCase ( OPTION_HELP ) || args [ NUM_ ] . equalsIgnoreCase ( OPTION_HELP2 ) ) { CustomLogger . log ( STR_ ) ; printer . printHelp ( ) ; return BOOL_ ; } return BOOL_ ; }
private String shortFQN ( String fqn , String method , int size ) { String line = fqn + STR_ + method ; if ( line . length ( ) > size ) { line = STR_ + line . substring ( NUM_ , size ) ; } return line ; }
public void endProcess ( ) { }
public < V2 > JavaPairRDD < Tuple2 < K , V > , Option < V2 > > outerJoinGeodeRegion ( String regionPath , GeodeConnectionConf connConf ) { GeodeOuterJoinRDD < Tuple2 < K , V > , K , V2 > rdd = rddf . outerJoinGeodeRegion ( regionPath , connConf ) ; ClassTag < Tuple2 < K , V > > kt = fakeClassTag ( ) ; ClassTag < Option < V2 > > vt = fakeClassTag ( ) ; return new JavaPairRDD < > ( rdd , kt , vt ) ; }
public int size ( ) { return this . compositeOutputStream . size ( ) ; }
public void selectDetailsView ( DetailsView detailsView ) { DisplayArea displayArea = getDisplayArea ( detailsView . getTab ( ) ) ; if ( displayArea != null ) displayArea . setSelectedTab ( detailsView . getTab ( ) ) ; }
@ Override public final boolean isPasswordSupplied ( ) { return fileAccess . isPasswordSupplied ( getIO ( ) ) ; }
public com . sun . identity . wsfederation . jaxb . wsspolicy . WssX509V1Token11Element createWssX509V1Token11Element ( ) throws javax . xml . bind . JAXBException { return new com . sun . identity . wsfederation . jaxb . wsspolicy . impl . WssX509V1Token11ElementImpl ( ) ; }
private void endFormals ( ) { if ( hasFormals ) { hasFormals = BOOL_ ; buf . append ( STR_ ) ; } }
public BitmapDrawer scaleRegistration ( float regX , float regY ) { setScaleRegistration ( regX , regY ) ; return this ; }
public static void ccDrawPoly ( GL10 gl , CGPoint poli [ ] , int numberOfPoints , boolean closePolygon ) { FloatBuffer vertices = getVertices ( NUM_ * numberOfPoints ) ; for ( int i = NUM_ ; i < numberOfPoints ; i ++ ) { vertices . put ( poli [ i ] . x ) ; vertices . put ( poli [ i ] . y ) ; } vertices . position ( NUM_ ) ; gl . glDisable ( GL_TEXTURE_2D ) ; gl . glDisableClientState ( GL_TEXTURE_COORD_ARRAY ) ; gl . glDisableClientState ( GL_COLOR_ARRAY ) ; gl . glVertexPointer ( NUM_ , GL_FLOAT , NUM_ , vertices ) ; if ( closePolygon ) gl . glDrawArrays ( GL_LINE_LOOP , NUM_ , numberOfPoints ) ; else gl . glDrawArrays ( GL_LINE_STRIP , NUM_ , numberOfPoints ) ; gl . glEnableClientState ( GL_COLOR_ARRAY ) ; gl . glEnableClientState ( GL_TEXTURE_COORD_ARRAY ) ; gl . glEnable ( GL_TEXTURE_2D ) ; }
public ExecutionScopeItemProvider ( AdapterFactory adapterFactory ) { super ( adapterFactory ) ; }
@ SuppressLint ( STR_ ) @ Override protected void initViews ( Bundle savedInstanceState ) { ButterKnife . bind ( this ) ; File dir = this . getDir ( STR_ , Activity . MODE_PRIVATE ) ; File distFile = new File ( dir . getAbsolutePath ( ) + File . separator + STR_ ) ; if ( copyFileFromAssets ( getApplicationContext ( ) , STR_ , distFile . getAbsolutePath ( ) ) ) { System . load ( distFile . getAbsolutePath ( ) ) ; NativeBlurProcess . isLoadLibraryOk . set ( BOOL_ ) ; } }
public static Typeface walkwayOblique ( Context context ) { return FontSourceProcessor . process ( R . raw . walkway_oblique , context ) ; }
public ZipParser ( ) { }
public boolean isCodeAttribute ( ) { return BOOL_ ; }
@ Override protected void done ( ) { executionList . execute ( ) ; }
@ Override public boolean onScale ( ScaleGestureDetector detector ) { return BOOL_ ; }
private void returnData ( Object ret ) { if ( myHost != null ) { myHost . returnData ( ret ) ; } }
public static void showError ( Context context , CharSequence msg , DialogInterface . OnCancelListener listener ) { AlertDialog dlg = newDlg ( context ) ; dlg . setIcon ( android . R . drawable . ic_dialog_alert ) ; dlg . setTitle ( R . string . afc_title_error ) ; dlg . setMessage ( msg ) ; dlg . setOnCancelListener ( listener ) ; dlg . show ( ) ; }
public static Boolean isJSONPreferred ( Http . Request request ) { String preferredType = getPreferType ( request , STR_ , STR_ ) ; return ( preferredType != null ) ? preferredType . equals ( STR_ ) : BOOL_ ; }
private void readObject ( ObjectInputStream stream ) throws IOException , ClassNotFoundException { stream . defaultReadObject ( ) ; this . backgroundPaint = SerialUtilities . readPaint ( stream ) ; }
public void reset ( ) { internalReset ( NUM_ ) ; }
public PhotosCreateCommentQuery fromGroup ( Boolean value ) { return unsafeParam ( STR_ , value ) ; }
SIPDialogErrorEvent ( SIPDialog sourceDialog , int dialogErrorID ) { super ( sourceDialog ) ; errorID = dialogErrorID ; }
public Object runSafely ( Catbert . FastStack stack ) throws Exception { UIManager uiMgr = stack . getUIMgr ( ) ; if ( uiMgr != null ) { return ( uiMgr . hasRemoteFSSupport ( ) || uiMgr . getUIClientType ( ) == UIClient . LOCAL ) ? Boolean . TRUE : Boolean . FALSE ; } return Boolean . FALSE ; }
static boolean containsMatchingLabel ( Mark mark , String label ) { for ( Trademark trademark : mark . getTrademarks ( ) ) { if ( trademark . getLabels ( ) . contains ( label ) ) { return BOOL_ ; } } for ( ProtectedMark protectedMark : concat ( mark . getTreatyOrStatuteMarks ( ) , mark . getCourtMarks ( ) ) ) { if ( protectedMark . getLabels ( ) . contains ( label ) ) { return BOOL_ ; } } return BOOL_ ; }
public PeerAddress ( InetAddress addr , int port ) { this ( addr , port , NetworkParameters . ProtocolVersion . CURRENT . getBitcoinProtocolVersion ( ) ) ; }
public MenuShortcut ( int key ) { this ( key , BOOL_ ) ; }
public boolean acceptElement ( ) { probability *= ( ( double ) notRequiredElementsCounter ) / ( ( double ) populationCounter ) ; if ( probability > randomValue ) { populationCounter -- ; notRequiredElementsCounter -- ; return BOOL_ ; } else { populationCounter -- ; probability = NUM_ ; randomValue = NUM_ - randomGenerator . nextDouble ( ) ; return BOOL_ ; } }
public void addRunnerId ( @ NotNull Long runnerId ) { runnersId . add ( runnerId ) ; }
private FastMathLiteralArrays ( ) { }
public void destroySelf ( ) { }
@ SuppressWarnings ( STR_ ) private Segment < K , V > segmentForHash ( int h ) { long u = ( ( ( h > > > segmentShift ) & segmentMask ) << SSHIFT ) + SBASE ; return ( Segment < K , V > ) UNSAFE . getObjectVolatile ( segments , u ) ; }
@ Override public void onChangedAdded ( final RPObject object , final RPObject changes ) { super . onChangedAdded ( object , changes ) ; if ( changes . has ( STR_ ) ) { ripeness = changes . getInt ( STR_ ) ; fireChange ( PROP_RIPENESS ) ; } if ( object . has ( STR_ ) ) { maxRipeness = object . getInt ( STR_ ) ; } }
protected SVGOMSVGElement ( ) { }
public static SetOverrideType from_int ( int i ) { switch ( i ) { case _SET_OVERRIDE : return SET_OVERRIDE ; case _ADD_OVERRIDE : return ADD_OVERRIDE ; default : throw new org . omg . CORBA . BAD_PARAM ( ) ; } }
public static Constraint < CharSequence > containsSymbol ( ) { return new ContainsSymbolConstraint ( ) ; }
private String replaceLanguageAndRegion ( String str ) { if ( str . contains ( STR_ ) || str . contains ( STR_ ) ) { Locale locale = Locale . getDefault ( ) ; str = str . replace ( STR_ , locale . getLanguage ( ) . toLowerCase ( ) ) ; str = str . replace ( STR_ , locale . getCountry ( ) . toLowerCase ( ) ) ; } return str ; }
protected BusinessObjectData restoreBusinessObjectDataImpl ( BusinessObjectDataKey businessObjectDataKey ) { BusinessObjectDataRestoreDto businessObjectDataRestoreDto = businessObjectDataInitiateRestoreHelperService . prepareToInitiateRestore ( businessObjectDataKey ) ; notificationEventService . processStorageUnitNotificationEventAsync ( NotificationEventTypeEntity . EventTypesStorageUnit . STRGE_UNIT_STTS_CHG , businessObjectDataRestoreDto . getBusinessObjectDataKey ( ) , businessObjectDataRestoreDto . getOriginStorageName ( ) , businessObjectDataRestoreDto . getNewOriginStorageUnitStatus ( ) , businessObjectDataRestoreDto . getOldOriginStorageUnitStatus ( ) ) ; businessObjectDataInitiateRestoreHelperService . executeS3SpecificSteps ( businessObjectDataRestoreDto ) ; if ( businessObjectDataRestoreDto . getException ( ) != null ) { businessObjectDataInitiateRestoreHelperService . executeInitiateRestoreAfterStep ( businessObjectDataRestoreDto ) ; notificationEventService . processStorageUnitNotificationEventAsync ( NotificationEventTypeEntity . EventTypesStorageUnit . STRGE_UNIT_STTS_CHG , businessObjectDataRestoreDto . getBusinessObjectDataKey ( ) , businessObjectDataRestoreDto . getOriginStorageName ( ) , businessObjectDataRestoreDto . getNewOriginStorageUnitStatus ( ) , businessObjectDataRestoreDto . getOldOriginStorageUnitStatus ( ) ) ; throw new IllegalStateException ( businessObjectDataRestoreDto . getException ( ) ) ; } else { return businessObjectDataInitiateRestoreHelperService . executeInitiateRestoreAfterStep ( businessObjectDataRestoreDto ) ; } }
@ Override public DefaultProjectClient project ( ) { return new DefaultProjectClient ( url , authenticationManager ) ; }
public GeneralRuntimeException ( String msg , Throwable nested ) { super ( msg ) ; this . nested = nested ; }
public TupleManagerIterator ( TupleManager tuples , IntIterator rows ) { m_tuples = tuples ; m_rows = rows ; }
public ConnectionRecordSortPredicate ( ConnectionRecordSet . SortableProperty property , boolean descending ) { this . property = property ; this . descending = descending ; }
public String [ ] match ( String value ) { if ( value == null ) { return null ; } for ( int i = NUM_ ; i < patterns . length ; i ++ ) { Matcher matcher = patterns [ i ] . matcher ( value ) ; if ( matcher . matches ( ) ) { int count = matcher . groupCount ( ) ; String [ ] groups = new String [ count ] ; for ( int j = NUM_ ; j < count ; j ++ ) { groups [ j ] = matcher . group ( j + NUM_ ) ; } return groups ; } } return null ; }
protected void childDeserializedHook ( Object child , BCSChild bcsc ) { synchronized ( children ) { children . put ( child , bcsc ) ; } }
public void testParameters ( ) throws Exception { resource . setParameter ( STR_ , STR_ ) ; resource . setParameter ( STR_ , STR_ ) ; assertEquals ( STR_ , STR_ , resource . getParameter ( STR_ ) ) ; assertEquals ( STR_ , STR_ , resource . getParameter ( STR_ ) ) ; }
@ Override public final int compareTo ( Version other ) { final int minLength = Math . min ( this . m_rawVersion . length , other . m_rawVersion . length ) ; for ( int i = NUM_ ; i < minLength ; i ++ ) { final int componentComparison = this . m_rawVersion [ i ] . compareTo ( other . m_rawVersion [ i ] ) ; if ( componentComparison != NUM_ ) { return componentComparison ; } } final int lengthComparison = Integer . valueOf ( this . m_rawVersion . length ) . compareTo ( other . m_rawVersion . length ) ; if ( lengthComparison == NUM_ ) { return NUM_ ; } final Version longer = lengthComparison > NUM_ ? this : other ; for ( int i = minLength ; i < longer . m_rawVersion . length ; i ++ ) { if ( longer . m_rawVersion [ i ] > NUM_ ) { return lengthComparison ; } } return NUM_ ; }
public Criteria or ( ) { Criteria criteria = createCriteriaInternal ( ) ; oredCriteria . add ( criteria ) ; return criteria ; }
public boolean shouldStripWhiteSpace ( org . apache . xpath . XPathContext support , org . w3c . dom . Element targetElement ) throws TransformerException { StylesheetRoot sroot = this . getStylesheetRoot ( ) ; return ( null != sroot ) ? sroot . shouldStripWhiteSpace ( support , targetElement ) : BOOL_ ; }
public ProcessingUnit ( CompilerConfiguration configuration , GroovyClassLoader classLoader , ErrorCollector er ) { this . phase = Phases . INITIALIZATION ; this . configuration = configuration ; this . setClassLoader ( classLoader ) ; configure ( ( configuration == null ? new CompilerConfiguration ( ) : configuration ) ) ; if ( er == null ) er = new ErrorCollector ( getConfiguration ( ) ) ; this . errorCollector = er ; }
protected boolean isFileSpecifyingModuleSpecifier ( String specifier ) { return specifier . length ( ) > NUM_ && specifier . charAt ( specifier . length ( ) - NUM_ ) != IPath . SEPARATOR ; }
